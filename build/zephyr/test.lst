
test.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   0:	20000ab8 	.word	0x20000ab8
   4:	00000b3d 	.word	0x00000b3d
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   8:	00003251 	.word	0x00003251
   c:	00000b6d 	.word	0x00000b6d
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
  10:	00000b6d 	.word	0x00000b6d
  14:	00000b6d 	.word	0x00000b6d
  18:	00000b6d 	.word	0x00000b6d
	...
		errno = err;
		return NULL;
  2c:	000009a9 	.word	0x000009a9
		return NULL;
  30:	00000b6d 	.word	0x00000b6d
  34:	00000000 	.word	0x00000000
  38:	00000961 	.word	0x00000961
  3c:	000030dd 	.word	0x000030dd

00000040 <_irq_vector_table>:
  40:	00000afd 00000afd 00000afd 00000afd     ................
  50:	00000afd 00000afd 00000afd 00000afd     ................
  60:	00000afd 00000afd 00000afd 00000afd     ................
  70:	00000afd 00000afd 00000afd 00000afd     ................
  80:	00000afd 00000afd 00000afd 00000afd     ................
  90:	00000afd 00000afd 00000afd 00000afd     ................
  a0:	00000afd 00000afd 00000afd 00000afd     ................
  b0:	00000afd 00000afd 00000afd 00000afd     ................
  c0:	00000afd 00000afd 00000afd 00000afd     ................
  d0:	00000afd 00000afd 00000afd              ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b96e 	b.w	3d0 <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9d08      	ldr	r5, [sp, #32]
     112:	460e      	mov	r6, r1
     114:	4604      	mov	r4, r0
     116:	468c      	mov	ip, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8081 	bne.w	220 <CONFIG_FLASH_SIZE+0x20>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d945      	bls.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa06 f302 	lsl.w	r3, r6, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0c03 	orr.w	ip, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbc f6fe 	udiv	r6, ip, lr
     148:	b2b9      	uxth	r1, r7
     14a:	fb0e cc16 	mls	ip, lr, r6, ip
     14e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     152:	fb06 f001 	mul.w	r0, r6, r1
     156:	4298      	cmp	r0, r3
     158:	d909      	bls.n	16e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x24>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     160:	f080 8115 	bcs.w	38e <CONFIG_FLASH_SIZE+0x18e>
     164:	4298      	cmp	r0, r3
     166:	f240 8112 	bls.w	38e <CONFIG_FLASH_SIZE+0x18e>
     16a:	3e02      	subs	r6, #2
     16c:	443b      	add	r3, r7
     16e:	1a1b      	subs	r3, r3, r0
     170:	b2a4      	uxth	r4, r4
     172:	fbb3 f0fe 	udiv	r0, r3, lr
     176:	fb0e 3310 	mls	r3, lr, r0, r3
     17a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     17e:	fb00 f101 	mul.w	r1, r0, r1
     182:	42a1      	cmp	r1, r4
     184:	d909      	bls.n	19a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x50>
     186:	193c      	adds	r4, r7, r4
     188:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     18c:	f080 8101 	bcs.w	392 <CONFIG_FLASH_SIZE+0x192>
     190:	42a1      	cmp	r1, r4
     192:	f240 80fe 	bls.w	392 <CONFIG_FLASH_SIZE+0x192>
     196:	3802      	subs	r0, #2
     198:	443c      	add	r4, r7
     19a:	1a64      	subs	r4, r4, r1
     19c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1a0:	2100      	movs	r1, #0
     1a2:	b11d      	cbz	r5, 1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     1a4:	40d4      	lsrs	r4, r2
     1a6:	2300      	movs	r3, #0
     1a8:	e9c5 4300 	strd	r4, r3, [r5]
     1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b0:	b902      	cbnz	r2, 1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1b2:	deff      	udf	#255	; 0xff
     1b4:	fab2 f282 	clz	r2, r2
     1b8:	2a00      	cmp	r2, #0
     1ba:	d14f      	bne.n	25c <CONFIG_FLASH_SIZE+0x5c>
     1bc:	1bcb      	subs	r3, r1, r7
     1be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c2:	fa1f f887 	uxth.w	r8, r7
     1c6:	2101      	movs	r1, #1
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
     1cc:	0c26      	lsrs	r6, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
     1d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1d6:	fb08 f30c 	mul.w	r3, r8, ip
     1da:	42b3      	cmp	r3, r6
     1dc:	d907      	bls.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1de:	19be      	adds	r6, r7, r6
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e4:	d202      	bcs.n	1ec <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa2>
     1e6:	42b3      	cmp	r3, r6
     1e8:	f200 80eb 	bhi.w	3c2 <CONFIG_FLASH_SIZE+0x1c2>
     1ec:	4684      	mov	ip, r0
     1ee:	1af6      	subs	r6, r6, r3
     1f0:	b2a3      	uxth	r3, r4
     1f2:	fbb6 f0fe 	udiv	r0, r6, lr
     1f6:	fb0e 6610 	mls	r6, lr, r0, r6
     1fa:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     1fe:	fb08 f800 	mul.w	r8, r8, r0
     202:	45a0      	cmp	r8, r4
     204:	d907      	bls.n	216 <CONFIG_FLASH_SIZE+0x16>
     206:	193c      	adds	r4, r7, r4
     208:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     20c:	d202      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20e:	45a0      	cmp	r8, r4
     210:	f200 80d2 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     214:	4618      	mov	r0, r3
     216:	eba4 0408 	sub.w	r4, r4, r8
     21a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     21e:	e7c0      	b.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     220:	428b      	cmp	r3, r1
     222:	d908      	bls.n	236 <CONFIG_FLASH_SIZE+0x36>
     224:	2d00      	cmp	r5, #0
     226:	f000 80af 	beq.w	388 <CONFIG_FLASH_SIZE+0x188>
     22a:	2100      	movs	r1, #0
     22c:	e9c5 0600 	strd	r0, r6, [r5]
     230:	4608      	mov	r0, r1
     232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     236:	fab3 f183 	clz	r1, r3
     23a:	2900      	cmp	r1, #0
     23c:	d149      	bne.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     23e:	42b3      	cmp	r3, r6
     240:	d302      	bcc.n	248 <CONFIG_FLASH_SIZE+0x48>
     242:	4282      	cmp	r2, r0
     244:	f200 80bb 	bhi.w	3be <CONFIG_FLASH_SIZE+0x1be>
     248:	1a84      	subs	r4, r0, r2
     24a:	eb66 0303 	sbc.w	r3, r6, r3
     24e:	2001      	movs	r0, #1
     250:	469c      	mov	ip, r3
     252:	2d00      	cmp	r5, #0
     254:	d0aa      	beq.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     256:	e9c5 4c00 	strd	r4, ip, [r5]
     25a:	e7a7      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     25c:	f1c2 0320 	rsb	r3, r2, #32
     260:	4097      	lsls	r7, r2
     262:	40d8      	lsrs	r0, r3
     264:	4091      	lsls	r1, r2
     266:	40de      	lsrs	r6, r3
     268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     26c:	4308      	orrs	r0, r1
     26e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     272:	fbb6 f1fe 	udiv	r1, r6, lr
     276:	fa1f f887 	uxth.w	r8, r7
     27a:	fb0e 6611 	mls	r6, lr, r1, r6
     27e:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     282:	fb01 f308 	mul.w	r3, r1, r8
     286:	42b3      	cmp	r3, r6
     288:	fa04 f402 	lsl.w	r4, r4, r2
     28c:	d909      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     28e:	19be      	adds	r6, r7, r6
     290:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     294:	f080 808e 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     298:	42b3      	cmp	r3, r6
     29a:	f240 808b 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	3902      	subs	r1, #2
     2a0:	443e      	add	r6, r7
     2a2:	1af3      	subs	r3, r6, r3
     2a4:	b286      	uxth	r6, r0
     2a6:	fbb3 f0fe 	udiv	r0, r3, lr
     2aa:	fb0e 3310 	mls	r3, lr, r0, r3
     2ae:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2b2:	fb00 f308 	mul.w	r3, r0, r8
     2b6:	42b3      	cmp	r3, r6
     2b8:	d907      	bls.n	2ca <CONFIG_FLASH_SIZE+0xca>
     2ba:	19be      	adds	r6, r7, r6
     2bc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c0:	d274      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c2:	42b3      	cmp	r3, r6
     2c4:	d972      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c6:	3802      	subs	r0, #2
     2c8:	443e      	add	r6, r7
     2ca:	1af3      	subs	r3, r6, r3
     2cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d0:	e77a      	b.n	1c8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x7e>
     2d2:	f1c1 0720 	rsb	r7, r1, #32
     2d6:	fa03 f401 	lsl.w	r4, r3, r1
     2da:	fa22 f307 	lsr.w	r3, r2, r7
     2de:	431c      	orrs	r4, r3
     2e0:	fa20 f907 	lsr.w	r9, r0, r7
     2e4:	fa06 f301 	lsl.w	r3, r6, r1
     2e8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2ec:	40fe      	lsrs	r6, r7
     2ee:	ea49 0903 	orr.w	r9, r9, r3
     2f2:	ea4f 4319 	mov.w	r3, r9, lsr #16
     2f6:	fbb6 fefc 	udiv	lr, r6, ip
     2fa:	fa1f f884 	uxth.w	r8, r4
     2fe:	fb0c 661e 	mls	r6, ip, lr, r6
     302:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     306:	fb0e fa08 	mul.w	sl, lr, r8
     30a:	45b2      	cmp	sl, r6
     30c:	fa02 f201 	lsl.w	r2, r2, r1
     310:	fa00 f301 	lsl.w	r3, r0, r1
     314:	d908      	bls.n	328 <CONFIG_FLASH_SIZE+0x128>
     316:	19a6      	adds	r6, r4, r6
     318:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     31c:	d248      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     31e:	45b2      	cmp	sl, r6
     320:	d946      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     322:	f1ae 0e02 	sub.w	lr, lr, #2
     326:	4426      	add	r6, r4
     328:	eba6 060a 	sub.w	r6, r6, sl
     32c:	fa1f f989 	uxth.w	r9, r9
     330:	fbb6 f0fc 	udiv	r0, r6, ip
     334:	fb0c 6610 	mls	r6, ip, r0, r6
     338:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45b0      	cmp	r8, r6
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	19a6      	adds	r6, r4, r6
     346:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45b0      	cmp	r8, r6
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	4426      	add	r6, r4
     354:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     358:	eba6 0608 	sub.w	r6, r6, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454e      	cmp	r6, r9
     362:	46c4      	mov	ip, r8
     364:	46ce      	mov	lr, r9
     366:	d318      	bcc.n	39a <CONFIG_FLASH_SIZE+0x19a>
     368:	d015      	beq.n	396 <CONFIG_FLASH_SIZE+0x196>
     36a:	b375      	cbz	r5, 3ca <CONFIG_FLASH_SIZE+0x1ca>
     36c:	ebb3 020c 	subs.w	r2, r3, ip
     370:	eb66 060e 	sbc.w	r6, r6, lr
     374:	fa06 f707 	lsl.w	r7, r6, r7
     378:	fa22 f301 	lsr.w	r3, r2, r1
     37c:	40ce      	lsrs	r6, r1
     37e:	431f      	orrs	r7, r3
     380:	e9c5 7600 	strd	r7, r6, [r5]
     384:	2100      	movs	r1, #0
     386:	e711      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     388:	4629      	mov	r1, r5
     38a:	4628      	mov	r0, r5
     38c:	e70e      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     38e:	4666      	mov	r6, ip
     390:	e6ed      	b.n	16e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x24>
     392:	4618      	mov	r0, r3
     394:	e701      	b.n	19a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x50>
     396:	4543      	cmp	r3, r8
     398:	d2e7      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39a:	ebb8 0c02 	subs.w	ip, r8, r2
     39e:	eb69 0404 	sbc.w	r4, r9, r4
     3a2:	3801      	subs	r0, #1
     3a4:	46a6      	mov	lr, r4
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4660      	mov	r0, ip
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78c      	b.n	2ca <CONFIG_FLASH_SIZE+0xca>
     3b0:	4686      	mov	lr, r0
     3b2:	e7b9      	b.n	328 <CONFIG_FLASH_SIZE+0x128>
     3b4:	4661      	mov	r1, ip
     3b6:	e774      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     3b8:	3802      	subs	r0, #2
     3ba:	443c      	add	r4, r7
     3bc:	e72b      	b.n	216 <CONFIG_FLASH_SIZE+0x16>
     3be:	4608      	mov	r0, r1
     3c0:	e747      	b.n	252 <CONFIG_FLASH_SIZE+0x52>
     3c2:	f1ac 0c02 	sub.w	ip, ip, #2
     3c6:	443e      	add	r6, r7
     3c8:	e711      	b.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     3ca:	4629      	mov	r1, r5
     3cc:	e6ee      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <main>:
#ifndef FLAGS
#define FLAGS	0
#endif

void main(void)
{
     3d4:	b538      	push	{r3, r4, r5, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3d6:	481a      	ldr	r0, [pc, #104]	; (440 <CONFIG_MAIN_STACK_SIZE+0x40>)
     3d8:	f001 fb18 	bl	1a0c <z_impl_device_get_binding>
	struct device *dev;
	bool led_is_on = true;
	int ret;

	dev = device_get_binding(LED0);
	if (dev == NULL) {
     3dc:	b378      	cbz	r0, 43e <CONFIG_MAIN_STACK_SIZE+0x3e>
     3de:	4605      	mov	r5, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config_info;
	struct gpio_driver_data *data =
     3e0:	68c4      	ldr	r4, [r0, #12]
	const struct gpio_driver_api *api =
     3e2:	6883      	ldr	r3, [r0, #8]
	return api->pin_configure(port, pin, flags);
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	f240 6201 	movw	r2, #1537	; 0x601
     3ea:	2111      	movs	r1, #17
     3ec:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
     3ee:	4602      	mov	r2, r0
     3f0:	b918      	cbnz	r0, 3fa <main+0x26>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     3f2:	6823      	ldr	r3, [r4, #0]
     3f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     3f8:	6023      	str	r3, [r4, #0]
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
     3fa:	2a00      	cmp	r2, #0
     3fc:	db1f      	blt.n	43e <CONFIG_MAIN_STACK_SIZE+0x3e>
	bool led_is_on = true;
     3fe:	2401      	movs	r4, #1
     400:	e00c      	b.n	41c <CONFIG_MAIN_STACK_SIZE+0x1c>
				     gpio_port_pins_t pins);

static inline int z_impl_gpio_port_set_bits_raw(struct device *port,
						gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
     402:	68ab      	ldr	r3, [r5, #8]
		(const struct gpio_driver_api *)port->driver_api;

	return api->port_set_bits_raw(port, pins);
     404:	68db      	ldr	r3, [r3, #12]
     406:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     40a:	4628      	mov	r0, r5
     40c:	4798      	blx	r3
		return;
	}

	while (1) {
		gpio_pin_set(dev, PIN, (int)led_is_on);
		led_is_on = !led_is_on;
     40e:	f084 0401 	eor.w	r4, r4, #1
		parm0.val = timeout;
		return (s32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     412:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     416:	2100      	movs	r1, #0
     418:	f002 f890 	bl	253c <z_impl_k_sleep>
		gpio_pin_set(dev, PIN, (int)led_is_on);
     41c:	4623      	mov	r3, r4
 */
static inline int gpio_pin_set(struct device *port, gpio_pin_t pin, int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config_info;
	const struct gpio_driver_data *const data =
     41e:	68ea      	ldr	r2, [r5, #12]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     420:	6812      	ldr	r2, [r2, #0]
     422:	f412 3f00 	tst.w	r2, #131072	; 0x20000
     426:	d001      	beq.n	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
		value = (value != 0) ? 0 : 1;
     428:	f084 0301 	eor.w	r3, r4, #1
	if (value != 0)	{
     42c:	2b00      	cmp	r3, #0
     42e:	d1e8      	bne.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
	const struct gpio_driver_api *api =
     430:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
     432:	691b      	ldr	r3, [r3, #16]
     434:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     438:	4628      	mov	r0, r5
     43a:	4798      	blx	r3
     43c:	e7e7      	b.n	40e <CONFIG_MAIN_STACK_SIZE+0xe>
		k_msleep(SLEEP_TIME_MS);
	}
}
     43e:	bd38      	pop	{r3, r4, r5, pc}
     440:	00003cd8 	.word	0x00003cd8

00000444 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     444:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     446:	680b      	ldr	r3, [r1, #0]
     448:	3301      	adds	r3, #1
     44a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     44c:	4b01      	ldr	r3, [pc, #4]	; (454 <char_out+0x10>)
     44e:	681b      	ldr	r3, [r3, #0]
     450:	4798      	blx	r3
}
     452:	bd08      	pop	{r3, pc}
     454:	20000000 	.word	0x20000000

00000458 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     45c:	4681      	mov	r9, r0
     45e:	468a      	mov	sl, r1
     460:	4615      	mov	r5, r2
     462:	469b      	mov	fp, r3
	if (sizeof(long) == 8) {
		pos *= 10000000000;
	}

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
     464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     466:	2b00      	cmp	r3, #0
     468:	dd05      	ble.n	476 <_printk_dec_ulong+0x1e>
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
			found_largest_digit = 1;
     46a:	f04f 0801 	mov.w	r8, #1
     46e:	260a      	movs	r6, #10
     470:	2700      	movs	r7, #0
     472:	4c21      	ldr	r4, [pc, #132]	; (4f8 <_printk_dec_ulong+0xa0>)
     474:	e013      	b.n	49e <_printk_dec_ulong+0x46>
		min_width = 1;
     476:	2301      	movs	r3, #1
     478:	930a      	str	r3, [sp, #40]	; 0x28
     47a:	e7f6      	b.n	46a <_printk_dec_ulong+0x12>
			out((int)(remainder / pos + 48), ctx);
     47c:	fbb5 f0f4 	udiv	r0, r5, r4
     480:	4651      	mov	r1, sl
     482:	3030      	adds	r0, #48	; 0x30
     484:	47c8      	blx	r9
			digits++;
     486:	f108 0801 	add.w	r8, r8, #1
			found_largest_digit = 1;
     48a:	2701      	movs	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     48c:	3e01      	subs	r6, #1
		remainder %= pos;
     48e:	fbb5 f3f4 	udiv	r3, r5, r4
     492:	fb04 5513 	mls	r5, r4, r3, r5
		pos /= 10;
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_printk_dec_ulong+0xa4>)
     498:	fba3 3404 	umull	r3, r4, r3, r4
     49c:	08e4      	lsrs	r4, r4, #3
	while (pos >= 10) {
     49e:	2c09      	cmp	r4, #9
     4a0:	d914      	bls.n	4cc <_printk_dec_ulong+0x74>
		if (found_largest_digit != 0 || remainder >= pos) {
     4a2:	2f00      	cmp	r7, #0
     4a4:	d1ea      	bne.n	47c <_printk_dec_ulong+0x24>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d9e8      	bls.n	47c <_printk_dec_ulong+0x24>
		} else if (remaining <= min_width
     4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     4ac:	429e      	cmp	r6, r3
     4ae:	dced      	bgt.n	48c <_printk_dec_ulong+0x34>
				&& padding < PAD_SPACE_AFTER) {
     4b0:	f1bb 0f02 	cmp.w	fp, #2
     4b4:	d8ea      	bhi.n	48c <_printk_dec_ulong+0x34>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     4b6:	f1bb 0f01 	cmp.w	fp, #1
     4ba:	d005      	beq.n	4c8 <_printk_dec_ulong+0x70>
     4bc:	2020      	movs	r0, #32
     4be:	4651      	mov	r1, sl
     4c0:	47c8      	blx	r9
			digits++;
     4c2:	f108 0801 	add.w	r8, r8, #1
     4c6:	e7e1      	b.n	48c <_printk_dec_ulong+0x34>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     4c8:	2030      	movs	r0, #48	; 0x30
     4ca:	e7f8      	b.n	4be <_printk_dec_ulong+0x66>
	}
	out((int)(remainder + 48), ctx);
     4cc:	4651      	mov	r1, sl
     4ce:	f105 0030 	add.w	r0, r5, #48	; 0x30
     4d2:	47c8      	blx	r9

	if (padding == PAD_SPACE_AFTER) {
     4d4:	f1bb 0f03 	cmp.w	fp, #3
     4d8:	d001      	beq.n	4de <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
     4da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
     4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     4e0:	eba3 0808 	sub.w	r8, r3, r8
		while (remaining-- > 0) {
     4e4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
     4e8:	f1b8 0f00 	cmp.w	r8, #0
     4ec:	ddf5      	ble.n	4da <_printk_dec_ulong+0x82>
			out(' ', ctx);
     4ee:	4651      	mov	r1, sl
     4f0:	2020      	movs	r0, #32
     4f2:	47c8      	blx	r9
		while (remaining-- > 0) {
     4f4:	46a0      	mov	r8, r4
     4f6:	e7f5      	b.n	4e4 <_printk_dec_ulong+0x8c>
     4f8:	3b9aca00 	.word	0x3b9aca00
     4fc:	cccccccd 	.word	0xcccccccd

00000500 <__printk_hook_install>:
	_char_out = fn;
     500:	4b01      	ldr	r3, [pc, #4]	; (508 <__printk_hook_install+0x8>)
     502:	6018      	str	r0, [r3, #0]
}
     504:	4770      	bx	lr
     506:	bf00      	nop
     508:	20000000 	.word	0x20000000

0000050c <vprintk>:
{
     50c:	b500      	push	{lr}
     50e:	b083      	sub	sp, #12
     510:	4602      	mov	r2, r0
     512:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     514:	2100      	movs	r1, #0
     516:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     518:	a901      	add	r1, sp, #4
     51a:	4803      	ldr	r0, [pc, #12]	; (528 <vprintk+0x1c>)
     51c:	f002 fa76 	bl	2a0c <z_vprintk>
}
     520:	b003      	add	sp, #12
     522:	f85d fb04 	ldr.w	pc, [sp], #4
     526:	bf00      	nop
     528:	00000445 	.word	0x00000445

0000052c <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
     52c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
     52e:	4c04      	ldr	r4, [pc, #16]	; (540 <rtt_console_init+0x14>)
     530:	4620      	mov	r0, r4
     532:	f7ff ffe5 	bl	500 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
     536:	4620      	mov	r0, r4
     538:	f000 fcc0 	bl	ebc <__stdout_hook_install>

	return 0;
}
     53c:	2000      	movs	r0, #0
     53e:	bd10      	pop	{r4, pc}
     540:	00000545 	.word	0x00000545

00000544 <rtt_console_out>:
{
     544:	b5f0      	push	{r4, r5, r6, r7, lr}
     546:	b083      	sub	sp, #12
     548:	4607      	mov	r7, r0
	char c = (char)character;
     54a:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
     54e:	2602      	movs	r6, #2
     550:	e006      	b.n	560 <rtt_console_out+0x1c>
			host_present = true;
     552:	4b13      	ldr	r3, [pc, #76]	; (5a0 <rtt_console_out+0x5c>)
     554:	2201      	movs	r2, #1
     556:	701a      	strb	r2, [r3, #0]
     558:	e01e      	b.n	598 <rtt_console_out+0x54>
				wait();
     55a:	f002 fcd1 	bl	2f00 <wait>
				max_cnt--;
     55e:	3e01      	subs	r6, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
     560:	4d10      	ldr	r5, [pc, #64]	; (5a4 <rtt_console_out+0x60>)
     562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     56a:	4628      	mov	r0, r5
     56c:	f001 fb7c 	bl	1c68 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
     570:	2201      	movs	r2, #1
     572:	f10d 0107 	add.w	r1, sp, #7
     576:	2000      	movs	r0, #0
     578:	f000 f9a2 	bl	8c0 <SEGGER_RTT_WriteNoLock>
     57c:	4604      	mov	r4, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     57e:	4628      	mov	r0, r5
     580:	f001 fbfc 	bl	1d7c <z_impl_k_mutex_unlock>
		if (cnt) {
     584:	2c00      	cmp	r4, #0
     586:	d1e4      	bne.n	552 <rtt_console_out+0xe>
		} else if (host_present) {
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <rtt_console_out+0x5c>)
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	b123      	cbz	r3, 598 <rtt_console_out+0x54>
			if (max_cnt) {
     58e:	2e00      	cmp	r6, #0
     590:	d1e3      	bne.n	55a <rtt_console_out+0x16>
				host_present = false;
     592:	4b03      	ldr	r3, [pc, #12]	; (5a0 <rtt_console_out+0x5c>)
     594:	2200      	movs	r2, #0
     596:	701a      	strb	r2, [r3, #0]
}
     598:	4638      	mov	r0, r7
     59a:	b003      	add	sp, #12
     59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     59e:	bf00      	nop
     5a0:	200006b0 	.word	0x200006b0
     5a4:	20000070 	.word	0x20000070

000005a8 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     5a8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
     5aa:	2101      	movs	r1, #1
     5ac:	f44f 7080 	mov.w	r0, #256	; 0x100
     5b0:	f002 fcb0 	bl	2f14 <clock_event_check_and_clean>
     5b4:	b128      	cbz	r0, 5c2 <nrf_power_clock_isr+0x1a>
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     5b6:	2100      	movs	r1, #0
     5b8:	480a      	ldr	r0, [pc, #40]	; (5e4 <nrf_power_clock_isr+0x3c>)
     5ba:	f002 fcd1 	bl	2f60 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     5be:	7a43      	ldrb	r3, [r0, #9]
     5c0:	b133      	cbz	r3, 5d0 <nrf_power_clock_isr+0x28>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
		}
	}

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_LFCLKSTARTED,
     5c2:	2102      	movs	r1, #2
     5c4:	f44f 7082 	mov.w	r0, #260	; 0x104
     5c8:	f002 fca4 	bl	2f14 <clock_event_check_and_clean>
     5cc:	b928      	cbnz	r0, 5da <nrf_power_clock_isr+0x32>
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     5ce:	bd08      	pop	{r3, pc}
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     5d0:	2100      	movs	r1, #0
     5d2:	4804      	ldr	r0, [pc, #16]	; (5e4 <nrf_power_clock_isr+0x3c>)
     5d4:	f002 fd49 	bl	306a <clkstarted_handle>
     5d8:	e7f3      	b.n	5c2 <nrf_power_clock_isr+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     5da:	2101      	movs	r1, #1
     5dc:	4801      	ldr	r0, [pc, #4]	; (5e4 <nrf_power_clock_isr+0x3c>)
     5de:	f002 fd44 	bl	306a <clkstarted_handle>
}
     5e2:	e7f4      	b.n	5ce <nrf_power_clock_isr+0x26>
     5e4:	2000001c 	.word	0x2000001c

000005e8 <clock_async_start>:
{
     5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5ec:	4680      	mov	r8, r0
     5ee:	460f      	mov	r7, r1
     5f0:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
     5f2:	b2cc      	uxtb	r4, r1
	config = get_sub_config(dev, type);
     5f4:	4621      	mov	r1, r4
     5f6:	f002 fcb9 	bl	2f6c <get_sub_config>
     5fa:	4681      	mov	r9, r0
	clk_data = get_sub_data(dev, type);
     5fc:	4621      	mov	r1, r4
     5fe:	4640      	mov	r0, r8
     600:	f002 fcae 	bl	2f60 <get_sub_data>
     604:	4606      	mov	r6, r0
	if ((data != NULL)
     606:	b125      	cbz	r5, 612 <clock_async_start+0x2a>
	    && is_in_list(&clk_data->list, &data->node)) {
     608:	4629      	mov	r1, r5
     60a:	f002 fced 	bl	2fe8 <is_in_list>
     60e:	2800      	cmp	r0, #0
     610:	d141      	bne.n	696 <clock_async_start+0xae>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     612:	f04f 0220 	mov.w	r2, #32
     616:	f3ef 8311 	mrs	r3, BASEPRI
     61a:	f382 8811 	msr	BASEPRI, r2
     61e:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
     622:	7a34      	ldrb	r4, [r6, #8]
     624:	3401      	adds	r4, #1
     626:	b2e4      	uxtb	r4, r4
     628:	7234      	strb	r4, [r6, #8]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     62a:	f383 8811 	msr	BASEPRI, r3
     62e:	f3bf 8f6f 	isb	sy
	if (data) {
     632:	b185      	cbz	r5, 656 <clock_async_start+0x6e>
		clock_irqs_disable();
     634:	f002 fc88 	bl	2f48 <clock_irqs_disable>
		already_started = clk_data->started;
     638:	f896 a009 	ldrb.w	sl, [r6, #9]
		if (!already_started) {
     63c:	f1ba 0f00 	cmp.w	sl, #0
     640:	d00e      	beq.n	660 <clock_async_start+0x78>
		clock_irqs_enable();
     642:	f002 fc87 	bl	2f54 <clock_irqs_enable>
		if (already_started) {
     646:	f1ba 0f00 	cmp.w	sl, #0
     64a:	d004      	beq.n	656 <clock_async_start+0x6e>
			data->cb(dev, subsys, data->user_data);
     64c:	686b      	ldr	r3, [r5, #4]
     64e:	68aa      	ldr	r2, [r5, #8]
     650:	4639      	mov	r1, r7
     652:	4640      	mov	r0, r8
     654:	4798      	blx	r3
	if (ref == 1) {
     656:	2c01      	cmp	r4, #1
     658:	d007      	beq.n	66a <clock_async_start+0x82>
	return 0;
     65a:	2000      	movs	r0, #0
}
     65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			list_append(&clk_data->list, &data->node);
     660:	4629      	mov	r1, r5
     662:	4630      	mov	r0, r6
     664:	f002 fccd 	bl	3002 <list_append>
     668:	e7eb      	b.n	642 <clock_async_start+0x5a>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
     66a:	2f01      	cmp	r7, #1
     66c:	d007      	beq.n	67e <clock_async_start+0x96>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
     66e:	f899 3002 	ldrb.w	r3, [r9, #2]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     672:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     676:	2201      	movs	r2, #1
     678:	601a      	str	r2, [r3, #0]
	return 0;
     67a:	2000      	movs	r0, #0
}
     67c:	e7ee      	b.n	65c <clock_async_start+0x74>
	if (!once) {
     67e:	4b07      	ldr	r3, [pc, #28]	; (69c <clock_async_start+0xb4>)
     680:	781b      	ldrb	r3, [r3, #0]
     682:	2b00      	cmp	r3, #0
     684:	d1f3      	bne.n	66e <clock_async_start+0x86>
	z_impl_k_busy_wait(usec_to_wait);
     686:	f44f 70a5 	mov.w	r0, #330	; 0x14a
     68a:	f003 f9d0 	bl	3a2e <z_impl_k_busy_wait>
		once = true;
     68e:	4b03      	ldr	r3, [pc, #12]	; (69c <clock_async_start+0xb4>)
     690:	2201      	movs	r2, #1
     692:	701a      	strb	r2, [r3, #0]
     694:	e7eb      	b.n	66e <clock_async_start+0x86>
		return -EBUSY;
     696:	f06f 000f 	mvn.w	r0, #15
     69a:	e7df      	b.n	65c <clock_async_start+0x74>
     69c:	200006b1 	.word	0x200006b1

000006a0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(u32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     6a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <set_comparator+0xc>)
     6a6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
     6aa:	4770      	bx	lr
     6ac:	40011000 	.word	0x40011000

000006b0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
     6b0:	4b01      	ldr	r3, [pc, #4]	; (6b8 <get_comparator+0x8>)
     6b2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540

static u32_t get_comparator(void)
{
	return nrf_rtc_cc_get(RTC, 0);
}
     6b6:	4770      	bx	lr
     6b8:	40011000 	.word	0x40011000

000006bc <event_clear>:

static void event_clear(void)
{
     6bc:	b082      	sub	sp, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <event_clear+0x14>)
     6c0:	2200      	movs	r2, #0
     6c2:	601a      	str	r2, [r3, #0]
#if __CORTEX_M == 0x04
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	9301      	str	r3, [sp, #4]
    (void)dummy;
     6c8:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
}
     6ca:	b002      	add	sp, #8
     6cc:	4770      	bx	lr
     6ce:	bf00      	nop
     6d0:	40011140 	.word	0x40011140

000006d4 <event_enable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     6d4:	4b02      	ldr	r3, [pc, #8]	; (6e0 <event_enable+0xc>)
     6d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     6da:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

static void event_enable(void)
{
	nrf_rtc_event_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
     6de:	4770      	bx	lr
     6e0:	40011000 	.word	0x40011000

000006e4 <int_disable>:
    p_reg->INTENCLR = mask;
     6e4:	4b02      	ldr	r3, [pc, #8]	; (6f0 <int_disable+0xc>)
     6e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     6ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

static void int_disable(void)
{
	nrf_rtc_int_disable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
     6ee:	4770      	bx	lr
     6f0:	40011000 	.word	0x40011000

000006f4 <int_enable>:
    p_reg->INTENSET = mask;
     6f4:	4b02      	ldr	r3, [pc, #8]	; (700 <int_enable+0xc>)
     6f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     6fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

static void int_enable(void)
{
	nrf_rtc_int_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
     6fe:	4770      	bx	lr
     700:	40011000 	.word	0x40011000

00000704 <counter>:
     return p_reg->COUNTER;
     704:	4b01      	ldr	r3, [pc, #4]	; (70c <counter+0x8>)
     706:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static u32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
     70a:	4770      	bx	lr
     70c:	40011000 	.word	0x40011000

00000710 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
     710:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);
	event_clear();
     712:	f7ff ffd3 	bl	6bc <event_clear>

	u32_t t = get_comparator();
     716:	f7ff ffcb 	bl	6b0 <get_comparator>
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     71a:	4d05      	ldr	r5, [pc, #20]	; (730 <rtc1_nrf_isr+0x20>)
     71c:	682c      	ldr	r4, [r5, #0]
     71e:	4621      	mov	r1, r4
     720:	f002 fcde 	bl	30e0 <counter_sub>

	last_count += dticks * CYC_PER_TICK;
     724:	4404      	add	r4, r0
     726:	602c      	str	r4, [r5, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     728:	f002 f878 	bl	281c <z_clock_announce>
}
     72c:	bd38      	pop	{r3, r4, r5, pc}
     72e:	bf00      	nop
     730:	200000a8 	.word	0x200000a8

00000734 <prevent_false_prev_evt>:
{
     734:	b538      	push	{r3, r4, r5, lr}
	u32_t now = counter();
     736:	f7ff ffe5 	bl	704 <counter>
     73a:	4604      	mov	r4, r0
	prev_val = get_comparator();
     73c:	f7ff ffb8 	bl	6b0 <get_comparator>
     740:	4605      	mov	r5, r0
	event_clear();
     742:	f7ff ffbb 	bl	6bc <event_clear>
	set_comparator(now);
     746:	4620      	mov	r0, r4
     748:	f7ff ffaa 	bl	6a0 <set_comparator>
	event_enable();
     74c:	f7ff ffc2 	bl	6d4 <event_enable>
	if (counter_sub(prev_val, now) == 1) {
     750:	4621      	mov	r1, r4
     752:	4628      	mov	r0, r5
     754:	f002 fcc4 	bl	30e0 <counter_sub>
     758:	2801      	cmp	r0, #1
     75a:	d005      	beq.n	768 <prevent_false_prev_evt+0x34>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <prevent_false_prev_evt+0x40>)
     75e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     762:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
     766:	bd38      	pop	{r3, r4, r5, pc}
     768:	200f      	movs	r0, #15
     76a:	f003 f960 	bl	3a2e <z_impl_k_busy_wait>
		event_clear();
     76e:	f7ff ffa5 	bl	6bc <event_clear>
     772:	e7f3      	b.n	75c <prevent_false_prev_evt+0x28>
     774:	e000e100 	.word	0xe000e100

00000778 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
     778:	b538      	push	{r3, r4, r5, lr}
     77a:	4813      	ldr	r0, [pc, #76]	; (7c8 <z_clock_driver_init+0x50>)
     77c:	f001 f946 	bl	1a0c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
     780:	b1f0      	cbz	r0, 7c0 <z_clock_driver_init+0x48>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
     782:	6882      	ldr	r2, [r0, #8]
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     784:	6812      	ldr	r2, [r2, #0]
     786:	2101      	movs	r1, #1
     788:	4790      	blx	r2
    p_reg->PRESCALER = val;
     78a:	4d10      	ldr	r5, [pc, #64]	; (7cc <z_clock_driver_init+0x54>)
     78c:	2400      	movs	r4, #0
     78e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
     792:	f7ff ff93 	bl	6bc <event_clear>
     796:	4b0e      	ldr	r3, [pc, #56]	; (7d0 <z_clock_driver_init+0x58>)
     798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     79c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();
     7a0:	f7ff ffa8 	bl	6f4 <int_enable>

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     7a4:	4622      	mov	r2, r4
     7a6:	2101      	movs	r1, #1
     7a8:	2011      	movs	r0, #17
     7aa:	f000 f91d 	bl	9e8 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     7ae:	2011      	movs	r0, #17
     7b0:	f000 f90a 	bl	9c8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     7b4:	2301      	movs	r3, #1
     7b6:	4a07      	ldr	r2, [pc, #28]	; (7d4 <z_clock_driver_init+0x5c>)
     7b8:	6013      	str	r3, [r2, #0]
     7ba:	602b      	str	r3, [r5, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     7bc:	4620      	mov	r0, r4
}
     7be:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     7c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7c4:	e7fb      	b.n	7be <z_clock_driver_init+0x46>
     7c6:	bf00      	nop
     7c8:	00003ce0 	.word	0x00003ce0
     7cc:	40011000 	.word	0x40011000
     7d0:	e000e100 	.word	0xe000e100
     7d4:	40011008 	.word	0x40011008

000007d8 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     7d8:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     7da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     7de:	d01e      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     7e0:	1e44      	subs	r4, r0, #1
     7e2:	4b11      	ldr	r3, [pc, #68]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7e4:	429c      	cmp	r4, r3
     7e6:	dc01      	bgt.n	7ec <z_clock_set_timeout+0x14>
     7e8:	2c00      	cmp	r4, #0
     7ea:	dd1b      	ble.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
     7ec:	4b0e      	ldr	r3, [pc, #56]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7ee:	429c      	cmp	r4, r3
     7f0:	dd00      	ble.n	7f4 <z_clock_set_timeout+0x1c>
     7f2:	4c0e      	ldr	r4, [pc, #56]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)

	u32_t unannounced = counter_sub(counter(), last_count);
     7f4:	f7ff ff86 	bl	704 <counter>
     7f8:	4b0d      	ldr	r3, [pc, #52]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     7fa:	681d      	ldr	r5, [r3, #0]
     7fc:	4629      	mov	r1, r5
     7fe:	f002 fc6f 	bl	30e0 <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     802:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     806:	d300      	bcc.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		ticks = 0;
     808:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     80a:	4420      	add	r0, r4
     80c:	3001      	adds	r0, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
     80e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     812:	d300      	bcc.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		cyc = MAX_CYCLES;
     814:	4805      	ldr	r0, [pc, #20]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
	}

	cyc += last_count;
	set_protected_absolute_ticks(cyc);
     816:	4428      	add	r0, r5
     818:	f002 fc98 	bl	314c <set_protected_absolute_ticks>
}
     81c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     81e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
     822:	e7dd      	b.n	7e0 <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     824:	2400      	movs	r4, #0
     826:	e7e5      	b.n	7f4 <z_clock_set_timeout+0x1c>
     828:	007ffffe 	.word	0x007ffffe
     82c:	007fffff 	.word	0x007fffff
     830:	200000a8 	.word	0x200000a8

00000834 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
     834:	b510      	push	{r4, lr}
	__asm__ volatile(
     836:	f04f 0320 	mov.w	r3, #32
     83a:	f3ef 8411 	mrs	r4, BASEPRI
     83e:	f383 8811 	msr	BASEPRI, r3
     842:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     846:	f7ff ff5d 	bl	704 <counter>
     84a:	4b04      	ldr	r3, [pc, #16]	; (85c <z_clock_elapsed+0x28>)
     84c:	6819      	ldr	r1, [r3, #0]
     84e:	f002 fc47 	bl	30e0 <counter_sub>
	__asm__ volatile(
     852:	f384 8811 	msr	BASEPRI, r4
     856:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     85a:	bd10      	pop	{r4, pc}
     85c:	200000a8 	.word	0x200000a8

00000860 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
     860:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     862:	4c11      	ldr	r4, [pc, #68]	; (8a8 <_DoInit+0x48>)
     864:	2303      	movs	r3, #3
     866:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     868:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     86a:	4a10      	ldr	r2, [pc, #64]	; (8ac <_DoInit+0x4c>)
     86c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     86e:	4b10      	ldr	r3, [pc, #64]	; (8b0 <_DoInit+0x50>)
     870:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     872:	f44f 6380 	mov.w	r3, #1024	; 0x400
     876:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
     878:	2300      	movs	r3, #0
     87a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     87c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     87e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     880:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     882:	4a0c      	ldr	r2, [pc, #48]	; (8b4 <_DoInit+0x54>)
     884:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     886:	2210      	movs	r2, #16
     888:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     88a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     88c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     88e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
     890:	4909      	ldr	r1, [pc, #36]	; (8b8 <_DoInit+0x58>)
     892:	1de0      	adds	r0, r4, #7
     894:	f002 fd64 	bl	3360 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
     898:	4908      	ldr	r1, [pc, #32]	; (8bc <_DoInit+0x5c>)
     89a:	4620      	mov	r0, r4
     89c:	f002 fd60 	bl	3360 <strcpy>
  p->acID[6] = ' ';
     8a0:	2320      	movs	r3, #32
     8a2:	71a3      	strb	r3, [r4, #6]
}
     8a4:	bd10      	pop	{r4, pc}
     8a6:	bf00      	nop
     8a8:	200000ac 	.word	0x200000ac
     8ac:	00003d10 	.word	0x00003d10
     8b0:	20000164 	.word	0x20000164
     8b4:	20000154 	.word	0x20000154
     8b8:	00003d1c 	.word	0x00003d1c
     8bc:	00003d20 	.word	0x00003d20

000008c0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8c2:	460f      	mov	r7, r1
     8c4:	4616      	mov	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     8c6:	4b18      	ldr	r3, [pc, #96]	; (928 <SEGGER_RTT_WriteNoLock+0x68>)
     8c8:	1c45      	adds	r5, r0, #1
     8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
     8ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     8d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     8d6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     8da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     8dc:	2c01      	cmp	r4, #1
     8de:	d011      	beq.n	904 <SEGGER_RTT_WriteNoLock+0x44>
     8e0:	2c02      	cmp	r4, #2
     8e2:	d01c      	beq.n	91e <SEGGER_RTT_WriteNoLock+0x5e>
     8e4:	b114      	cbz	r4, 8ec <SEGGER_RTT_WriteNoLock+0x2c>
     8e6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
     8e8:	4620      	mov	r0, r4
     8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
     8ec:	4628      	mov	r0, r5
     8ee:	f002 fc39 	bl	3164 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
     8f2:	4286      	cmp	r6, r0
     8f4:	d8f8      	bhi.n	8e8 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
     8f6:	4632      	mov	r2, r6
     8f8:	4639      	mov	r1, r7
     8fa:	4628      	mov	r0, r5
     8fc:	f002 fc3e 	bl	317c <_WriteNoCheck>
      Status = NumBytes;
     900:	4634      	mov	r4, r6
     902:	e7f1      	b.n	8e8 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
     904:	4628      	mov	r0, r5
     906:	f002 fc2d 	bl	3164 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
     90a:	4634      	mov	r4, r6
     90c:	4286      	cmp	r6, r0
     90e:	bf28      	it	cs
     910:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
     912:	4622      	mov	r2, r4
     914:	4639      	mov	r1, r7
     916:	4628      	mov	r0, r5
     918:	f002 fc30 	bl	317c <_WriteNoCheck>
    break;
     91c:	e7e4      	b.n	8e8 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
     91e:	4628      	mov	r0, r5
     920:	f002 fc4e 	bl	31c0 <_WriteBlocking>
     924:	4604      	mov	r4, r0
    break;
     926:	e7df      	b.n	8e8 <SEGGER_RTT_WriteNoLock+0x28>
     928:	200000ac 	.word	0x200000ac

0000092c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     92c:	4a09      	ldr	r2, [pc, #36]	; (954 <arch_swap+0x28>)
     92e:	6893      	ldr	r3, [r2, #8]
     930:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
     932:	4909      	ldr	r1, [pc, #36]	; (958 <arch_swap+0x2c>)
     934:	6809      	ldr	r1, [r1, #0]
     936:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     938:	4908      	ldr	r1, [pc, #32]	; (95c <arch_swap+0x30>)
     93a:	684b      	ldr	r3, [r1, #4]
     93c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     940:	604b      	str	r3, [r1, #4]
     942:	2300      	movs	r3, #0
     944:	f383 8811 	msr	BASEPRI, r3
     948:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     94c:	6893      	ldr	r3, [r2, #8]
}
     94e:	6f18      	ldr	r0, [r3, #112]	; 0x70
     950:	4770      	bx	lr
     952:	bf00      	nop
     954:	20000670 	.word	0x20000670
     958:	00003dc4 	.word	0x00003dc4
     95c:	e000ed00 	.word	0xe000ed00

00000960 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     960:	490f      	ldr	r1, [pc, #60]	; (9a0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
     962:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     964:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
     968:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     96a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     96e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     972:	2020      	movs	r0, #32
    msr BASEPRI, r0
     974:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     978:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     97c:	4f09      	ldr	r7, [pc, #36]	; (9a4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     97e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     982:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     984:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     986:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     988:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
     98a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     98c:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     98e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     992:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
     996:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     99a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     99e:	4770      	bx	lr
    ldr r1, =_kernel
     9a0:	20000670 	.word	0x20000670
    ldr v4, =_SCS_ICSR
     9a4:	e000ed04 	.word	0xe000ed04

000009a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     9a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     9ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     9ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     9b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     9b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     9b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     9bc:	2902      	cmp	r1, #2
    beq _oops
     9be:	d0ff      	beq.n	9c0 <_oops>

000009c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     9c0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     9c2:	f002 fc3f 	bl	3244 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     9c6:	bd01      	pop	{r0, pc}

000009c8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     9c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     9ca:	2b00      	cmp	r3, #0
     9cc:	db08      	blt.n	9e0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9ce:	f000 001f 	and.w	r0, r0, #31
     9d2:	095b      	lsrs	r3, r3, #5
     9d4:	2201      	movs	r2, #1
     9d6:	fa02 f000 	lsl.w	r0, r2, r0
     9da:	4a02      	ldr	r2, [pc, #8]	; (9e4 <arch_irq_enable+0x1c>)
     9dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     9e0:	4770      	bx	lr
     9e2:	bf00      	nop
     9e4:	e000e100 	.word	0xe000e100

000009e8 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
     9e8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     9ea:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     9ec:	2b00      	cmp	r3, #0
     9ee:	db08      	blt.n	a02 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     9f0:	0149      	lsls	r1, r1, #5
     9f2:	b2c9      	uxtb	r1, r1
     9f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     9f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     9fc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
     a00:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a02:	f000 000f 	and.w	r0, r0, #15
     a06:	0149      	lsls	r1, r1, #5
     a08:	b2c9      	uxtb	r1, r1
     a0a:	4b01      	ldr	r3, [pc, #4]	; (a10 <z_arm_irq_priority_set+0x28>)
     a0c:	5419      	strb	r1, [r3, r0]
}
     a0e:	4770      	bx	lr
     a10:	e000ed14 	.word	0xe000ed14

00000a14 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     a14:	b410      	push	{r4}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
     a16:	188c      	adds	r4, r1, r2
#endif
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
     a18:	6601      	str	r1, [r0, #96]	; 0x60
	thread->stack_info.size = stack_size;
     a1a:	6642      	str	r2, [r0, #100]	; 0x64
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
     a1c:	f1a4 0220 	sub.w	r2, r4, #32
     a20:	f022 0207 	bic.w	r2, r2, #7
		pInitCtx->basic.pc = (u32_t)arch_user_mode_enter;
	} else {
		pInitCtx->basic.pc = (u32_t)z_thread_entry;
	}
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
     a24:	4909      	ldr	r1, [pc, #36]	; (a4c <arch_new_thread+0x38>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     a26:	f021 0101 	bic.w	r1, r1, #1
     a2a:	6191      	str	r1, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
     a2c:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
     a2e:	9b01      	ldr	r3, [sp, #4]
     a30:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     a32:	9b02      	ldr	r3, [sp, #8]
     a34:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     a36:	9b03      	ldr	r3, [sp, #12]
     a38:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
     a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     a3e:	61d3      	str	r3, [r2, #28]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	pInitCtx->basic.xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     a40:	6502      	str	r2, [r0, #80]	; 0x50

	thread->arch.basepri = 0;
     a42:	2300      	movs	r3, #0
     a44:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     a46:	bc10      	pop	{r4}
     a48:	4770      	bx	lr
     a4a:	bf00      	nop
     a4c:	00002d67 	.word	0x00002d67

00000a50 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a52:	4606      	mov	r6, r0
     a54:	460c      	mov	r4, r1
     a56:	4617      	mov	r7, r2
     a58:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     a5a:	f000 f9c3 	bl	de4 <z_arm_configure_static_mpu_regions>
#endif

	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
     a5e:	443c      	add	r4, r7
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
     a60:	f024 0407 	bic.w	r4, r4, #7

	_current = main_thread;
     a64:	4b07      	ldr	r3, [pc, #28]	; (a84 <arch_switch_to_main_thread+0x34>)
     a66:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     a68:	4628      	mov	r0, r5
     a6a:	f384 8809 	msr	PSP, r4
     a6e:	2100      	movs	r1, #0
     a70:	b663      	cpsie	if
     a72:	f381 8811 	msr	BASEPRI, r1
     a76:	f3bf 8f6f 	isb	sy
     a7a:	2200      	movs	r2, #0
     a7c:	2300      	movs	r3, #0
     a7e:	f002 f972 	bl	2d66 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     a82:	bf00      	nop
     a84:	20000670 	.word	0x20000670

00000a88 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     a88:	4901      	ldr	r1, [pc, #4]	; (a90 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     a8a:	2210      	movs	r2, #16
	str	r2, [r1]
     a8c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     a8e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     a90:	e000ed10 	.word	0xe000ed10

00000a94 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
     a94:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
     a96:	4040      	eors	r0, r0
	msr	BASEPRI, r0
     a98:	f380 8811 	msr	BASEPRI, r0
	isb
     a9c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
     aa0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
     aa4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     aa6:	b662      	cpsie	i
	isb
     aa8:	f3bf 8f6f 	isb	sy

	bx	lr
     aac:	4770      	bx	lr
     aae:	bf00      	nop

00000ab0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     ab0:	bf30      	wfi
    b z_SysNmiOnReset
     ab2:	f7ff bffd 	b.w	ab0 <z_SysNmiOnReset>
     ab6:	bf00      	nop

00000ab8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     ab8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     aba:	4b0e      	ldr	r3, [pc, #56]	; (af4 <z_arm_prep_c+0x3c>)
     abc:	4a0e      	ldr	r2, [pc, #56]	; (af8 <z_arm_prep_c+0x40>)
     abe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     ac2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ac8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
     acc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     ad0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
     ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
     ad8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
     adc:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     ae0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     ae4:	f001 f83e 	bl	1b64 <z_bss_zero>
	z_data_copy();
     ae8:	f001 f848 	bl	1b7c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     aec:	f000 f93a 	bl	d64 <z_arm_interrupt_init>
	z_cstart();
     af0:	f001 f882 	bl	1bf8 <z_cstart>
     af4:	e000ed00 	.word	0xe000ed00
     af8:	00000000 	.word	0x00000000

00000afc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     afc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
     afe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     b00:	4a0b      	ldr	r2, [pc, #44]	; (b30 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     b02:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     b04:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     b06:	bf1e      	ittt	ne
	movne	r1, #0
     b08:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     b0a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     b0c:	f002 fe4e 	blne	37ac <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     b10:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     b12:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     b16:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     b1a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
     b1e:	4905      	ldr	r1, [pc, #20]	; (b34 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     b20:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     b22:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     b24:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     b26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     b2a:	4903      	ldr	r1, [pc, #12]	; (b38 <_isr_wrapper+0x3c>)
	bx r1
     b2c:	4708      	bx	r1
     b2e:	0000      	.short	0x0000
	ldr r2, =_kernel
     b30:	20000670 	.word	0x20000670
	ldr r1, =_sw_isr_table
     b34:	00003b98 	.word	0x00003b98
	ldr r1, =z_arm_int_exit
     b38:	00000d49 	.word	0x00000d49

00000b3c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     b3c:	f002 fc67 	bl	340e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     b40:	2020      	movs	r0, #32
    msr BASEPRI, r0
     b42:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
     b46:	4808      	ldr	r0, [pc, #32]	; (b68 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     b4c:	1840      	adds	r0, r0, r1
    msr PSP, r0
     b4e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     b52:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     b56:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     b58:	4308      	orrs	r0, r1
    msr CONTROL, r0
     b5a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     b5e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     b62:	f7ff ffa9 	bl	ab8 <z_arm_prep_c>
     b66:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
     b68:	20000bf8 	.word	0x20000bf8

00000b6c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
     b6c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     b70:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     b74:	4672      	mov	r2, lr

	push {r0, lr}
     b76:	b501      	push	{r0, lr}

	bl z_arm_fault
     b78:	f000 f894 	bl	ca4 <z_arm_fault>

	pop {r0, pc}
     b7c:	bd01      	pop	{r0, pc}
     b7e:	bf00      	nop

00000b80 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
     b80:	b510      	push	{r4, lr}
     b82:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     b84:	4b0f      	ldr	r3, [pc, #60]	; (bc4 <mem_manage_fault+0x44>)
     b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b8c:	f013 0f02 	tst.w	r3, #2
     b90:	d00b      	beq.n	baa <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     b92:	4b0c      	ldr	r3, [pc, #48]	; (bc4 <mem_manage_fault+0x44>)
     b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b98:	f013 0f80 	tst.w	r3, #128	; 0x80
     b9c:	d005      	beq.n	baa <mem_manage_fault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     b9e:	b121      	cbz	r1, baa <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     ba0:	4a08      	ldr	r2, [pc, #32]	; (bc4 <mem_manage_fault+0x44>)
     ba2:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     ba8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     baa:	4b06      	ldr	r3, [pc, #24]	; (bc4 <mem_manage_fault+0x44>)
     bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bb4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     bb8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     bba:	f002 fb4f 	bl	325c <memory_fault_recoverable>
     bbe:	7020      	strb	r0, [r4, #0]

	return reason;
}
     bc0:	2000      	movs	r0, #0
     bc2:	bd10      	pop	{r4, pc}
     bc4:	e000ed00 	.word	0xe000ed00

00000bc8 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
     bc8:	b510      	push	{r4, lr}
     bca:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     bcc:	4b12      	ldr	r3, [pc, #72]	; (c18 <bus_fault+0x50>)
     bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bd4:	f413 7f00 	tst.w	r3, #512	; 0x200
     bd8:	d00b      	beq.n	bf2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     bda:	4b0f      	ldr	r3, [pc, #60]	; (c18 <bus_fault+0x50>)
     bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     be0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     be4:	d005      	beq.n	bf2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     be6:	b121      	cbz	r1, bf2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     be8:	4a0b      	ldr	r2, [pc, #44]	; (c18 <bus_fault+0x50>)
     bea:	6a93      	ldr	r3, [r2, #40]	; 0x28
     bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     bf0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bf2:	4b09      	ldr	r3, [pc, #36]	; (c18 <bus_fault+0x50>)
     bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bf8:	f413 7f80 	tst.w	r3, #256	; 0x100
     bfc:	d101      	bne.n	c02 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <bus_fault+0x50>)
     c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     c02:	4a05      	ldr	r2, [pc, #20]	; (c18 <bus_fault+0x50>)
     c04:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c06:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
     c0a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     c0c:	f002 fb26 	bl	325c <memory_fault_recoverable>
     c10:	7020      	strb	r0, [r4, #0]

	return reason;
}
     c12:	2000      	movs	r0, #0
     c14:	bd10      	pop	{r4, pc}
     c16:	bf00      	nop
     c18:	e000ed00 	.word	0xe000ed00

00000c1c <usage_fault>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     c1c:	4b07      	ldr	r3, [pc, #28]	; (c3c <usage_fault+0x20>)
     c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c2c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     c30:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     c34:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     c36:	2000      	movs	r0, #0
     c38:	4770      	bx	lr
     c3a:	bf00      	nop
     c3c:	e000ed00 	.word	0xe000ed00

00000c40 <hard_fault>:
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
     c40:	2300      	movs	r3, #0
     c42:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     c44:	4b14      	ldr	r3, [pc, #80]	; (c98 <hard_fault+0x58>)
     c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c48:	f012 0202 	ands.w	r2, r2, #2
     c4c:	d121      	bne.n	c92 <hard_fault+0x52>
{
     c4e:	b510      	push	{r4, lr}
     c50:	4604      	mov	r4, r0
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     c52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
     c54:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
     c58:	d010      	beq.n	c7c <hard_fault+0x3c>
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
     c5a:	3328      	adds	r3, #40	; 0x28
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	b943      	cbnz	r3, c72 <hard_fault+0x32>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <hard_fault+0x5c>)
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	b95b      	cbnz	r3, c7e <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
     c66:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <hard_fault+0x60>)
     c68:	881b      	ldrh	r3, [r3, #0]
     c6a:	b29b      	uxth	r3, r3
     c6c:	b96b      	cbnz	r3, c8a <hard_fault+0x4a>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     c6e:	4610      	mov	r0, r2
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
     c70:	e004      	b.n	c7c <hard_fault+0x3c>
			reason = mem_manage_fault(esf, 1, recoverable);
     c72:	460a      	mov	r2, r1
     c74:	2101      	movs	r1, #1
     c76:	4620      	mov	r0, r4
     c78:	f7ff ff82 	bl	b80 <mem_manage_fault>
}
     c7c:	bd10      	pop	{r4, pc}
			reason = bus_fault(esf, 1, recoverable);
     c7e:	460a      	mov	r2, r1
     c80:	2101      	movs	r1, #1
     c82:	4620      	mov	r0, r4
     c84:	f7ff ffa0 	bl	bc8 <bus_fault>
     c88:	e7f8      	b.n	c7c <hard_fault+0x3c>
			reason = usage_fault(esf);
     c8a:	4620      	mov	r0, r4
     c8c:	f7ff ffc6 	bl	c1c <usage_fault>
     c90:	e7f4      	b.n	c7c <hard_fault+0x3c>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     c92:	2000      	movs	r0, #0
}
     c94:	4770      	bx	lr
     c96:	bf00      	nop
     c98:	e000ed00 	.word	0xe000ed00
     c9c:	e000ed29 	.word	0xe000ed29
     ca0:	e000ed2a 	.word	0xe000ed2a

00000ca4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	b08a      	sub	sp, #40	; 0x28
     ca8:	460c      	mov	r4, r1
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     caa:	4b22      	ldr	r3, [pc, #136]	; (d34 <z_arm_fault+0x90>)
     cac:	6859      	ldr	r1, [r3, #4]
     cae:	f3c1 0108 	ubfx	r1, r1, #0, #9
     cb2:	2300      	movs	r3, #0
     cb4:	f383 8811 	msr	BASEPRI, r3
     cb8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     cbc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
     cc0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
     cc4:	d115      	bne.n	cf2 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     cc6:	f002 030c 	and.w	r3, r2, #12
     cca:	2b08      	cmp	r3, #8
     ccc:	d014      	beq.n	cf8 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     cce:	f012 0f08 	tst.w	r2, #8
     cd2:	d00b      	beq.n	cec <z_arm_fault+0x48>
	*nested_exc = false;
     cd4:	2600      	movs	r6, #0
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
     cd6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
     cda:	4620      	mov	r0, r4
     cdc:	f002 fac0 	bl	3260 <fault_handle>
     ce0:	4605      	mov	r5, r0
	if (recoverable) {
     ce2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     ce6:	b153      	cbz	r3, cfe <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
     ce8:	b00a      	add	sp, #40	; 0x28
     cea:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
     cec:	4604      	mov	r4, r0
			*nested_exc = true;
     cee:	2601      	movs	r6, #1
     cf0:	e7f1      	b.n	cd6 <z_arm_fault+0x32>
	*nested_exc = false;
     cf2:	2600      	movs	r6, #0
		return NULL;
     cf4:	4634      	mov	r4, r6
     cf6:	e7ee      	b.n	cd6 <z_arm_fault+0x32>
	*nested_exc = false;
     cf8:	2600      	movs	r6, #0
		return NULL;
     cfa:	4634      	mov	r4, r6
     cfc:	e7eb      	b.n	cd6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     cfe:	2220      	movs	r2, #32
     d00:	4621      	mov	r1, r4
     d02:	a801      	add	r0, sp, #4
     d04:	f002 fb3f 	bl	3386 <memcpy>
	if (nested_exc) {
     d08:	b14e      	cbz	r6, d1e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     d0a:	9b08      	ldr	r3, [sp, #32]
     d0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
     d10:	b95a      	cbnz	r2, d2a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     d12:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     d16:	ea6f 2343 	mvn.w	r3, r3, lsl #9
     d1a:	9308      	str	r3, [sp, #32]
     d1c:	e005      	b.n	d2a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     d1e:	9b08      	ldr	r3, [sp, #32]
     d20:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     d24:	f023 0301 	bic.w	r3, r3, #1
     d28:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
     d2a:	a901      	add	r1, sp, #4
     d2c:	4628      	mov	r0, r5
     d2e:	f002 fa85 	bl	323c <z_arm_fatal_error>
     d32:	e7d9      	b.n	ce8 <z_arm_fault+0x44>
     d34:	e000ed00 	.word	0xe000ed00

00000d38 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     d38:	4a02      	ldr	r2, [pc, #8]	; (d44 <z_arm_fault_init+0xc>)
     d3a:	6953      	ldr	r3, [r2, #20]
     d3c:	f043 0310 	orr.w	r3, r3, #16
     d40:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     d42:	4770      	bx	lr
     d44:	e000ed00 	.word	0xe000ed00

00000d48 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
     d4a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
     d4c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
     d4e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
     d50:	d003      	beq.n	d5a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
     d52:	4903      	ldr	r1, [pc, #12]	; (d60 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
     d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
     d58:	600a      	str	r2, [r1, #0]

00000d5a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
     d5a:	4770      	bx	lr
	ldr r3, =_kernel
     d5c:	20000670 	.word	0x20000670
	ldr r1, =_SCS_ICSR
     d60:	e000ed04 	.word	0xe000ed04

00000d64 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
     d64:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     d66:	e006      	b.n	d76 <z_arm_interrupt_init+0x12>
     d68:	f002 010f 	and.w	r1, r2, #15
     d6c:	4b09      	ldr	r3, [pc, #36]	; (d94 <z_arm_interrupt_init+0x30>)
     d6e:	440b      	add	r3, r1
     d70:	2120      	movs	r1, #32
     d72:	7619      	strb	r1, [r3, #24]
     d74:	3201      	adds	r2, #1
     d76:	2a26      	cmp	r2, #38	; 0x26
     d78:	dc0a      	bgt.n	d90 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
     d7a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
     d7c:	2b00      	cmp	r3, #0
     d7e:	dbf3      	blt.n	d68 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     d84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     d88:	2120      	movs	r1, #32
     d8a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
     d8e:	e7f1      	b.n	d74 <z_arm_interrupt_init+0x10>
	}
}
     d90:	4770      	bx	lr
     d92:	bf00      	nop
     d94:	e000ecfc 	.word	0xe000ecfc

00000d98 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     d98:	b538      	push	{r3, r4, r5, lr}
     d9a:	4604      	mov	r4, r0
	__asm__ volatile(
     d9c:	f04f 0320 	mov.w	r3, #32
     da0:	f3ef 8511 	mrs	r5, BASEPRI
     da4:	f383 8811 	msr	BASEPRI, r3
     da8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     dac:	f001 fa2c 	bl	2208 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     db0:	4b0a      	ldr	r3, [pc, #40]	; (ddc <z_impl_k_thread_abort+0x44>)
     db2:	689b      	ldr	r3, [r3, #8]
     db4:	42a3      	cmp	r3, r4
     db6:	d003      	beq.n	dc0 <z_impl_k_thread_abort+0x28>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     db8:	4628      	mov	r0, r5
     dba:	f002 fd3a 	bl	3832 <z_reschedule_irqlock>
}
     dbe:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     dc0:	4b07      	ldr	r3, [pc, #28]	; (de0 <z_impl_k_thread_abort+0x48>)
     dc2:	685b      	ldr	r3, [r3, #4]
     dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
     dc8:	b12b      	cbz	r3, dd6 <z_impl_k_thread_abort+0x3e>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     dca:	4a05      	ldr	r2, [pc, #20]	; (de0 <z_impl_k_thread_abort+0x48>)
     dcc:	6853      	ldr	r3, [r2, #4]
     dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     dd2:	6053      	str	r3, [r2, #4]
     dd4:	e7f0      	b.n	db8 <z_impl_k_thread_abort+0x20>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
     dd6:	4628      	mov	r0, r5
     dd8:	f7ff fda8 	bl	92c <arch_swap>
			CODE_UNREACHABLE;
     ddc:	20000670 	.word	0x20000670
     de0:	e000ed00 	.word	0xe000ed00

00000de4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     de4:	b500      	push	{lr}
     de6:	b085      	sub	sp, #20
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (u32_t)&_ramfunc_ram_start,
     de8:	4b08      	ldr	r3, [pc, #32]	; (e0c <z_arm_configure_static_mpu_regions+0x28>)
		const struct k_mem_partition ramfunc_region =
     dea:	9301      	str	r3, [sp, #4]
		.size = (u32_t)&_ramfunc_ram_size,
     dec:	4b08      	ldr	r3, [pc, #32]	; (e10 <z_arm_configure_static_mpu_regions+0x2c>)
		const struct k_mem_partition ramfunc_region =
     dee:	9302      	str	r3, [sp, #8]
     df0:	4b08      	ldr	r3, [pc, #32]	; (e14 <z_arm_configure_static_mpu_regions+0x30>)
     df2:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     df4:	ab01      	add	r3, sp, #4
     df6:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     df8:	4b07      	ldr	r3, [pc, #28]	; (e18 <z_arm_configure_static_mpu_regions+0x34>)
     dfa:	4a08      	ldr	r2, [pc, #32]	; (e1c <z_arm_configure_static_mpu_regions+0x38>)
     dfc:	2101      	movs	r1, #1
     dfe:	4668      	mov	r0, sp
     e00:	f002 faaa 	bl	3358 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     e04:	b005      	add	sp, #20
     e06:	f85d fb04 	ldr.w	pc, [sp], #4
     e0a:	bf00      	nop
     e0c:	20000000 	.word	0x20000000
     e10:	00000000 	.word	0x00000000
     e14:	060b0000 	.word	0x060b0000
     e18:	20010000 	.word	0x20010000
     e1c:	20000000 	.word	0x20000000

00000e20 <region_init>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
     e20:	4a06      	ldr	r2, [pc, #24]	; (e3c <region_init+0x1c>)
     e22:	6090      	str	r0, [r2, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     e24:	680b      	ldr	r3, [r1, #0]
     e26:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     e2a:	4303      	orrs	r3, r0
     e2c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     e30:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     e32:	688b      	ldr	r3, [r1, #8]
     e34:	f043 0301 	orr.w	r3, r3, #1
     e38:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
}
     e3a:	4770      	bx	lr
     e3c:	e000ed90 	.word	0xe000ed90

00000e40 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
     e40:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
     e42:	4c03      	ldr	r4, [pc, #12]	; (e50 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
     e44:	2301      	movs	r3, #1
     e46:	7822      	ldrb	r2, [r4, #0]
     e48:	f002 fa60 	bl	330c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     e4c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	200006b2 	.word	0x200006b2

00000e54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     e54:	4b03      	ldr	r3, [pc, #12]	; (e64 <arm_core_mpu_enable+0x10>)
     e56:	2205      	movs	r2, #5
     e58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e5e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     e62:	4770      	bx	lr
     e64:	e000ed90 	.word	0xe000ed90

00000e68 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     e6c:	4b01      	ldr	r3, [pc, #4]	; (e74 <arm_core_mpu_disable+0xc>)
     e6e:	2200      	movs	r2, #0
     e70:	605a      	str	r2, [r3, #4]
}
     e72:	4770      	bx	lr
     e74:	e000ed90 	.word	0xe000ed90

00000e78 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
     e78:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     e7a:	4b0e      	ldr	r3, [pc, #56]	; (eb4 <arm_mpu_init+0x3c>)
     e7c:	681d      	ldr	r5, [r3, #0]
     e7e:	2d08      	cmp	r5, #8
     e80:	d815      	bhi.n	eae <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     e82:	f7ff fff1 	bl	e68 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     e86:	2400      	movs	r4, #0
     e88:	42a5      	cmp	r5, r4
     e8a:	d90a      	bls.n	ea2 <arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
     e8c:	4b09      	ldr	r3, [pc, #36]	; (eb4 <arm_mpu_init+0x3c>)
     e8e:	6859      	ldr	r1, [r3, #4]
     e90:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     e94:	0093      	lsls	r3, r2, #2
     e96:	4419      	add	r1, r3
     e98:	4620      	mov	r0, r4
     e9a:	f7ff ffc1 	bl	e20 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     e9e:	3401      	adds	r4, #1
     ea0:	e7f2      	b.n	e88 <arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     ea2:	4b05      	ldr	r3, [pc, #20]	; (eb8 <arm_mpu_init+0x40>)
     ea4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
     ea6:	f7ff ffd5 	bl	e54 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     eaa:	2000      	movs	r0, #0
}
     eac:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     eb2:	e7fb      	b.n	eac <arm_mpu_init+0x34>
     eb4:	00003d38 	.word	0x00003d38
     eb8:	200006b2 	.word	0x200006b2

00000ebc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     ebc:	4b01      	ldr	r3, [pc, #4]	; (ec4 <__stdout_hook_install+0x8>)
     ebe:	6018      	str	r0, [r3, #0]
}
     ec0:	4770      	bx	lr
     ec2:	bf00      	nop
     ec4:	20000004 	.word	0x20000004

00000ec8 <nordicsemi_nrf52_init>:
     ec8:	f04f 0320 	mov.w	r3, #32
     ecc:	f3ef 8211 	mrs	r2, BASEPRI
     ed0:	f383 8811 	msr	BASEPRI, r3
     ed4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     ed8:	2301      	movs	r3, #1
     eda:	4906      	ldr	r1, [pc, #24]	; (ef4 <nordicsemi_nrf52_init+0x2c>)
     edc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
     ee0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     ee4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
     ee8:	f382 8811 	msr	BASEPRI, r2
     eec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     ef0:	2000      	movs	r0, #0
     ef2:	4770      	bx	lr
     ef4:	4001e000 	.word	0x4001e000

00000ef8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     ef8:	b130      	cbz	r0, f08 <arch_busy_wait+0x10>

void arch_busy_wait(u32_t time_us)
{
     efa:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     efc:	0180      	lsls	r0, r0, #6
     efe:	4b03      	ldr	r3, [pc, #12]	; (f0c <arch_busy_wait+0x14>)
     f00:	f043 0301 	orr.w	r3, r3, #1
     f04:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
     f06:	bd08      	pop	{r3, pc}
     f08:	4770      	bx	lr
     f0a:	bf00      	nop
     f0c:	00003cd0 	.word	0x00003cd0

00000f10 <gpiote_channel_alloc>:
	return port->config_info;
}

static int gpiote_channel_alloc(u32_t abs_pin, nrf_gpiote_polarity_t polarity)
{
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
     f10:	2300      	movs	r3, #0
     f12:	2b07      	cmp	r3, #7
     f14:	d842      	bhi.n	f9c <gpiote_channel_alloc+0x8c>
{
     f16:	b4f0      	push	{r4, r5, r6, r7}
     f18:	b082      	sub	sp, #8
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
     f1a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
     f1e:	4c21      	ldr	r4, [pc, #132]	; (fa4 <gpiote_channel_alloc+0x94>)
     f20:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
     f24:	f012 0f03 	tst.w	r2, #3
     f28:	d008      	beq.n	f3c <gpiote_channel_alloc+0x2c>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
     f2a:	3301      	adds	r3, #1
     f2c:	b2db      	uxtb	r3, r3
     f2e:	2b07      	cmp	r3, #7
     f30:	d9f3      	bls.n	f1a <gpiote_channel_alloc+0xa>
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
			return 0;
		}
	}

	return -ENODEV;
     f32:	f06f 0012 	mvn.w	r0, #18
}
     f36:	b002      	add	sp, #8
     f38:	bcf0      	pop	{r4, r5, r6, r7}
     f3a:	4770      	bx	lr
			nrf_gpiote_event_t evt =
     f3c:	f103 0240 	add.w	r2, r3, #64	; 0x40
     f40:	0092      	lsls	r2, r2, #2
     f42:	b294      	uxth	r4, r2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
     f44:	4e17      	ldr	r6, [pc, #92]	; (fa4 <gpiote_channel_alloc+0x94>)
     f46:	f503 75a2 	add.w	r5, r3, #324	; 0x144
     f4a:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
     f4e:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
     f52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
     f56:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     f5a:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
     f5e:	0202      	lsls	r2, r0, #8
     f60:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
     f64:	0409      	lsls	r1, r1, #16
     f66:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     f6a:	430a      	orrs	r2, r1
     f6c:	433a      	orrs	r2, r7
     f6e:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
    return ((uint32_t)p_reg + event);
     f72:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
     f76:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
     f7a:	2000      	movs	r0, #0
     f7c:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
     f7e:	6812      	ldr	r2, [r2, #0]
     f80:	9201      	str	r2, [sp, #4]
    (void)dummy;
     f82:	9a01      	ldr	r2, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
     f84:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
     f88:	f042 0201 	orr.w	r2, r2, #1
     f8c:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
     f90:	2201      	movs	r2, #1
     f92:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
     f96:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
			return 0;
     f9a:	e7cc      	b.n	f36 <gpiote_channel_alloc+0x26>
	return -ENODEV;
     f9c:	f06f 0012 	mvn.w	r0, #18
}
     fa0:	4770      	bx	lr
     fa2:	bf00      	nop
     fa4:	40006000 	.word	0x40006000

00000fa8 <gpiote_channel_free>:

static void gpiote_channel_free(u32_t abs_pin)
{
     fa8:	b410      	push	{r4}
    return p_reg->INTENSET & mask;
     faa:	4b13      	ldr	r3, [pc, #76]	; (ff8 <gpiote_channel_free+0x50>)
     fac:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
     fb0:	b2e4      	uxtb	r4, r4
	u32_t intenset = nrf_gpiote_int_enable_check(NRF_GPIOTE,
						     NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
     fb2:	2300      	movs	r3, #0
     fb4:	e000      	b.n	fb8 <gpiote_channel_free+0x10>
     fb6:	3301      	adds	r3, #1
     fb8:	2b07      	cmp	r3, #7
     fba:	d81b      	bhi.n	ff4 <gpiote_channel_free+0x4c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
     fbc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
     fc0:	490d      	ldr	r1, [pc, #52]	; (ff8 <gpiote_channel_free+0x50>)
     fc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
     fc6:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
     fca:	4290      	cmp	r0, r2
     fcc:	d1f3      	bne.n	fb6 <gpiote_channel_free+0xe>
		    && (intenset & BIT(i))) {
     fce:	fa24 f203 	lsr.w	r2, r4, r3
     fd2:	f012 0f01 	tst.w	r2, #1
     fd6:	d0ee      	beq.n	fb6 <gpiote_channel_free+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
     fd8:	460a      	mov	r2, r1
     fda:	f503 70a2 	add.w	r0, r3, #324	; 0x144
     fde:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     fe2:	f021 0101 	bic.w	r1, r1, #1
     fe6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_event_disable(NRF_GPIOTE, i);
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
     fea:	2101      	movs	r1, #1
     fec:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->INTENCLR = mask;
     ff0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			return;
		}
	}
}
     ff4:	bc10      	pop	{r4}
     ff6:	4770      	bx	lr
     ff8:	40006000 	.word	0x40006000

00000ffc <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
     ffc:	b4f0      	push	{r4, r5, r6, r7}
	return port->config_info;
     ffe:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1000:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1002:	4b34      	ldr	r3, [pc, #208]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    1004:	4013      	ands	r3, r2
    1006:	4c34      	ldr	r4, [pc, #208]	; (10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
    1008:	42a3      	cmp	r3, r4
    100a:	d027      	beq.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    100c:	d812      	bhi.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    100e:	2b06      	cmp	r3, #6
    1010:	d026      	beq.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    1012:	d904      	bls.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
    1014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1018:	d109      	bne.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    101a:	2401      	movs	r4, #1
    101c:	e016      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    101e:	b30b      	cbz	r3, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    1020:	2b02      	cmp	r3, #2
    1022:	d101      	bne.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    1024:	2404      	movs	r4, #4
    1026:	e011      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1028:	f06f 0015 	mvn.w	r0, #21
    102c:	e043      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    102e:	f06f 0015 	mvn.w	r0, #21
    1032:	e040      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    1034:	4c29      	ldr	r4, [pc, #164]	; (10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    1036:	42a3      	cmp	r3, r4
    1038:	d016      	beq.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    103a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    103e:	d101      	bne.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
		drive = NRF_GPIO_PIN_H0H1;
    1040:	2403      	movs	r4, #3
    1042:	e003      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1048:	d141      	bne.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
		drive = NRF_GPIO_PIN_S0H1;
    104a:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    104c:	f012 0f10 	tst.w	r2, #16
    1050:	d10c      	bne.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    1052:	f012 0f20 	tst.w	r2, #32
    1056:	d030      	beq.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
		pull = NRF_GPIO_PIN_PULLDOWN;
    1058:	2501      	movs	r5, #1
    105a:	e008      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
		drive = NRF_GPIO_PIN_H0D1;
    105c:	2407      	movs	r4, #7
    105e:	e7f5      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		drive = NRF_GPIO_PIN_S0D1;
    1060:	2406      	movs	r4, #6
    1062:	e7f3      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1064:	2400      	movs	r4, #0
    1066:	e7f1      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		drive = NRF_GPIO_PIN_D0H1;
    1068:	2405      	movs	r4, #5
    106a:	e7ef      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		pull = NRF_GPIO_PIN_PULLUP;
    106c:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    106e:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1072:	f412 7f80 	tst.w	r2, #256	; 0x100
    1076:	bf0c      	ite	eq
    1078:	2601      	moveq	r6, #1
    107a:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    107c:	f412 7f00 	tst.w	r2, #512	; 0x200
    1080:	d006      	beq.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1082:	f412 6f00 	tst.w	r2, #2048	; 0x800
    1086:	d01a      	beq.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1088:	2201      	movs	r2, #1
    108a:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    108c:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config_info;
    1090:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    1092:	7a12      	ldrb	r2, [r2, #8]
    1094:	f001 011f 	and.w	r1, r1, #31
    1098:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    109c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    10a0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    10a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    10a8:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    10ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    10b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    10b4:	2000      	movs	r0, #0
}
    10b6:	bcf0      	pop	{r4, r5, r6, r7}
    10b8:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    10ba:	2500      	movs	r5, #0
    10bc:	e7d7      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    10be:	f412 6f80 	tst.w	r2, #1024	; 0x400
    10c2:	d0e5      	beq.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    10c4:	2201      	movs	r2, #1
    10c6:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    10c8:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    10cc:	e7e0      	b.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    10ce:	f06f 0015 	mvn.w	r0, #21
    10d2:	e7f0      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    10d4:	00f00006 	.word	0x00f00006
    10d8:	00100006 	.word	0x00100006
    10dc:	00400002 	.word	0x00400002

000010e0 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
    10e4:	2300      	movs	r3, #0
    10e6:	9303      	str	r3, [sp, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    10e8:	4b30      	ldr	r3, [pc, #192]	; (11ac <gpiote_event_handler+0xcc>)
    10ea:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    10ec:	b90c      	cbnz	r4, 10f2 <gpiote_event_handler+0x12>
{
    10ee:	2100      	movs	r1, #0
    10f0:	e00b      	b.n	110a <gpiote_event_handler+0x2a>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    10f2:	482f      	ldr	r0, [pc, #188]	; (11b0 <gpiote_event_handler+0xd0>)
    10f4:	f002 fae9 	bl	36ca <check_level_trigger_pins>
		fired_triggers[0] =
    10f8:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    10fa:	4b2c      	ldr	r3, [pc, #176]	; (11ac <gpiote_event_handler+0xcc>)
    10fc:	2200      	movs	r2, #0
    10fe:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1100:	681b      	ldr	r3, [r3, #0]
    1102:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1104:	9b01      	ldr	r3, [sp, #4]
}
    1106:	e7f2      	b.n	10ee <gpiote_event_handler+0xe>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1108:	3101      	adds	r1, #1
    110a:	2907      	cmp	r1, #7
    110c:	d828      	bhi.n	1160 <gpiote_event_handler+0x80>
		nrf_gpiote_event_t evt =
    110e:	f101 0340 	add.w	r3, r1, #64	; 0x40
    1112:	009b      	lsls	r3, r3, #2
    1114:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1116:	2301      	movs	r3, #1
    1118:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    111a:	4826      	ldr	r0, [pc, #152]	; (11b4 <gpiote_event_handler+0xd4>)
    111c:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    1120:	4203      	tst	r3, r0
    1122:	d0f1      	beq.n	1108 <gpiote_event_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1124:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    1128:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    112c:	681b      	ldr	r3, [r3, #0]
    112e:	2b00      	cmp	r3, #0
    1130:	d0ea      	beq.n	1108 <gpiote_event_handler+0x28>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1132:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    1136:	481f      	ldr	r0, [pc, #124]	; (11b4 <gpiote_event_handler+0xd4>)
    1138:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    113c:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			u32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1140:	2301      	movs	r3, #1
    1142:	fa03 f000 	lsl.w	r0, r3, r0
    1146:	9b03      	ldr	r3, [sp, #12]
    1148:	4303      	orrs	r3, r0
    114a:	9303      	str	r3, [sp, #12]
    return ((uint32_t)p_reg + event);
    114c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    1150:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1154:	2200      	movs	r2, #0
    1156:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	9302      	str	r3, [sp, #8]
    (void)dummy;
    115c:	9b02      	ldr	r3, [sp, #8]
}
    115e:	e7d3      	b.n	1108 <gpiote_event_handler+0x28>
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    1160:	9e03      	ldr	r6, [sp, #12]
    1162:	b916      	cbnz	r6, 116a <gpiote_event_handler+0x8a>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    1164:	b9f4      	cbnz	r4, 11a4 <gpiote_event_handler+0xc4>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    1166:	b005      	add	sp, #20
    1168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return port->driver_data;
    116a:	4b11      	ldr	r3, [pc, #68]	; (11b0 <gpiote_event_handler+0xd0>)
    116c:	68df      	ldr	r7, [r3, #12]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    116e:	6879      	ldr	r1, [r7, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1170:	b119      	cbz	r1, 117a <gpiote_event_handler+0x9a>
    1172:	460d      	mov	r5, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1174:	b149      	cbz	r1, 118a <gpiote_event_handler+0xaa>
	return node->next;
    1176:	680d      	ldr	r5, [r1, #0]
    1178:	e007      	b.n	118a <gpiote_event_handler+0xaa>
    117a:	460d      	mov	r5, r1
    117c:	e005      	b.n	118a <gpiote_event_handler+0xaa>
    117e:	b17d      	cbz	r5, 11a0 <gpiote_event_handler+0xc0>
    1180:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    1182:	b105      	cbz	r5, 1186 <gpiote_event_handler+0xa6>
	return node->next;
    1184:	682b      	ldr	r3, [r5, #0]
    1186:	4629      	mov	r1, r5
    1188:	461d      	mov	r5, r3
    118a:	2900      	cmp	r1, #0
    118c:	d0ea      	beq.n	1164 <gpiote_event_handler+0x84>
		if ((cb->pin_mask & pins) & data->int_en) {
    118e:	688a      	ldr	r2, [r1, #8]
    1190:	4032      	ands	r2, r6
    1192:	693b      	ldr	r3, [r7, #16]
    1194:	421a      	tst	r2, r3
    1196:	d0f2      	beq.n	117e <gpiote_event_handler+0x9e>
			cb->handler(port, cb, cb->pin_mask & pins);
    1198:	684b      	ldr	r3, [r1, #4]
    119a:	4805      	ldr	r0, [pc, #20]	; (11b0 <gpiote_event_handler+0xd0>)
    119c:	4798      	blx	r3
    119e:	e7ee      	b.n	117e <gpiote_event_handler+0x9e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    11a0:	462b      	mov	r3, r5
    11a2:	e7f0      	b.n	1186 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    11a4:	4802      	ldr	r0, [pc, #8]	; (11b0 <gpiote_event_handler+0xd0>)
    11a6:	f002 fa5e 	bl	3666 <cfg_level_pins>
}
    11aa:	e7dc      	b.n	1166 <gpiote_event_handler+0x86>
    11ac:	4000617c 	.word	0x4000617c
    11b0:	2000004c 	.word	0x2000004c
    11b4:	40006000 	.word	0x40006000

000011b8 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    11b8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    11ba:	4b0b      	ldr	r3, [pc, #44]	; (11e8 <gpio_nrfx_init+0x30>)
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	b10b      	cbz	r3, 11c4 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    11c0:	2000      	movs	r0, #0
    11c2:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    11c4:	4b08      	ldr	r3, [pc, #32]	; (11e8 <gpio_nrfx_init+0x30>)
    11c6:	2201      	movs	r2, #1
    11c8:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    11ca:	2200      	movs	r2, #0
    11cc:	2105      	movs	r1, #5
    11ce:	2006      	movs	r0, #6
    11d0:	f7ff fc0a 	bl	9e8 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    11d4:	2006      	movs	r0, #6
    11d6:	f7ff fbf7 	bl	9c8 <arch_irq_enable>
    p_reg->INTENSET = mask;
    11da:	4b04      	ldr	r3, [pc, #16]	; (11ec <gpio_nrfx_init+0x34>)
    11dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    11e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    11e4:	e7ec      	b.n	11c0 <gpio_nrfx_init+0x8>
    11e6:	bf00      	nop
    11e8:	200006b3 	.word	0x200006b3
    11ec:	40006000 	.word	0x40006000

000011f0 <event_txdrdy_check>:
#endif
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    11f0:	4b02      	ldr	r3, [pc, #8]	; (11fc <event_txdrdy_check+0xc>)
    11f2:	6818      	ldr	r0, [r3, #0]
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
#endif
	       );
}
    11f4:	3800      	subs	r0, #0
    11f6:	bf18      	it	ne
    11f8:	2001      	movne	r0, #1
    11fa:	4770      	bx	lr
    11fc:	4000211c 	.word	0x4000211c

00001200 <event_txdrdy_clear>:

static void event_txdrdy_clear(void)
{
    1200:	b082      	sub	sp, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <event_txdrdy_clear+0x14>)
    1204:	2200      	movs	r2, #0
    1206:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    120c:	9b01      	ldr	r3, [sp, #4]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_TXDRDY);
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	uart_sw_event_txdrdy = 0U;
#endif
}
    120e:	b002      	add	sp, #8
    1210:	4770      	bx	lr
    1212:	bf00      	nop
    1214:	4000211c 	.word	0x4000211c

00001218 <baudrate_set>:

static int baudrate_set(struct device *dev, u32_t baudrate)
{
	nrf_uart_baudrate_t nrf_baudrate; /* calculated baudrate divisor */

	switch (baudrate) {
    1218:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    121c:	d06d      	beq.n	12fa <baudrate_set+0xe2>
    121e:	d83b      	bhi.n	1298 <baudrate_set+0x80>
    1220:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    1224:	d06b      	beq.n	12fe <baudrate_set+0xe6>
    1226:	d90a      	bls.n	123e <baudrate_set+0x26>
    1228:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    122c:	d072      	beq.n	1314 <baudrate_set+0xfc>
    122e:	d925      	bls.n	127c <baudrate_set+0x64>
    1230:	f647 2312 	movw	r3, #31250	; 0x7a12
    1234:	4299      	cmp	r1, r3
    1236:	d12c      	bne.n	1292 <baudrate_set+0x7a>
		break;
	case 28800:
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    1238:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    123c:	e013      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    123e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    1242:	d05e      	beq.n	1302 <baudrate_set+0xea>
    1244:	d907      	bls.n	1256 <baudrate_set+0x3e>
    1246:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    124a:	d060      	beq.n	130e <baudrate_set+0xf6>
    124c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    1250:	d111      	bne.n	1276 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    1252:	4b3a      	ldr	r3, [pc, #232]	; (133c <baudrate_set+0x124>)
    1254:	e007      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    1256:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    125a:	d055      	beq.n	1308 <baudrate_set+0xf0>
    125c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    1260:	d106      	bne.n	1270 <baudrate_set+0x58>
		nrf_baudrate = 0x00027000;
    1262:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1266:	4a36      	ldr	r2, [pc, #216]	; (1340 <baudrate_set+0x128>)
    1268:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uart_baudrate_set(uart0_addr, nrf_baudrate);

	return 0;
    126c:	2000      	movs	r0, #0
    126e:	4770      	bx	lr
	switch (baudrate) {
    1270:	f06f 0015 	mvn.w	r0, #21
    1274:	4770      	bx	lr
    1276:	f06f 0015 	mvn.w	r0, #21
    127a:	4770      	bx	lr
    127c:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    1280:	d04a      	beq.n	1318 <baudrate_set+0x100>
    1282:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    1286:	d101      	bne.n	128c <baudrate_set+0x74>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    1288:	4b2e      	ldr	r3, [pc, #184]	; (1344 <baudrate_set+0x12c>)
    128a:	e7ec      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    128c:	f06f 0015 	mvn.w	r0, #21
    1290:	4770      	bx	lr
    1292:	f06f 0015 	mvn.w	r0, #21
    1296:	4770      	bx	lr
    1298:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    129c:	d03f      	beq.n	131e <baudrate_set+0x106>
    129e:	d909      	bls.n	12b4 <baudrate_set+0x9c>
    12a0:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    12a4:	d042      	beq.n	132c <baudrate_set+0x114>
    12a6:	d91d      	bls.n	12e4 <baudrate_set+0xcc>
    12a8:	4b27      	ldr	r3, [pc, #156]	; (1348 <baudrate_set+0x130>)
    12aa:	4299      	cmp	r1, r3
    12ac:	d143      	bne.n	1336 <baudrate_set+0x11e>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    12ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    12b2:	e7d8      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    12b4:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    12b8:	d033      	beq.n	1322 <baudrate_set+0x10a>
    12ba:	d904      	bls.n	12c6 <baudrate_set+0xae>
    12bc:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    12c0:	d10d      	bne.n	12de <baudrate_set+0xc6>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    12c2:	4b22      	ldr	r3, [pc, #136]	; (134c <baudrate_set+0x134>)
    12c4:	e7cf      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    12c6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    12ca:	4299      	cmp	r1, r3
    12cc:	d02b      	beq.n	1326 <baudrate_set+0x10e>
    12ce:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    12d2:	d101      	bne.n	12d8 <baudrate_set+0xc0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    12d4:	4b1e      	ldr	r3, [pc, #120]	; (1350 <baudrate_set+0x138>)
    12d6:	e7c6      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    12d8:	f06f 0015 	mvn.w	r0, #21
    12dc:	4770      	bx	lr
    12de:	f06f 0015 	mvn.w	r0, #21
    12e2:	4770      	bx	lr
    12e4:	4b1b      	ldr	r3, [pc, #108]	; (1354 <baudrate_set+0x13c>)
    12e6:	4299      	cmp	r1, r3
    12e8:	d022      	beq.n	1330 <baudrate_set+0x118>
    12ea:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    12ee:	d101      	bne.n	12f4 <baudrate_set+0xdc>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    12f0:	4b19      	ldr	r3, [pc, #100]	; (1358 <baudrate_set+0x140>)
    12f2:	e7b8      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    12f4:	f06f 0015 	mvn.w	r0, #21
    12f8:	4770      	bx	lr
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    12fa:	4b18      	ldr	r3, [pc, #96]	; (135c <baudrate_set+0x144>)
    12fc:	e7b3      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    12fe:	4b18      	ldr	r3, [pc, #96]	; (1360 <baudrate_set+0x148>)
    1300:	e7b1      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    1302:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1306:	e7ae      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    1308:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    130c:	e7ab      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    130e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1312:	e7a8      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    1314:	4b13      	ldr	r3, [pc, #76]	; (1364 <baudrate_set+0x14c>)
    1316:	e7a6      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    1318:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    131c:	e7a3      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    131e:	4b12      	ldr	r3, [pc, #72]	; (1368 <baudrate_set+0x150>)
    1320:	e7a1      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    1322:	4b12      	ldr	r3, [pc, #72]	; (136c <baudrate_set+0x154>)
    1324:	e79f      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    1326:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    132a:	e79c      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    132c:	4b10      	ldr	r3, [pc, #64]	; (1370 <baudrate_set+0x158>)
    132e:	e79a      	b.n	1266 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    1330:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1334:	e797      	b.n	1266 <baudrate_set+0x4e>
	switch (baudrate) {
    1336:	f06f 0015 	mvn.w	r0, #21
}
    133a:	4770      	bx	lr
    133c:	0013b000 	.word	0x0013b000
    1340:	40002000 	.word	0x40002000
    1344:	004ea000 	.word	0x004ea000
    1348:	000f4240 	.word	0x000f4240
    134c:	01d7e000 	.word	0x01d7e000
    1350:	00ebf000 	.word	0x00ebf000
    1354:	0003d090 	.word	0x0003d090
    1358:	075f7000 	.word	0x075f7000
    135c:	009d5000 	.word	0x009d5000
    1360:	00275000 	.word	0x00275000
    1364:	0075f000 	.word	0x0075f000
    1368:	03afb000 	.word	0x03afb000
    136c:	013a9000 	.word	0x013a9000
    1370:	0ebed000 	.word	0x0ebed000

00001374 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1374:	4b09      	ldr	r3, [pc, #36]	; (139c <uart_nrfx_poll_in+0x28>)
    1376:	681b      	ldr	r3, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    1378:	b163      	cbz	r3, 1394 <uart_nrfx_poll_in+0x20>
{
    137a:	b082      	sub	sp, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    137c:	4b07      	ldr	r3, [pc, #28]	; (139c <uart_nrfx_poll_in+0x28>)
    137e:	2000      	movs	r0, #0
    1380:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1386:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    1388:	4b05      	ldr	r3, [pc, #20]	; (13a0 <uart_nrfx_poll_in+0x2c>)
    138a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518

	/* Clear the interrupt */
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);
    138e:	700b      	strb	r3, [r1, #0]

	return 0;
}
    1390:	b002      	add	sp, #8
    1392:	4770      	bx	lr
		return -1;
    1394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1398:	4770      	bx	lr
    139a:	bf00      	nop
    139c:	40002108 	.word	0x40002108
    13a0:	40002000 	.word	0x40002000

000013a4 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    13a4:	4b02      	ldr	r3, [pc, #8]	; (13b0 <uart_nrfx_err_check+0xc>)
    13a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    13aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    13ae:	4770      	bx	lr
    13b0:	40002000 	.word	0x40002000

000013b4 <uart_nrfx_configure>:
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    13b4:	794b      	ldrb	r3, [r1, #5]
    13b6:	2b01      	cmp	r3, #1
    13b8:	d13b      	bne.n	1432 <uart_nrfx_configure+0x7e>
{
    13ba:	b530      	push	{r4, r5, lr}
    13bc:	b083      	sub	sp, #12
    13be:	4605      	mov	r5, r0
    13c0:	460c      	mov	r4, r1
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    13c2:	798b      	ldrb	r3, [r1, #6]
    13c4:	2b03      	cmp	r3, #3
    13c6:	d138      	bne.n	143a <uart_nrfx_configure+0x86>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    13c8:	79cb      	ldrb	r3, [r1, #7]
    13ca:	b133      	cbz	r3, 13da <uart_nrfx_configure+0x26>
    13cc:	2b01      	cmp	r3, #1
    13ce:	d00e      	beq.n	13ee <uart_nrfx_configure+0x3a>
    13d0:	f06f 0322 	mvn.w	r3, #34	; 0x22
	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;

	return 0;
}
    13d4:	4618      	mov	r0, r3
    13d6:	b003      	add	sp, #12
    13d8:	bd30      	pop	{r4, r5, pc}
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
    13da:	2300      	movs	r3, #0
    13dc:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    13e0:	7923      	ldrb	r3, [r4, #4]
    13e2:	b15b      	cbz	r3, 13fc <uart_nrfx_configure+0x48>
    13e4:	2b02      	cmp	r3, #2
    13e6:	d020      	beq.n	142a <uart_nrfx_configure+0x76>
    13e8:	f06f 0322 	mvn.w	r3, #34	; 0x22
    13ec:	e7f2      	b.n	13d4 <uart_nrfx_configure+0x20>
	return dev->config_info;
    13ee:	6843      	ldr	r3, [r0, #4]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	b32b      	cbz	r3, 1440 <uart_nrfx_configure+0x8c>
			uart_cfg.hwfc = NRF_UART_HWFC_ENABLED;
    13f4:	2301      	movs	r3, #1
    13f6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    13fa:	e7f1      	b.n	13e0 <uart_nrfx_configure+0x2c>
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
    13fc:	2300      	movs	r3, #0
    13fe:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1402:	6821      	ldr	r1, [r4, #0]
    1404:	4628      	mov	r0, r5
    1406:	f7ff ff07 	bl	1218 <baudrate_set>
    140a:	4603      	mov	r3, r0
    140c:	b9d8      	cbnz	r0, 1446 <uart_nrfx_configure+0x92>
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    140e:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
    1412:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1416:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1418:	490c      	ldr	r1, [pc, #48]	; (144c <uart_nrfx_configure+0x98>)
    141a:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	return dev->driver_data;
    141e:	68ea      	ldr	r2, [r5, #12]
	get_dev_data(dev)->uart_config = *cfg;
    1420:	e894 0003 	ldmia.w	r4, {r0, r1}
    1424:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    1428:	e7d4      	b.n	13d4 <uart_nrfx_configure+0x20>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    142a:	230e      	movs	r3, #14
    142c:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    1430:	e7e7      	b.n	1402 <uart_nrfx_configure+0x4e>
		return -ENOTSUP;
    1432:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    1436:	4618      	mov	r0, r3
    1438:	4770      	bx	lr
		return -ENOTSUP;
    143a:	f06f 0322 	mvn.w	r3, #34	; 0x22
    143e:	e7c9      	b.n	13d4 <uart_nrfx_configure+0x20>
			return -ENOTSUP;
    1440:	f06f 0322 	mvn.w	r3, #34	; 0x22
    1444:	e7c6      	b.n	13d4 <uart_nrfx_configure+0x20>
		return -ENOTSUP;
    1446:	f06f 0322 	mvn.w	r3, #34	; 0x22
    144a:	e7c3      	b.n	13d4 <uart_nrfx_configure+0x20>
    144c:	40002000 	.word	0x40002000

00001450 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    1450:	b530      	push	{r4, r5, lr}
    1452:	b083      	sub	sp, #12
    p_reg->OUTSET = set_mask;
    1454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1458:	2240      	movs	r2, #64	; 0x40
    145a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    145e:	2403      	movs	r4, #3
    1460:	f8c3 4718 	str.w	r4, [r3, #1816]	; 0x718
    1464:	2100      	movs	r1, #0
    1466:	f8c3 1720 	str.w	r1, [r3, #1824]	; 0x720
    p_reg->PSELRXD = pselrxd;
    146a:	4a13      	ldr	r2, [pc, #76]	; (14b8 <uart_nrfx_init+0x68>)
    146c:	2508      	movs	r5, #8
    146e:	f8c2 5514 	str.w	r5, [r2, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    1472:	2506      	movs	r5, #6
    1474:	f8c2 550c 	str.w	r5, [r2, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    1478:	2520      	movs	r5, #32
    147a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    147e:	f8c3 4714 	str.w	r4, [r3, #1812]	; 0x714
    1482:	f8c3 171c 	str.w	r1, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    1486:	2305      	movs	r3, #5
    1488:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    148c:	2307      	movs	r3, #7
    148e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1492:	68c1      	ldr	r1, [r0, #12]
    1494:	f7ff ff8e 	bl	13b4 <uart_nrfx_configure>
	if (err) {
    1498:	b958      	cbnz	r0, 14b2 <uart_nrfx_init+0x62>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    149a:	4b07      	ldr	r3, [pc, #28]	; (14b8 <uart_nrfx_init+0x68>)
    149c:	2204      	movs	r2, #4
    149e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    14a2:	4a06      	ldr	r2, [pc, #24]	; (14bc <uart_nrfx_init+0x6c>)
    14a4:	2100      	movs	r1, #0
    14a6:	6011      	str	r1, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	9201      	str	r2, [sp, #4]
    (void)dummy;
    14ac:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    14ae:	2201      	movs	r2, #1
    14b0:	601a      	str	r2, [r3, #0]
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    14b2:	b003      	add	sp, #12
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	bf00      	nop
    14b8:	40002000 	.word	0x40002000
    14bc:	40002108 	.word	0x40002108

000014c0 <uart_nrfx_poll_out>:
{
    14c0:	b538      	push	{r3, r4, r5, lr}
    14c2:	460c      	mov	r4, r1
	if (!k_is_in_isr()) {
    14c4:	f002 faad 	bl	3a22 <k_is_in_isr>
    14c8:	b9c0      	cbnz	r0, 14fc <uart_nrfx_poll_out+0x3c>
		u8_t safety_cnt = 100;
    14ca:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    14cc:	4b19      	ldr	r3, [pc, #100]	; (1534 <uart_nrfx_poll_out+0x74>)
    14ce:	2201      	movs	r2, #1
    14d0:	f3bf 8f5b 	dmb	ish
    14d4:	e853 1f00 	ldrex	r1, [r3]
    14d8:	2900      	cmp	r1, #0
    14da:	d103      	bne.n	14e4 <uart_nrfx_poll_out+0x24>
    14dc:	e843 2000 	strex	r0, r2, [r3]
    14e0:	2800      	cmp	r0, #0
    14e2:	d1f7      	bne.n	14d4 <uart_nrfx_poll_out+0x14>
    14e4:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    14e8:	d00b      	beq.n	1502 <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
    14ea:	2021      	movs	r0, #33	; 0x21
    14ec:	2100      	movs	r1, #0
    14ee:	f001 f825 	bl	253c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    14f2:	3d01      	subs	r5, #1
    14f4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    14f8:	d1e8      	bne.n	14cc <uart_nrfx_poll_out+0xc>
    14fa:	e01a      	b.n	1532 <uart_nrfx_poll_out+0x72>
		*lock = 1;
    14fc:	4b0d      	ldr	r3, [pc, #52]	; (1534 <uart_nrfx_poll_out+0x74>)
    14fe:	2201      	movs	r2, #1
    1500:	601a      	str	r2, [r3, #0]
	event_txdrdy_clear();
    1502:	f7ff fe7d 	bl	1200 <event_txdrdy_clear>
    1506:	4b0c      	ldr	r3, [pc, #48]	; (1538 <uart_nrfx_poll_out+0x78>)
    1508:	2201      	movs	r2, #1
    150a:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
    150c:	3b08      	subs	r3, #8
    150e:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    1512:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1516:	f7ff fe6b 	bl	11f0 <event_txdrdy_check>
    151a:	b920      	cbnz	r0, 1526 <uart_nrfx_poll_out+0x66>
    151c:	2001      	movs	r0, #1
    151e:	f002 f90a 	bl	3736 <nrfx_busy_wait>
    1522:	3c01      	subs	r4, #1
    1524:	d1f7      	bne.n	1516 <uart_nrfx_poll_out+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <uart_nrfx_poll_out+0x7c>)
    1528:	2201      	movs	r2, #1
    152a:	601a      	str	r2, [r3, #0]
	*lock = 0;
    152c:	4b01      	ldr	r3, [pc, #4]	; (1534 <uart_nrfx_poll_out+0x74>)
    152e:	2200      	movs	r2, #0
    1530:	601a      	str	r2, [r3, #0]
}
    1532:	bd38      	pop	{r3, r4, r5, pc}
    1534:	20000584 	.word	0x20000584
    1538:	40002008 	.word	0x40002008
    153c:	4000200c 	.word	0x4000200c

00001540 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1540:	4b0e      	ldr	r3, [pc, #56]	; (157c <nrf52_errata_12+0x3c>)
    1542:	681a      	ldr	r2, [r3, #0]
    1544:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    1548:	d005      	beq.n	1556 <nrf52_errata_12+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    154a:	4b0d      	ldr	r3, [pc, #52]	; (1580 <nrf52_errata_12+0x40>)
    154c:	681b      	ldr	r3, [r3, #0]
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    154e:	2a06      	cmp	r2, #6
    1550:	d008      	beq.n	1564 <nrf52_errata_12+0x24>
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
    1552:	2000      	movs	r0, #0
    1554:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1556:	4b0b      	ldr	r3, [pc, #44]	; (1584 <nrf52_errata_12+0x44>)
    1558:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    155a:	3308      	adds	r3, #8
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1562:	e7f4      	b.n	154e <nrf52_errata_12+0xe>
                switch(var2)
    1564:	3b03      	subs	r3, #3
    1566:	2b03      	cmp	r3, #3
    1568:	d803      	bhi.n	1572 <nrf52_errata_12+0x32>
    156a:	e8df f003 	tbb	[pc, r3]
    156e:	0404      	.short	0x0404
    1570:	0404      	.short	0x0404
            if (var1 == 0x06)
    1572:	2000      	movs	r0, #0
    1574:	4770      	bx	lr
                        return true;
    1576:	2001      	movs	r0, #1
    #endif
}
    1578:	4770      	bx	lr
    157a:	bf00      	nop
    157c:	10000130 	.word	0x10000130
    1580:	10000134 	.word	0x10000134
    1584:	f0000fe0 	.word	0xf0000fe0

00001588 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1588:	4b07      	ldr	r3, [pc, #28]	; (15a8 <nrf52_errata_16+0x20>)
    158a:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    158c:	3308      	adds	r3, #8
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1594:	2a06      	cmp	r2, #6
    1596:	d001      	beq.n	159c <nrf52_errata_16+0x14>
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
    1598:	2000      	movs	r0, #0
    159a:	4770      	bx	lr
                switch(var2)
    159c:	2b03      	cmp	r3, #3
    159e:	d001      	beq.n	15a4 <nrf52_errata_16+0x1c>
        return false;
    15a0:	2000      	movs	r0, #0
    15a2:	4770      	bx	lr
                        return true;
    15a4:	2001      	movs	r0, #1
    #endif
}
    15a6:	4770      	bx	lr
    15a8:	f0000fe0 	.word	0xf0000fe0

000015ac <nrf52_errata_31>:
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    15ac:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <nrf52_errata_31+0x3c>)
    15ae:	681a      	ldr	r2, [r3, #0]
    15b0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    15b4:	d005      	beq.n	15c2 <nrf52_errata_31+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    15b6:	4b0d      	ldr	r3, [pc, #52]	; (15ec <nrf52_errata_31+0x40>)
    15b8:	681b      	ldr	r3, [r3, #0]
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    15ba:	2a06      	cmp	r2, #6
    15bc:	d008      	beq.n	15d0 <nrf52_errata_31+0x24>
                    case 0x00ul:
                        return true;
                }
            }
        #endif
        return false;
    15be:	2000      	movs	r0, #0
    15c0:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    15c2:	4b0b      	ldr	r3, [pc, #44]	; (15f0 <nrf52_errata_31+0x44>)
    15c4:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    15c6:	3308      	adds	r3, #8
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
    15ce:	e7f4      	b.n	15ba <nrf52_errata_31+0xe>
                switch(var2)
    15d0:	3b03      	subs	r3, #3
    15d2:	2b03      	cmp	r3, #3
    15d4:	d803      	bhi.n	15de <nrf52_errata_31+0x32>
    15d6:	e8df f003 	tbb	[pc, r3]
    15da:	0404      	.short	0x0404
    15dc:	0404      	.short	0x0404
            if (var1 == 0x06)
    15de:	2000      	movs	r0, #0
    15e0:	4770      	bx	lr
                        return true;
    15e2:	2001      	movs	r0, #1
    #endif
}
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop
    15e8:	10000130 	.word	0x10000130
    15ec:	10000134 	.word	0x10000134
    15f0:	f0000fe0 	.word	0xf0000fe0

000015f4 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    15f4:	4b07      	ldr	r3, [pc, #28]	; (1614 <nrf52_errata_32+0x20>)
    15f6:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    15f8:	3308      	adds	r3, #8
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1600:	2a06      	cmp	r2, #6
    1602:	d001      	beq.n	1608 <nrf52_errata_32+0x14>
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
    1604:	2000      	movs	r0, #0
    1606:	4770      	bx	lr
                switch(var2)
    1608:	2b03      	cmp	r3, #3
    160a:	d001      	beq.n	1610 <nrf52_errata_32+0x1c>
        return false;
    160c:	2000      	movs	r0, #0
    160e:	4770      	bx	lr
                        return true;
    1610:	2001      	movs	r0, #1
    #endif
}
    1612:	4770      	bx	lr
    1614:	f0000fe0 	.word	0xf0000fe0

00001618 <nrf52_errata_36>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1618:	4b0e      	ldr	r3, [pc, #56]	; (1654 <nrf52_errata_36+0x3c>)
    161a:	681a      	ldr	r2, [r3, #0]
    161c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    1620:	d005      	beq.n	162e <nrf52_errata_36+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    1622:	4b0d      	ldr	r3, [pc, #52]	; (1658 <nrf52_errata_36+0x40>)
    1624:	681b      	ldr	r3, [r3, #0]
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1626:	2a06      	cmp	r2, #6
    1628:	d008      	beq.n	163c <nrf52_errata_36+0x24>
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
    162a:	2000      	movs	r0, #0
    162c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    162e:	4b0b      	ldr	r3, [pc, #44]	; (165c <nrf52_errata_36+0x44>)
    1630:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1632:	3308      	adds	r3, #8
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	f3c3 1303 	ubfx	r3, r3, #4, #4
    163a:	e7f4      	b.n	1626 <nrf52_errata_36+0xe>
                switch(var2)
    163c:	3b03      	subs	r3, #3
    163e:	2b03      	cmp	r3, #3
    1640:	d803      	bhi.n	164a <nrf52_errata_36+0x32>
    1642:	e8df f003 	tbb	[pc, r3]
    1646:	0404      	.short	0x0404
    1648:	0404      	.short	0x0404
            if (var1 == 0x06)
    164a:	2000      	movs	r0, #0
    164c:	4770      	bx	lr
                        return true;
    164e:	2001      	movs	r0, #1
    #endif
}
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	10000130 	.word	0x10000130
    1658:	10000134 	.word	0x10000134
    165c:	f0000fe0 	.word	0xf0000fe0

00001660 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1660:	4b07      	ldr	r3, [pc, #28]	; (1680 <nrf52_errata_37+0x20>)
    1662:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1664:	3308      	adds	r3, #8
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    166c:	2a06      	cmp	r2, #6
    166e:	d001      	beq.n	1674 <nrf52_errata_37+0x14>
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
    1670:	2000      	movs	r0, #0
    1672:	4770      	bx	lr
                switch(var2)
    1674:	2b03      	cmp	r3, #3
    1676:	d001      	beq.n	167c <nrf52_errata_37+0x1c>
        return false;
    1678:	2000      	movs	r0, #0
    167a:	4770      	bx	lr
                        return true;
    167c:	2001      	movs	r0, #1
    #endif
}
    167e:	4770      	bx	lr
    1680:	f0000fe0 	.word	0xf0000fe0

00001684 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1684:	4b07      	ldr	r3, [pc, #28]	; (16a4 <nrf52_errata_57+0x20>)
    1686:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1688:	3308      	adds	r3, #8
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1690:	2a06      	cmp	r2, #6
    1692:	d001      	beq.n	1698 <nrf52_errata_57+0x14>
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
    1694:	2000      	movs	r0, #0
    1696:	4770      	bx	lr
                switch(var2)
    1698:	2b03      	cmp	r3, #3
    169a:	d001      	beq.n	16a0 <nrf52_errata_57+0x1c>
        return false;
    169c:	2000      	movs	r0, #0
    169e:	4770      	bx	lr
                        return true;
    16a0:	2001      	movs	r0, #1
    #endif
}
    16a2:	4770      	bx	lr
    16a4:	f0000fe0 	.word	0xf0000fe0

000016a8 <nrf52_errata_66>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    16a8:	4b0d      	ldr	r3, [pc, #52]	; (16e0 <nrf52_errata_66+0x38>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    16b0:	d005      	beq.n	16be <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    16b2:	4a0c      	ldr	r2, [pc, #48]	; (16e4 <nrf52_errata_66+0x3c>)
    16b4:	6812      	ldr	r2, [r2, #0]
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    16b6:	2b06      	cmp	r3, #6
    16b8:	d008      	beq.n	16cc <nrf52_errata_66+0x24>
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
    16ba:	2000      	movs	r0, #0
    16bc:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    16be:	4b0a      	ldr	r3, [pc, #40]	; (16e8 <nrf52_errata_66+0x40>)
    16c0:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    16c2:	4a0a      	ldr	r2, [pc, #40]	; (16ec <nrf52_errata_66+0x44>)
    16c4:	6812      	ldr	r2, [r2, #0]
    16c6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    16ca:	e7f4      	b.n	16b6 <nrf52_errata_66+0xe>
                switch(var2)
    16cc:	2a05      	cmp	r2, #5
    16ce:	d005      	beq.n	16dc <nrf52_errata_66+0x34>
    16d0:	2a06      	cmp	r2, #6
    16d2:	d001      	beq.n	16d8 <nrf52_errata_66+0x30>
    16d4:	2000      	movs	r0, #0
    #endif
}
    16d6:	4770      	bx	lr
                        return true;
    16d8:	2001      	movs	r0, #1
    16da:	4770      	bx	lr
                        return true;
    16dc:	2001      	movs	r0, #1
    16de:	4770      	bx	lr
    16e0:	10000130 	.word	0x10000130
    16e4:	10000134 	.word	0x10000134
    16e8:	f0000fe0 	.word	0xf0000fe0
    16ec:	f0000fe8 	.word	0xf0000fe8

000016f0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    16f0:	4b0e      	ldr	r3, [pc, #56]	; (172c <nrf52_errata_108+0x3c>)
    16f2:	681a      	ldr	r2, [r3, #0]
    16f4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    16f8:	d005      	beq.n	1706 <nrf52_errata_108+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    16fa:	4b0d      	ldr	r3, [pc, #52]	; (1730 <nrf52_errata_108+0x40>)
    16fc:	681b      	ldr	r3, [r3, #0]
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    16fe:	2a06      	cmp	r2, #6
    1700:	d008      	beq.n	1714 <nrf52_errata_108+0x24>
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
    1702:	2000      	movs	r0, #0
    1704:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1706:	4b0b      	ldr	r3, [pc, #44]	; (1734 <nrf52_errata_108+0x44>)
    1708:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    170a:	3308      	adds	r3, #8
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1712:	e7f4      	b.n	16fe <nrf52_errata_108+0xe>
                switch(var2)
    1714:	3b03      	subs	r3, #3
    1716:	2b03      	cmp	r3, #3
    1718:	d803      	bhi.n	1722 <nrf52_errata_108+0x32>
    171a:	e8df f003 	tbb	[pc, r3]
    171e:	0404      	.short	0x0404
    1720:	0404      	.short	0x0404
            if (var1 == 0x06)
    1722:	2000      	movs	r0, #0
    1724:	4770      	bx	lr
                        return true;
    1726:	2001      	movs	r0, #1
    #endif
}
    1728:	4770      	bx	lr
    172a:	bf00      	nop
    172c:	10000130 	.word	0x10000130
    1730:	10000134 	.word	0x10000134
    1734:	f0000fe0 	.word	0xf0000fe0

00001738 <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1738:	4b0e      	ldr	r3, [pc, #56]	; (1774 <nrf52_errata_136+0x3c>)
    173a:	681a      	ldr	r2, [r3, #0]
    173c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    1740:	d005      	beq.n	174e <nrf52_errata_136+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    1742:	4b0d      	ldr	r3, [pc, #52]	; (1778 <nrf52_errata_136+0x40>)
    1744:	681b      	ldr	r3, [r3, #0]
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1746:	2a06      	cmp	r2, #6
    1748:	d008      	beq.n	175c <nrf52_errata_136+0x24>
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
    174a:	2000      	movs	r0, #0
    174c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    174e:	4b0b      	ldr	r3, [pc, #44]	; (177c <nrf52_errata_136+0x44>)
    1750:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1752:	3308      	adds	r3, #8
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	f3c3 1303 	ubfx	r3, r3, #4, #4
    175a:	e7f4      	b.n	1746 <nrf52_errata_136+0xe>
                switch(var2)
    175c:	3b03      	subs	r3, #3
    175e:	2b03      	cmp	r3, #3
    1760:	d803      	bhi.n	176a <nrf52_errata_136+0x32>
    1762:	e8df f003 	tbb	[pc, r3]
    1766:	0404      	.short	0x0404
    1768:	0404      	.short	0x0404
            if (var1 == 0x06)
    176a:	2000      	movs	r0, #0
    176c:	4770      	bx	lr
                        return true;
    176e:	2001      	movs	r0, #1
    #endif
}
    1770:	4770      	bx	lr
    1772:	bf00      	nop
    1774:	10000130 	.word	0x10000130
    1778:	10000134 	.word	0x10000134
    177c:	f0000fe0 	.word	0xf0000fe0

00001780 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1780:	4b06      	ldr	r3, [pc, #24]	; (179c <nrf52_errata_182+0x1c>)
    1782:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1784:	4a06      	ldr	r2, [pc, #24]	; (17a0 <nrf52_errata_182+0x20>)
    1786:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1788:	2b06      	cmp	r3, #6
    178a:	d001      	beq.n	1790 <nrf52_errata_182+0x10>
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
    178c:	2000      	movs	r0, #0
    178e:	4770      	bx	lr
                switch(var2)
    1790:	2a06      	cmp	r2, #6
    1792:	d001      	beq.n	1798 <nrf52_errata_182+0x18>
        return false;
    1794:	2000      	movs	r0, #0
    1796:	4770      	bx	lr
                        return true;
    1798:	2001      	movs	r0, #1
    #endif
}
    179a:	4770      	bx	lr
    179c:	10000130 	.word	0x10000130
    17a0:	10000134 	.word	0x10000134

000017a4 <SystemCoreClockUpdate>:
    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK_64M;
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    17a4:	4b01      	ldr	r3, [pc, #4]	; (17ac <SystemCoreClockUpdate+0x8>)
    17a6:	4a02      	ldr	r2, [pc, #8]	; (17b0 <SystemCoreClockUpdate+0xc>)
    17a8:	601a      	str	r2, [r3, #0]
}
    17aa:	4770      	bx	lr
    17ac:	20000010 	.word	0x20000010
    17b0:	03d09000 	.word	0x03d09000

000017b4 <SystemInit>:

void SystemInit(void)
{
    17b4:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
    17b6:	f7ff fec3 	bl	1540 <nrf52_errata_12>
    17ba:	b128      	cbz	r0, 17c8 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    17bc:	4b75      	ldr	r3, [pc, #468]	; (1994 <SystemInit+0x1e0>)
    17be:	681b      	ldr	r3, [r3, #0]
    17c0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    17c4:	4a74      	ldr	r2, [pc, #464]	; (1998 <SystemInit+0x1e4>)
    17c6:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
    17c8:	f7ff fede 	bl	1588 <nrf52_errata_16>
    17cc:	b110      	cbz	r0, 17d4 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    17ce:	4b73      	ldr	r3, [pc, #460]	; (199c <SystemInit+0x1e8>)
    17d0:	4a73      	ldr	r2, [pc, #460]	; (19a0 <SystemInit+0x1ec>)
    17d2:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
    17d4:	f7ff feea 	bl	15ac <nrf52_errata_31>
    17d8:	b128      	cbz	r0, 17e6 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    17da:	4b72      	ldr	r3, [pc, #456]	; (19a4 <SystemInit+0x1f0>)
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	f3c3 3342 	ubfx	r3, r3, #13, #3
    17e2:	4a71      	ldr	r2, [pc, #452]	; (19a8 <SystemInit+0x1f4>)
    17e4:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
    17e6:	f7ff ff05 	bl	15f4 <nrf52_errata_32>
    17ea:	b120      	cbz	r0, 17f6 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    17ec:	4a6f      	ldr	r2, [pc, #444]	; (19ac <SystemInit+0x1f8>)
    17ee:	68d3      	ldr	r3, [r2, #12]
    17f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    17f4:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    17f6:	f7ff ff0f 	bl	1618 <nrf52_errata_36>
    17fa:	b140      	cbz	r0, 180e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    17fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1800:	2200      	movs	r2, #0
    1802:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    1806:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    180a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
    180e:	f7ff ff27 	bl	1660 <nrf52_errata_37>
    1812:	b110      	cbz	r0, 181a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    1814:	4b66      	ldr	r3, [pc, #408]	; (19b0 <SystemInit+0x1fc>)
    1816:	2203      	movs	r2, #3
    1818:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
    181a:	f7ff ff33 	bl	1684 <nrf52_errata_57>
    181e:	b158      	cbz	r0, 1838 <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1820:	4b64      	ldr	r3, [pc, #400]	; (19b4 <SystemInit+0x200>)
    1822:	2205      	movs	r2, #5
    1824:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    1826:	3378      	adds	r3, #120	; 0x78
    1828:	2201      	movs	r2, #1
    182a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    182c:	3b70      	subs	r3, #112	; 0x70
    182e:	2200      	movs	r2, #0
    1830:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1832:	3b04      	subs	r3, #4
    1834:	223f      	movs	r2, #63	; 0x3f
    1836:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    1838:	f7ff ff36 	bl	16a8 <nrf52_errata_66>
    183c:	2800      	cmp	r0, #0
    183e:	d046      	beq.n	18ce <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1844:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1848:	4b5b      	ldr	r3, [pc, #364]	; (19b8 <SystemInit+0x204>)
    184a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    184e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1852:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1856:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    185a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    185e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1862:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1866:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    186a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    186e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1872:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1876:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    187a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    187e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1882:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1886:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    188a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    188e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1892:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1896:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    189a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    189e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    18a2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    18a6:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    18aa:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    18ae:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    18b2:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    18b6:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    18ba:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    18be:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    18c2:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    18c6:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    18ca:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
    18ce:	f7ff ff0f 	bl	16f0 <nrf52_errata_108>
    18d2:	b128      	cbz	r0, 18e0 <SystemInit+0x12c>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    18d4:	4b39      	ldr	r3, [pc, #228]	; (19bc <SystemInit+0x208>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    18dc:	4a38      	ldr	r2, [pc, #224]	; (19c0 <SystemInit+0x20c>)
    18de:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    18e0:	f7ff ff2a 	bl	1738 <nrf52_errata_136>
    18e4:	b160      	cbz	r0, 1900 <SystemInit+0x14c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    18e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    18ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    18ee:	f013 0f01 	tst.w	r3, #1
    18f2:	d005      	beq.n	1900 <SystemInit+0x14c>
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    18f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    18f8:	f06f 0201 	mvn.w	r2, #1
    18fc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
    1900:	f7ff ff3e 	bl	1780 <nrf52_errata_182>
    1904:	b120      	cbz	r0, 1910 <SystemInit+0x15c>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    1906:	4a2f      	ldr	r2, [pc, #188]	; (19c4 <SystemInit+0x210>)
    1908:	6813      	ldr	r3, [r2, #0]
    190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    190e:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1910:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    1918:	2b00      	cmp	r3, #0
    191a:	db08      	blt.n	192e <SystemInit+0x17a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    191c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1920:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1924:	2b00      	cmp	r3, #0
    1926:	db02      	blt.n	192e <SystemInit+0x17a>
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    1928:	f7ff ff3c 	bl	17a4 <SystemCoreClockUpdate>
}
    192c:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    192e:	4b26      	ldr	r3, [pc, #152]	; (19c8 <SystemInit+0x214>)
    1930:	2201      	movs	r2, #1
    1932:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1936:	4b24      	ldr	r3, [pc, #144]	; (19c8 <SystemInit+0x214>)
    1938:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    193c:	2b00      	cmp	r3, #0
    193e:	d0fa      	beq.n	1936 <SystemInit+0x182>
            NRF_UICR->PSELRESET[0] = 21;
    1940:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1944:	2215      	movs	r2, #21
    1946:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    194a:	4b1f      	ldr	r3, [pc, #124]	; (19c8 <SystemInit+0x214>)
    194c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    1950:	2b00      	cmp	r3, #0
    1952:	d0fa      	beq.n	194a <SystemInit+0x196>
            NRF_UICR->PSELRESET[1] = 21;
    1954:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1958:	2215      	movs	r2, #21
    195a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    195e:	4b1a      	ldr	r3, [pc, #104]	; (19c8 <SystemInit+0x214>)
    1960:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    1964:	2b00      	cmp	r3, #0
    1966:	d0fa      	beq.n	195e <SystemInit+0x1aa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1968:	4b17      	ldr	r3, [pc, #92]	; (19c8 <SystemInit+0x214>)
    196a:	2200      	movs	r2, #0
    196c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1970:	4b15      	ldr	r3, [pc, #84]	; (19c8 <SystemInit+0x214>)
    1972:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    1976:	2b00      	cmp	r3, #0
    1978:	d0fa      	beq.n	1970 <SystemInit+0x1bc>
  __ASM volatile ("dsb 0xF":::"memory");
    197a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    197e:	4913      	ldr	r1, [pc, #76]	; (19cc <SystemInit+0x218>)
    1980:	68ca      	ldr	r2, [r1, #12]
    1982:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1986:	4b12      	ldr	r3, [pc, #72]	; (19d0 <SystemInit+0x21c>)
    1988:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    198a:	60cb      	str	r3, [r1, #12]
    198c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1990:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1992:	e7fd      	b.n	1990 <SystemInit+0x1dc>
    1994:	10000324 	.word	0x10000324
    1998:	40013540 	.word	0x40013540
    199c:	4007c074 	.word	0x4007c074
    19a0:	baadf00d 	.word	0xbaadf00d
    19a4:	10000244 	.word	0x10000244
    19a8:	4000053c 	.word	0x4000053c
    19ac:	e000edf0 	.word	0xe000edf0
    19b0:	400005a0 	.word	0x400005a0
    19b4:	40005610 	.word	0x40005610
    19b8:	4000c000 	.word	0x4000c000
    19bc:	10000258 	.word	0x10000258
    19c0:	40000ee4 	.word	0x40000ee4
    19c4:	4000173c 	.word	0x4000173c
    19c8:	4001e000 	.word	0x4001e000
    19cc:	e000ed00 	.word	0xe000ed00
    19d0:	05fa0004 	.word	0x05fa0004

000019d4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    19d4:	b570      	push	{r4, r5, r6, lr}
    19d6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    19d8:	4b0b      	ldr	r3, [pc, #44]	; (1a08 <z_sys_init_run_level+0x34>)
    19da:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    19de:	e000      	b.n	19e2 <z_sys_init_run_level+0xe>
    19e0:	3408      	adds	r4, #8
    19e2:	1c73      	adds	r3, r6, #1
    19e4:	4a08      	ldr	r2, [pc, #32]	; (1a08 <z_sys_init_run_level+0x34>)
    19e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19ea:	42a3      	cmp	r3, r4
    19ec:	d90a      	bls.n	1a04 <z_sys_init_run_level+0x30>
		struct device *dev = entry->dev;
    19ee:	6865      	ldr	r5, [r4, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		retval = entry->init(dev);
    19f0:	6823      	ldr	r3, [r4, #0]
    19f2:	4628      	mov	r0, r5
    19f4:	4798      	blx	r3
		if (retval != 0) {
    19f6:	2800      	cmp	r0, #0
    19f8:	d0f2      	beq.n	19e0 <z_sys_init_run_level+0xc>
			if (dev) {
    19fa:	2d00      	cmp	r5, #0
    19fc:	d0f0      	beq.n	19e0 <z_sys_init_run_level+0xc>
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    19fe:	2300      	movs	r3, #0
    1a00:	60ab      	str	r3, [r5, #8]
    1a02:	e7ed      	b.n	19e0 <z_sys_init_run_level+0xc>
			}
		}
	}
}
    1a04:	bd70      	pop	{r4, r5, r6, pc}
    1a06:	bf00      	nop
    1a08:	00003db0 	.word	0x00003db0

00001a0c <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
    1a0c:	b538      	push	{r3, r4, r5, lr}
    1a0e:	4605      	mov	r5, r0
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    1a10:	4c0f      	ldr	r4, [pc, #60]	; (1a50 <z_impl_device_get_binding+0x44>)
    1a12:	e000      	b.n	1a16 <z_impl_device_get_binding+0xa>
    1a14:	3410      	adds	r4, #16
    1a16:	4b0f      	ldr	r3, [pc, #60]	; (1a54 <z_impl_device_get_binding+0x48>)
    1a18:	429c      	cmp	r4, r3
    1a1a:	d006      	beq.n	1a2a <z_impl_device_get_binding+0x1e>
		if ((dev->driver_api != NULL) &&
    1a1c:	68a3      	ldr	r3, [r4, #8]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d0f8      	beq.n	1a14 <z_impl_device_get_binding+0x8>
		    (dev->name == name)) {
    1a22:	6823      	ldr	r3, [r4, #0]
		if ((dev->driver_api != NULL) &&
    1a24:	42ab      	cmp	r3, r5
    1a26:	d1f5      	bne.n	1a14 <z_impl_device_get_binding+0x8>
    1a28:	e010      	b.n	1a4c <z_impl_device_get_binding+0x40>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    1a2a:	4c09      	ldr	r4, [pc, #36]	; (1a50 <z_impl_device_get_binding+0x44>)
    1a2c:	e000      	b.n	1a30 <z_impl_device_get_binding+0x24>
    1a2e:	3410      	adds	r4, #16
    1a30:	4b08      	ldr	r3, [pc, #32]	; (1a54 <z_impl_device_get_binding+0x48>)
    1a32:	429c      	cmp	r4, r3
    1a34:	d009      	beq.n	1a4a <z_impl_device_get_binding+0x3e>
		if ((dev->driver_api != NULL) &&
    1a36:	68a3      	ldr	r3, [r4, #8]
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d0f8      	beq.n	1a2e <z_impl_device_get_binding+0x22>
		    (strcmp(name, dev->name) == 0)) {
    1a3c:	6821      	ldr	r1, [r4, #0]
    1a3e:	4628      	mov	r0, r5
    1a40:	f001 fc97 	bl	3372 <strcmp>
		if ((dev->driver_api != NULL) &&
    1a44:	2800      	cmp	r0, #0
    1a46:	d1f2      	bne.n	1a2e <z_impl_device_get_binding+0x22>
    1a48:	e000      	b.n	1a4c <z_impl_device_get_binding+0x40>
			return dev;
		}
	}

	return NULL;
    1a4a:	2400      	movs	r4, #0
}
    1a4c:	4620      	mov	r0, r4
    1a4e:	bd38      	pop	{r3, r4, r5, pc}
    1a50:	2000001c 	.word	0x2000001c
    1a54:	2000005c 	.word	0x2000005c

00001a58 <set_kernel_idle_time_in_ticks>:
 */
#if !SMP_FALLBACK
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
#ifdef CONFIG_SYS_POWER_MANAGEMENT
	_kernel.idle = ticks;
    1a58:	4b01      	ldr	r3, [pc, #4]	; (1a60 <set_kernel_idle_time_in_ticks+0x8>)
    1a5a:	6218      	str	r0, [r3, #32]
#endif
}
    1a5c:	4770      	bx	lr
    1a5e:	bf00      	nop
    1a60:	20000670 	.word	0x20000670

00001a64 <init_idle_thread>:

/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(int i)
{
    1a64:	b510      	push	{r4, lr}
    1a66:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    1a68:	4b0e      	ldr	r3, [pc, #56]	; (1aa4 <init_idle_thread+0x40>)
    1a6a:	2474      	movs	r4, #116	; 0x74
    1a6c:	fb04 3400 	mla	r4, r4, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    1a70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    1a74:	2300      	movs	r3, #0
    1a76:	9305      	str	r3, [sp, #20]
    1a78:	2201      	movs	r2, #1
    1a7a:	9204      	str	r2, [sp, #16]
    1a7c:	220f      	movs	r2, #15
    1a7e:	9203      	str	r2, [sp, #12]
    1a80:	9302      	str	r3, [sp, #8]
    1a82:	9301      	str	r3, [sp, #4]
    1a84:	9300      	str	r3, [sp, #0]
    1a86:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <init_idle_thread+0x44>)
    1a88:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1a8c:	4907      	ldr	r1, [pc, #28]	; (1aac <init_idle_thread+0x48>)
    1a8e:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    1a92:	4620      	mov	r0, r4
    1a94:	f000 fd96 	bl	25c4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1a98:	7b63      	ldrb	r3, [r4, #13]
    1a9a:	f023 0304 	bic.w	r3, r3, #4
    1a9e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    1aa0:	b006      	add	sp, #24
    1aa2:	bd10      	pop	{r4, pc}
    1aa4:	20000588 	.word	0x20000588
    1aa8:	000037b5 	.word	0x000037b5
    1aac:	20000ab8 	.word	0x20000ab8

00001ab0 <prepare_multithreading>:
 *
 * @return N/A
 */
#ifdef CONFIG_MULTITHREADING
static void prepare_multithreading(void)
{
    1ab0:	b530      	push	{r4, r5, lr}
    1ab2:	b087      	sub	sp, #28
	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    1ab4:	f000 fca0 	bl	23f8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    1ab8:	4d1c      	ldr	r5, [pc, #112]	; (1b2c <prepare_multithreading+0x7c>)
    1aba:	4b1d      	ldr	r3, [pc, #116]	; (1b30 <prepare_multithreading+0x80>)
    1abc:	625d      	str	r5, [r3, #36]	; 0x24
#endif

	z_setup_new_thread(&z_main_thread, z_main_stack,
    1abe:	4b1d      	ldr	r3, [pc, #116]	; (1b34 <prepare_multithreading+0x84>)
    1ac0:	9305      	str	r3, [sp, #20]
    1ac2:	2301      	movs	r3, #1
    1ac4:	9304      	str	r3, [sp, #16]
    1ac6:	2400      	movs	r4, #0
    1ac8:	9403      	str	r4, [sp, #12]
    1aca:	9402      	str	r4, [sp, #8]
    1acc:	9401      	str	r4, [sp, #4]
    1ace:	9400      	str	r4, [sp, #0]
    1ad0:	4b19      	ldr	r3, [pc, #100]	; (1b38 <prepare_multithreading+0x88>)
    1ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1ad6:	4919      	ldr	r1, [pc, #100]	; (1b3c <prepare_multithreading+0x8c>)
    1ad8:	4628      	mov	r0, r5
    1ada:	f000 fd73 	bl	25c4 <z_setup_new_thread>
    1ade:	7b6b      	ldrb	r3, [r5, #13]
    1ae0:	f023 0304 	bic.w	r3, r3, #4
    1ae4:	736b      	strb	r3, [r5, #13]
			   CONFIG_MAIN_STACK_SIZE, bg_thread_main,
			   NULL, NULL, NULL,
			   CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    1ae6:	4628      	mov	r0, r5
    1ae8:	f001 feb8 	bl	385c <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    1aec:	2c00      	cmp	r4, #0
    1aee:	dd06      	ble.n	1afe <prepare_multithreading+0x4e>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1af0:	4b0f      	ldr	r3, [pc, #60]	; (1b30 <prepare_multithreading+0x80>)
    1af2:	f103 0218 	add.w	r2, r3, #24
    1af6:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
    1af8:	61da      	str	r2, [r3, #28]
			(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_THREAD_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	initialize_timeouts();
}
    1afa:	b007      	add	sp, #28
    1afc:	bd30      	pop	{r4, r5, pc}
		init_idle_thread(i);
    1afe:	4620      	mov	r0, r4
    1b00:	f7ff ffb0 	bl	1a64 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    1b04:	4b0e      	ldr	r3, [pc, #56]	; (1b40 <prepare_multithreading+0x90>)
    1b06:	2274      	movs	r2, #116	; 0x74
    1b08:	fb02 3204 	mla	r2, r2, r4, r3
    1b0c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1b10:	00d9      	lsls	r1, r3, #3
    1b12:	4b07      	ldr	r3, [pc, #28]	; (1b30 <prepare_multithreading+0x80>)
    1b14:	440b      	add	r3, r1
    1b16:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    1b18:	751c      	strb	r4, [r3, #20]
			(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[i]) +
    1b1a:	4a0a      	ldr	r2, [pc, #40]	; (1b44 <prepare_multithreading+0x94>)
    1b1c:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    1b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    1b24:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    1b26:	3401      	adds	r4, #1
    1b28:	e7e0      	b.n	1aec <prepare_multithreading+0x3c>
    1b2a:	bf00      	nop
    1b2c:	200005fc 	.word	0x200005fc
    1b30:	20000670 	.word	0x20000670
    1b34:	00003dc8 	.word	0x00003dc8
    1b38:	00001bb1 	.word	0x00001bb1
    1b3c:	200006b8 	.word	0x200006b8
    1b40:	20000588 	.word	0x20000588
    1b44:	20000bf8 	.word	0x20000bf8

00001b48 <switch_to_main_thread>:

static FUNC_NORETURN void switch_to_main_thread(void)
{
    1b48:	b508      	push	{r3, lr}
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1b4a:	4b03      	ldr	r3, [pc, #12]	; (1b58 <switch_to_main_thread+0x10>)
    1b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b50:	4902      	ldr	r1, [pc, #8]	; (1b5c <switch_to_main_thread+0x14>)
    1b52:	4803      	ldr	r0, [pc, #12]	; (1b60 <switch_to_main_thread+0x18>)
    1b54:	f7fe ff7c 	bl	a50 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1b58:	00001bb1 	.word	0x00001bb1
    1b5c:	200006b8 	.word	0x200006b8
    1b60:	200005fc 	.word	0x200005fc

00001b64 <z_bss_zero>:
{
    1b64:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1b66:	4803      	ldr	r0, [pc, #12]	; (1b74 <z_bss_zero+0x10>)
    1b68:	4a03      	ldr	r2, [pc, #12]	; (1b78 <z_bss_zero+0x14>)
    1b6a:	1a12      	subs	r2, r2, r0
    1b6c:	2100      	movs	r1, #0
    1b6e:	f001 fc2e 	bl	33ce <memset>
}
    1b72:	bd08      	pop	{r3, pc}
    1b74:	20000088 	.word	0x20000088
    1b78:	200006b8 	.word	0x200006b8

00001b7c <z_data_copy>:
{
    1b7c:	b508      	push	{r3, lr}
		 __data_ram_end - __data_ram_start);
    1b7e:	4806      	ldr	r0, [pc, #24]	; (1b98 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1b80:	4a06      	ldr	r2, [pc, #24]	; (1b9c <z_data_copy+0x20>)
    1b82:	1a12      	subs	r2, r2, r0
    1b84:	4906      	ldr	r1, [pc, #24]	; (1ba0 <z_data_copy+0x24>)
    1b86:	f001 fbfe 	bl	3386 <memcpy>
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1b8a:	4a06      	ldr	r2, [pc, #24]	; (1ba4 <z_data_copy+0x28>)
    1b8c:	4906      	ldr	r1, [pc, #24]	; (1ba8 <z_data_copy+0x2c>)
    1b8e:	4807      	ldr	r0, [pc, #28]	; (1bac <z_data_copy+0x30>)
    1b90:	f001 fbf9 	bl	3386 <memcpy>
}
    1b94:	bd08      	pop	{r3, pc}
    1b96:	bf00      	nop
    1b98:	20000000 	.word	0x20000000
    1b9c:	20000084 	.word	0x20000084
    1ba0:	00003e08 	.word	0x00003e08
    1ba4:	00000000 	.word	0x00000000
    1ba8:	00003e08 	.word	0x00003e08
    1bac:	20000000 	.word	0x20000000

00001bb0 <bg_thread_main>:
{
    1bb0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    1bb2:	4b0c      	ldr	r3, [pc, #48]	; (1be4 <bg_thread_main+0x34>)
    1bb4:	2201      	movs	r2, #1
    1bb6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1bb8:	2002      	movs	r0, #2
    1bba:	f7ff ff0b 	bl	19d4 <z_sys_init_run_level>
	printk("*** Booting Zephyr OS build %s %s ***\n",
    1bbe:	4a0a      	ldr	r2, [pc, #40]	; (1be8 <bg_thread_main+0x38>)
    1bc0:	490a      	ldr	r1, [pc, #40]	; (1bec <bg_thread_main+0x3c>)
    1bc2:	480b      	ldr	r0, [pc, #44]	; (1bf0 <bg_thread_main+0x40>)
    1bc4:	f001 f8c1 	bl	2d4a <printk>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    1bc8:	2003      	movs	r0, #3
    1bca:	f7ff ff03 	bl	19d4 <z_sys_init_run_level>
	z_init_static_threads();
    1bce:	f000 fd2d 	bl	262c <z_init_static_threads>
	main();
    1bd2:	f7fe fbff 	bl	3d4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1bd6:	4a07      	ldr	r2, [pc, #28]	; (1bf4 <bg_thread_main+0x44>)
    1bd8:	7b13      	ldrb	r3, [r2, #12]
    1bda:	f023 0301 	bic.w	r3, r3, #1
    1bde:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1be0:	bd08      	pop	{r3, pc}
    1be2:	bf00      	nop
    1be4:	200006b4 	.word	0x200006b4
    1be8:	00003d18 	.word	0x00003d18
    1bec:	00003dd0 	.word	0x00003dd0
    1bf0:	00003de0 	.word	0x00003de0
    1bf4:	200005fc 	.word	0x200005fc

00001bf8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1bf8:	b500      	push	{lr}
    1bfa:	b09f      	sub	sp, #124	; 0x7c
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    1bfc:	4b17      	ldr	r3, [pc, #92]	; (1c5c <z_cstart+0x64>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1bfe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    1c02:	4c17      	ldr	r4, [pc, #92]	; (1c60 <z_cstart+0x68>)
    1c04:	6963      	ldr	r3, [r4, #20]
    1c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1c0a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c0c:	23e0      	movs	r3, #224	; 0xe0
    1c0e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1c12:	2500      	movs	r5, #0
    1c14:	77e5      	strb	r5, [r4, #31]
    1c16:	7625      	strb	r5, [r4, #24]
    1c18:	7665      	strb	r5, [r4, #25]
    1c1a:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c1e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1c22:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1c24:	f7ff f888 	bl	d38 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1c28:	f7fe ff2e 	bl	a88 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1c30:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1c32:	62e3      	str	r3, [r4, #44]	; 0x2c
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    1c34:	2401      	movs	r4, #1
    1c36:	f88d 4011 	strb.w	r4, [sp, #17]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    1c3a:	f88d 4010 	strb.w	r4, [sp, #16]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    1c3e:	9519      	str	r5, [sp, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
    1c40:	951a      	str	r5, [sp, #104]	; 0x68
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    1c42:	4b08      	ldr	r3, [pc, #32]	; (1c64 <z_cstart+0x6c>)
    1c44:	aa01      	add	r2, sp, #4
    1c46:	609a      	str	r2, [r3, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1c48:	4628      	mov	r0, r5
    1c4a:	f7ff fec3 	bl	19d4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1c4e:	4620      	mov	r0, r4
    1c50:	f7ff fec0 	bl	19d4 <z_sys_init_run_level>
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */

#ifdef CONFIG_MULTITHREADING
	prepare_multithreading();
    1c54:	f7ff ff2c 	bl	1ab0 <prepare_multithreading>
	switch_to_main_thread();
    1c58:	f7ff ff76 	bl	1b48 <switch_to_main_thread>
    1c5c:	200013f8 	.word	0x200013f8
    1c60:	e000ed00 	.word	0xe000ed00
    1c64:	20000670 	.word	0x20000670

00001c68 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    1c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c6c:	b083      	sub	sp, #12
    1c6e:	4604      	mov	r4, r0
    1c70:	461d      	mov	r5, r3
	__asm__ volatile(
    1c72:	f04f 0320 	mov.w	r3, #32
    1c76:	f3ef 8711 	mrs	r7, BASEPRI
    1c7a:	f383 8811 	msr	BASEPRI, r3
    1c7e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1c82:	68c1      	ldr	r1, [r0, #12]
    1c84:	b999      	cbnz	r1, 1cae <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    1c86:	2900      	cmp	r1, #0
    1c88:	d14f      	bne.n	1d2a <z_impl_k_mutex_lock+0xc2>
    1c8a:	4b3a      	ldr	r3, [pc, #232]	; (1d74 <z_impl_k_mutex_lock+0x10c>)
    1c8c:	689b      	ldr	r3, [r3, #8]
    1c8e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    1c92:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    1c94:	3101      	adds	r1, #1
    1c96:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    1c98:	4b36      	ldr	r3, [pc, #216]	; (1d74 <z_impl_k_mutex_lock+0x10c>)
    1c9a:	689b      	ldr	r3, [r3, #8]
    1c9c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    1c9e:	f387 8811 	msr	BASEPRI, r7
    1ca2:	f3bf 8f6f 	isb	sy
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
    1ca6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    1ca8:	b003      	add	sp, #12
    1caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1cae:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1cb0:	6882      	ldr	r2, [r0, #8]
    1cb2:	4b30      	ldr	r3, [pc, #192]	; (1d74 <z_impl_k_mutex_lock+0x10c>)
    1cb4:	689b      	ldr	r3, [r3, #8]
    1cb6:	429a      	cmp	r2, r3
    1cb8:	d0e5      	beq.n	1c86 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    1cba:	ea55 0106 	orrs.w	r1, r5, r6
    1cbe:	bf0c      	ite	eq
    1cc0:	f04f 0801 	moveq.w	r8, #1
    1cc4:	f04f 0800 	movne.w	r8, #0
    1cc8:	d031      	beq.n	1d2e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    1cca:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1cce:	4649      	mov	r1, r9
    1cd0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    1cd4:	f001 fd7a 	bl	37cc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1cd8:	4581      	cmp	r9, r0
    1cda:	dc2f      	bgt.n	1d3c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    1cdc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1ce0:	9600      	str	r6, [sp, #0]
    1ce2:	9501      	str	r5, [sp, #4]
    1ce4:	4622      	mov	r2, r4
    1ce6:	4639      	mov	r1, r7
    1ce8:	4823      	ldr	r0, [pc, #140]	; (1d78 <z_impl_k_mutex_lock+0x110>)
    1cea:	f000 fb19 	bl	2320 <z_pend_curr>
	if (got_mutex == 0) {
    1cee:	2800      	cmp	r0, #0
    1cf0:	d0da      	beq.n	1ca8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    1cf2:	f04f 0320 	mov.w	r3, #32
    1cf6:	f3ef 8511 	mrs	r5, BASEPRI
    1cfa:	f383 8811 	msr	BASEPRI, r3
    1cfe:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1d02:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1d04:	429c      	cmp	r4, r3
    1d06:	d01f      	beq.n	1d48 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    1d08:	b1f3      	cbz	r3, 1d48 <z_impl_k_mutex_lock+0xe0>
    1d0a:	6921      	ldr	r1, [r4, #16]
    1d0c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    1d10:	f001 fd5c 	bl	37cc <new_prio_for_inheritance>
    1d14:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1d16:	4620      	mov	r0, r4
    1d18:	f001 fd61 	bl	37de <adjust_owner_prio>
    1d1c:	b9b0      	cbnz	r0, 1d4c <z_impl_k_mutex_lock+0xe4>
    1d1e:	f1b9 0f00 	cmp.w	r9, #0
    1d22:	d015      	beq.n	1d50 <z_impl_k_mutex_lock+0xe8>
    1d24:	f04f 0801 	mov.w	r8, #1
    1d28:	e012      	b.n	1d50 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    1d2a:	6923      	ldr	r3, [r4, #16]
    1d2c:	e7b1      	b.n	1c92 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    1d2e:	f387 8811 	msr	BASEPRI, r7
    1d32:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    1d36:	f06f 000f 	mvn.w	r0, #15
    1d3a:	e7b5      	b.n	1ca8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    1d3c:	4601      	mov	r1, r0
    1d3e:	4620      	mov	r0, r4
    1d40:	f001 fd4d 	bl	37de <adjust_owner_prio>
    1d44:	4681      	mov	r9, r0
    1d46:	e7cb      	b.n	1ce0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    1d48:	6921      	ldr	r1, [r4, #16]
    1d4a:	e7e4      	b.n	1d16 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1d4c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    1d50:	f1b8 0f00 	cmp.w	r8, #0
    1d54:	d106      	bne.n	1d64 <z_impl_k_mutex_lock+0xfc>
    1d56:	f385 8811 	msr	BASEPRI, r5
    1d5a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    1d5e:	f06f 000a 	mvn.w	r0, #10
    1d62:	e7a1      	b.n	1ca8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    1d64:	4629      	mov	r1, r5
    1d66:	4804      	ldr	r0, [pc, #16]	; (1d78 <z_impl_k_mutex_lock+0x110>)
    1d68:	f001 fd50 	bl	380c <z_reschedule>
	return -EAGAIN;
    1d6c:	f06f 000a 	mvn.w	r0, #10
    1d70:	e79a      	b.n	1ca8 <z_impl_k_mutex_lock+0x40>
    1d72:	bf00      	nop
    1d74:	20000670 	.word	0x20000670
    1d78:	20000670 	.word	0x20000670

00001d7c <z_impl_k_mutex_unlock>:

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    1d7c:	6882      	ldr	r2, [r0, #8]
    1d7e:	2a00      	cmp	r2, #0
    1d80:	d034      	beq.n	1dec <z_impl_k_mutex_unlock+0x70>
{
    1d82:	b538      	push	{r3, r4, r5, lr}
    1d84:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    1d86:	4b1c      	ldr	r3, [pc, #112]	; (1df8 <z_impl_k_mutex_unlock+0x7c>)
    1d88:	689b      	ldr	r3, [r3, #8]
    1d8a:	429a      	cmp	r2, r3
    1d8c:	d131      	bne.n	1df2 <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1d8e:	7bda      	ldrb	r2, [r3, #15]
    1d90:	3a01      	subs	r2, #1
    1d92:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    1d94:	68c3      	ldr	r3, [r0, #12]
    1d96:	2b01      	cmp	r3, #1
    1d98:	d005      	beq.n	1da6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    1d9a:	3b01      	subs	r3, #1
    1d9c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    1d9e:	f000 f8e3 	bl	1f68 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    1da2:	2000      	movs	r0, #0
}
    1da4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    1da6:	f04f 0320 	mov.w	r3, #32
    1daa:	f3ef 8511 	mrs	r5, BASEPRI
    1dae:	f383 8811 	msr	BASEPRI, r3
    1db2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    1db6:	6901      	ldr	r1, [r0, #16]
    1db8:	f001 fd11 	bl	37de <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    1dbc:	4620      	mov	r0, r4
    1dbe:	f001 fdf5 	bl	39ac <z_unpend_first_thread>
	mutex->owner = new_owner;
    1dc2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    1dc4:	b158      	cbz	r0, 1dde <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
    1dc6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1dca:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1dcc:	2300      	movs	r3, #0
    1dce:	6703      	str	r3, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    1dd0:	f001 fd44 	bl	385c <z_ready_thread>
		z_reschedule(&lock, key);
    1dd4:	4629      	mov	r1, r5
    1dd6:	4809      	ldr	r0, [pc, #36]	; (1dfc <z_impl_k_mutex_unlock+0x80>)
    1dd8:	f001 fd18 	bl	380c <z_reschedule>
    1ddc:	e7df      	b.n	1d9e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    1dde:	2300      	movs	r3, #0
    1de0:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    1de2:	f385 8811 	msr	BASEPRI, r5
    1de6:	f3bf 8f6f 	isb	sy
    1dea:	e7d8      	b.n	1d9e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    1dec:	f06f 0015 	mvn.w	r0, #21
}
    1df0:	4770      	bx	lr
		return -EPERM;
    1df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1df6:	e7d5      	b.n	1da4 <z_impl_k_mutex_unlock+0x28>
    1df8:	20000670 	.word	0x20000670
    1dfc:	20000670 	.word	0x20000670

00001e00 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    1e00:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    1e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1e06:	bf08      	it	eq
    1e08:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    1e0c:	d100      	bne.n	1e10 <add_thread_timeout+0x10>
#ifdef CONFIG_LEGACY_TIMEOUT_API
		timeout = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
#endif
		z_add_thread_timeout(thread, timeout);
	}
}
    1e0e:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1e10:	4902      	ldr	r1, [pc, #8]	; (1e1c <add_thread_timeout+0x1c>)
    1e12:	3018      	adds	r0, #24
    1e14:	f000 fc8a 	bl	272c <z_add_timeout>
    1e18:	e7f9      	b.n	1e0e <add_thread_timeout+0xe>
    1e1a:	bf00      	nop
    1e1c:	00003889 	.word	0x00003889

00001e20 <z_reset_time_slice>:
{
    1e20:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    1e22:	4b08      	ldr	r3, [pc, #32]	; (1e44 <z_reset_time_slice+0x24>)
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	b903      	cbnz	r3, 1e2a <z_reset_time_slice+0xa>
}
    1e28:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    1e2a:	f7fe fd03 	bl	834 <z_clock_elapsed>
    1e2e:	4603      	mov	r3, r0
    1e30:	4a04      	ldr	r2, [pc, #16]	; (1e44 <z_reset_time_slice+0x24>)
    1e32:	6810      	ldr	r0, [r2, #0]
    1e34:	4403      	add	r3, r0
    1e36:	4a04      	ldr	r2, [pc, #16]	; (1e48 <z_reset_time_slice+0x28>)
    1e38:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    1e3a:	2100      	movs	r1, #0
    1e3c:	f001 fe4d 	bl	3ada <z_set_timeout_expiry>
}
    1e40:	e7f2      	b.n	1e28 <z_reset_time_slice+0x8>
    1e42:	bf00      	nop
    1e44:	200006a8 	.word	0x200006a8
    1e48:	20000670 	.word	0x20000670

00001e4c <k_sched_time_slice_set>:
{
    1e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e50:	4606      	mov	r6, r0
    1e52:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    1e54:	2300      	movs	r3, #0
	__asm__ volatile(
    1e56:	f04f 0220 	mov.w	r2, #32
    1e5a:	f3ef 8711 	mrs	r7, BASEPRI
    1e5e:	f382 8811 	msr	BASEPRI, r2
    1e62:	f3bf 8f6f 	isb	sy
    1e66:	b9eb      	cbnz	r3, 1ea4 <k_sched_time_slice_set+0x58>
		_current_cpu->slice_ticks = 0;
    1e68:	2300      	movs	r3, #0
    1e6a:	4a0f      	ldr	r2, [pc, #60]	; (1ea8 <k_sched_time_slice_set+0x5c>)
    1e6c:	6113      	str	r3, [r2, #16]
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    1e6e:	0c75      	lsrs	r5, r6, #17
    1e70:	03f4      	lsls	r4, r6, #15
    1e72:	f240 30e7 	movw	r0, #999	; 0x3e7
    1e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e7a:	2300      	movs	r3, #0
    1e7c:	1820      	adds	r0, r4, r0
    1e7e:	f04f 0100 	mov.w	r1, #0
    1e82:	eb45 0101 	adc.w	r1, r5, r1
    1e86:	f7fe f929 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <k_sched_time_slice_set+0x60>)
    1e8c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    1e8e:	4b08      	ldr	r3, [pc, #32]	; (1eb0 <k_sched_time_slice_set+0x64>)
    1e90:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    1e94:	f7ff ffc4 	bl	1e20 <z_reset_time_slice>
	__asm__ volatile(
    1e98:	f387 8811 	msr	BASEPRI, r7
    1e9c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    1ea0:	2301      	movs	r3, #1
    1ea2:	e7e0      	b.n	1e66 <k_sched_time_slice_set+0x1a>
}
    1ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ea8:	20000670 	.word	0x20000670
    1eac:	200006a8 	.word	0x200006a8
    1eb0:	200006a4 	.word	0x200006a4

00001eb4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    1eb4:	2300      	movs	r3, #0
	__asm__ volatile(
    1eb6:	f04f 0220 	mov.w	r2, #32
    1eba:	f3ef 8111 	mrs	r1, BASEPRI
    1ebe:	f382 8811 	msr	BASEPRI, r2
    1ec2:	f3bf 8f6f 	isb	sy
    1ec6:	b953      	cbnz	r3, 1ede <k_sched_lock+0x2a>
    1ec8:	4b05      	ldr	r3, [pc, #20]	; (1ee0 <k_sched_lock+0x2c>)
    1eca:	689a      	ldr	r2, [r3, #8]
    1ecc:	7bd3      	ldrb	r3, [r2, #15]
    1ece:	3b01      	subs	r3, #1
    1ed0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    1ed2:	f381 8811 	msr	BASEPRI, r1
    1ed6:	f3bf 8f6f 	isb	sy
    1eda:	2301      	movs	r3, #1
    1edc:	e7f3      	b.n	1ec6 <k_sched_lock+0x12>
		z_sched_lock();
	}
}
    1ede:	4770      	bx	lr
    1ee0:	20000670 	.word	0x20000670

00001ee4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    1ee4:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <z_priq_dumb_remove+0x2c>)
    1ee6:	4283      	cmp	r3, r0
    1ee8:	d008      	beq.n	1efc <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    1eea:	684a      	ldr	r2, [r1, #4]
    1eec:	680b      	ldr	r3, [r1, #0]
    1eee:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    1ef0:	684a      	ldr	r2, [r1, #4]
    1ef2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    1ef4:	2300      	movs	r3, #0
    1ef6:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    1ef8:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    1efa:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    1efc:	3b28      	subs	r3, #40	; 0x28
    1efe:	689b      	ldr	r3, [r3, #8]
    1f00:	428b      	cmp	r3, r1
    1f02:	d1f2      	bne.n	1eea <z_priq_dumb_remove+0x6>
	u8_t state = thread->base.thread_state;
    1f04:	7b4b      	ldrb	r3, [r1, #13]
    1f06:	f013 0f1f 	tst.w	r3, #31
    1f0a:	d0ee      	beq.n	1eea <z_priq_dumb_remove+0x6>
    1f0c:	e7f5      	b.n	1efa <z_priq_dumb_remove+0x16>
    1f0e:	bf00      	nop
    1f10:	20000698 	.word	0x20000698

00001f14 <update_cache>:
{
    1f14:	b570      	push	{r4, r5, r6, lr}
    1f16:	4605      	mov	r5, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    1f18:	4e12      	ldr	r6, [pc, #72]	; (1f64 <update_cache+0x50>)
    1f1a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    1f1e:	f001 fc96 	bl	384e <z_priq_dumb_best>
    1f22:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    1f24:	68b3      	ldr	r3, [r6, #8]
    1f26:	7b5a      	ldrb	r2, [r3, #13]
    1f28:	f012 0f20 	tst.w	r2, #32
    1f2c:	d002      	beq.n	1f34 <update_cache+0x20>
		_current->base.thread_state |= _THREAD_DEAD;
    1f2e:	f042 0208 	orr.w	r2, r2, #8
    1f32:	735a      	strb	r2, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    1f34:	b164      	cbz	r4, 1f50 <update_cache+0x3c>
	if (preempt_ok != 0) {
    1f36:	b975      	cbnz	r5, 1f56 <update_cache+0x42>
    1f38:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
    1f3a:	f012 0f1f 	tst.w	r2, #31
    1f3e:	d10a      	bne.n	1f56 <update_cache+0x42>
	return node->next != NULL;
    1f40:	69a2      	ldr	r2, [r4, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    1f42:	b942      	cbnz	r2, 1f56 <update_cache+0x42>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    1f44:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    1f46:	2a7f      	cmp	r2, #127	; 0x7f
    1f48:	d905      	bls.n	1f56 <update_cache+0x42>
		_kernel.ready_q.cache = _current;
    1f4a:	4a06      	ldr	r2, [pc, #24]	; (1f64 <update_cache+0x50>)
    1f4c:	6253      	str	r3, [r2, #36]	; 0x24
    1f4e:	e008      	b.n	1f62 <update_cache+0x4e>
	return thread ? thread : _current_cpu->idle_thread;
    1f50:	4a04      	ldr	r2, [pc, #16]	; (1f64 <update_cache+0x50>)
    1f52:	68d4      	ldr	r4, [r2, #12]
    1f54:	e7ef      	b.n	1f36 <update_cache+0x22>
		if (thread != _current) {
    1f56:	42a3      	cmp	r3, r4
    1f58:	d001      	beq.n	1f5e <update_cache+0x4a>
			z_reset_time_slice();
    1f5a:	f7ff ff61 	bl	1e20 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    1f5e:	4b01      	ldr	r3, [pc, #4]	; (1f64 <update_cache+0x50>)
    1f60:	625c      	str	r4, [r3, #36]	; 0x24
}
    1f62:	bd70      	pop	{r4, r5, r6, pc}
    1f64:	20000670 	.word	0x20000670

00001f68 <k_sched_unlock>:
{
    1f68:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    1f6a:	2300      	movs	r3, #0
	__asm__ volatile(
    1f6c:	f04f 0220 	mov.w	r2, #32
    1f70:	f3ef 8411 	mrs	r4, BASEPRI
    1f74:	f382 8811 	msr	BASEPRI, r2
    1f78:	f3bf 8f6f 	isb	sy
    1f7c:	b96b      	cbnz	r3, 1f9a <k_sched_unlock+0x32>
		++_current->base.sched_locked;
    1f7e:	4b0c      	ldr	r3, [pc, #48]	; (1fb0 <k_sched_unlock+0x48>)
    1f80:	689a      	ldr	r2, [r3, #8]
    1f82:	7bd3      	ldrb	r3, [r2, #15]
    1f84:	3301      	adds	r3, #1
    1f86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    1f88:	2000      	movs	r0, #0
    1f8a:	f7ff ffc3 	bl	1f14 <update_cache>
	__asm__ volatile(
    1f8e:	f384 8811 	msr	BASEPRI, r4
    1f92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    1f96:	2301      	movs	r3, #1
    1f98:	e7f0      	b.n	1f7c <k_sched_unlock+0x14>
	__asm__ volatile(
    1f9a:	f04f 0320 	mov.w	r3, #32
    1f9e:	f3ef 8011 	mrs	r0, BASEPRI
    1fa2:	f383 8811 	msr	BASEPRI, r3
    1fa6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    1faa:	f001 fc42 	bl	3832 <z_reschedule_irqlock>
}
    1fae:	bd10      	pop	{r4, pc}
    1fb0:	20000670 	.word	0x20000670

00001fb4 <ready_thread>:
{
    1fb4:	b538      	push	{r3, r4, r5, lr}
    1fb6:	4605      	mov	r5, r0
	u8_t state = thread->base.thread_state;
    1fb8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1fba:	f013 0f1f 	tst.w	r3, #31
    1fbe:	d105      	bne.n	1fcc <ready_thread+0x18>
    1fc0:	6983      	ldr	r3, [r0, #24]
    1fc2:	b10b      	cbz	r3, 1fc8 <ready_thread+0x14>
    1fc4:	2300      	movs	r3, #0
    1fc6:	e002      	b.n	1fce <ready_thread+0x1a>
    1fc8:	2301      	movs	r3, #1
    1fca:	e000      	b.n	1fce <ready_thread+0x1a>
    1fcc:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    1fce:	b30b      	cbz	r3, 2014 <ready_thread+0x60>
	return list->head == list;
    1fd0:	4b15      	ldr	r3, [pc, #84]	; (2028 <ready_thread+0x74>)
    1fd2:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1fd6:	429c      	cmp	r4, r3
    1fd8:	d024      	beq.n	2024 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1fda:	b164      	cbz	r4, 1ff6 <ready_thread+0x42>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    1fdc:	4621      	mov	r1, r4
    1fde:	4628      	mov	r0, r5
    1fe0:	f001 fc0a 	bl	37f8 <z_is_t1_higher_prio_than_t2>
    1fe4:	b9b8      	cbnz	r0, 2016 <ready_thread+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    1fe6:	b134      	cbz	r4, 1ff6 <ready_thread+0x42>
	return (node == list->tail) ? NULL : node->next;
    1fe8:	4b0f      	ldr	r3, [pc, #60]	; (2028 <ready_thread+0x74>)
    1fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1fec:	429c      	cmp	r4, r3
    1fee:	d002      	beq.n	1ff6 <ready_thread+0x42>
    1ff0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1ff2:	2c00      	cmp	r4, #0
    1ff4:	d1f1      	bne.n	1fda <ready_thread+0x26>
	node->next = list;
    1ff6:	4b0c      	ldr	r3, [pc, #48]	; (2028 <ready_thread+0x74>)
    1ff8:	f103 0228 	add.w	r2, r3, #40	; 0x28
    1ffc:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    1ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2000:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    2002:	6015      	str	r5, [r2, #0]
	list->tail = node;
    2004:	62dd      	str	r5, [r3, #44]	; 0x2c
	thread->base.thread_state |= states;
    2006:	7b6b      	ldrb	r3, [r5, #13]
    2008:	f063 037f 	orn	r3, r3, #127	; 0x7f
    200c:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    200e:	2000      	movs	r0, #0
    2010:	f7ff ff80 	bl	1f14 <update_cache>
}
    2014:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
    2016:	6863      	ldr	r3, [r4, #4]
    2018:	606b      	str	r3, [r5, #4]
	node->next = successor;
    201a:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    201c:	6863      	ldr	r3, [r4, #4]
    201e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    2020:	6065      	str	r5, [r4, #4]
}
    2022:	e7f0      	b.n	2006 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2024:	2400      	movs	r4, #0
    2026:	e7d8      	b.n	1fda <ready_thread+0x26>
    2028:	20000670 	.word	0x20000670

0000202c <z_sched_start>:
{
    202c:	b510      	push	{r4, lr}
    202e:	f04f 0320 	mov.w	r3, #32
    2032:	f3ef 8411 	mrs	r4, BASEPRI
    2036:	f383 8811 	msr	BASEPRI, r3
    203a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    203e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    2040:	f013 0f04 	tst.w	r3, #4
    2044:	d104      	bne.n	2050 <z_sched_start+0x24>
	__asm__ volatile(
    2046:	f384 8811 	msr	BASEPRI, r4
    204a:	f3bf 8f6f 	isb	sy
}
    204e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2050:	f023 0304 	bic.w	r3, r3, #4
    2054:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    2056:	f7ff ffad 	bl	1fb4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    205a:	4621      	mov	r1, r4
    205c:	4801      	ldr	r0, [pc, #4]	; (2064 <z_sched_start+0x38>)
    205e:	f001 fbd5 	bl	380c <z_reschedule>
    2062:	e7f4      	b.n	204e <z_sched_start+0x22>
    2064:	200006a4 	.word	0x200006a4

00002068 <z_move_thread_to_end_of_prio_q>:
{
    2068:	b570      	push	{r4, r5, r6, lr}
    206a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    206c:	2300      	movs	r3, #0
	__asm__ volatile(
    206e:	f04f 0220 	mov.w	r2, #32
    2072:	f3ef 8611 	mrs	r6, BASEPRI
    2076:	f382 8811 	msr	BASEPRI, r2
    207a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    207e:	e026      	b.n	20ce <z_move_thread_to_end_of_prio_q+0x66>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2080:	4629      	mov	r1, r5
    2082:	4821      	ldr	r0, [pc, #132]	; (2108 <z_move_thread_to_end_of_prio_q+0xa0>)
    2084:	f7ff ff2e 	bl	1ee4 <z_priq_dumb_remove>
    2088:	e026      	b.n	20d8 <z_move_thread_to_end_of_prio_q+0x70>
	node->prev = successor->prev;
    208a:	6863      	ldr	r3, [r4, #4]
    208c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    208e:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    2090:	6863      	ldr	r3, [r4, #4]
    2092:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    2094:	6065      	str	r5, [r4, #4]
}
    2096:	e009      	b.n	20ac <z_move_thread_to_end_of_prio_q+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2098:	2400      	movs	r4, #0
    209a:	e022      	b.n	20e2 <z_move_thread_to_end_of_prio_q+0x7a>
	node->next = list;
    209c:	4b1b      	ldr	r3, [pc, #108]	; (210c <z_move_thread_to_end_of_prio_q+0xa4>)
    209e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    20a2:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    20a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20a6:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    20a8:	6015      	str	r5, [r2, #0]
	list->tail = node;
    20aa:	62dd      	str	r5, [r3, #44]	; 0x2c
	thread->base.thread_state |= states;
    20ac:	7b6b      	ldrb	r3, [r5, #13]
    20ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    20b2:	736b      	strb	r3, [r5, #13]
		update_cache(thread == _current);
    20b4:	4b15      	ldr	r3, [pc, #84]	; (210c <z_move_thread_to_end_of_prio_q+0xa4>)
    20b6:	6898      	ldr	r0, [r3, #8]
    20b8:	42a8      	cmp	r0, r5
    20ba:	bf14      	ite	ne
    20bc:	2000      	movne	r0, #0
    20be:	2001      	moveq	r0, #1
    20c0:	f7ff ff28 	bl	1f14 <update_cache>
	__asm__ volatile(
    20c4:	f386 8811 	msr	BASEPRI, r6
    20c8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    20cc:	2301      	movs	r3, #1
    20ce:	b9d3      	cbnz	r3, 2106 <z_move_thread_to_end_of_prio_q+0x9e>
		if (z_is_thread_queued(thread)) {
    20d0:	f995 300d 	ldrsb.w	r3, [r5, #13]
    20d4:	2b00      	cmp	r3, #0
    20d6:	dbd3      	blt.n	2080 <z_move_thread_to_end_of_prio_q+0x18>
	return list->head == list;
    20d8:	4b0c      	ldr	r3, [pc, #48]	; (210c <z_move_thread_to_end_of_prio_q+0xa4>)
    20da:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20de:	429c      	cmp	r4, r3
    20e0:	d0da      	beq.n	2098 <z_move_thread_to_end_of_prio_q+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    20e2:	2c00      	cmp	r4, #0
    20e4:	d0da      	beq.n	209c <z_move_thread_to_end_of_prio_q+0x34>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    20e6:	4621      	mov	r1, r4
    20e8:	4628      	mov	r0, r5
    20ea:	f001 fb85 	bl	37f8 <z_is_t1_higher_prio_than_t2>
    20ee:	2800      	cmp	r0, #0
    20f0:	d1cb      	bne.n	208a <z_move_thread_to_end_of_prio_q+0x22>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    20f2:	2c00      	cmp	r4, #0
    20f4:	d0d2      	beq.n	209c <z_move_thread_to_end_of_prio_q+0x34>
	return (node == list->tail) ? NULL : node->next;
    20f6:	4b05      	ldr	r3, [pc, #20]	; (210c <z_move_thread_to_end_of_prio_q+0xa4>)
    20f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    20fa:	429c      	cmp	r4, r3
    20fc:	d0ce      	beq.n	209c <z_move_thread_to_end_of_prio_q+0x34>
    20fe:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2100:	2c00      	cmp	r4, #0
    2102:	d1ee      	bne.n	20e2 <z_move_thread_to_end_of_prio_q+0x7a>
    2104:	e7ca      	b.n	209c <z_move_thread_to_end_of_prio_q+0x34>
}
    2106:	bd70      	pop	{r4, r5, r6, pc}
    2108:	20000698 	.word	0x20000698
    210c:	20000670 	.word	0x20000670

00002110 <z_time_slice>:
{
    2110:	b508      	push	{r3, lr}
	if (pending_current == _current) {
    2112:	4b17      	ldr	r3, [pc, #92]	; (2170 <z_time_slice+0x60>)
    2114:	689b      	ldr	r3, [r3, #8]
    2116:	4a17      	ldr	r2, [pc, #92]	; (2174 <z_time_slice+0x64>)
    2118:	6812      	ldr	r2, [r2, #0]
    211a:	4293      	cmp	r3, r2
    211c:	d017      	beq.n	214e <z_time_slice+0x3e>
	pending_current = NULL;
    211e:	4a15      	ldr	r2, [pc, #84]	; (2174 <z_time_slice+0x64>)
    2120:	2100      	movs	r1, #0
    2122:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2124:	4a14      	ldr	r2, [pc, #80]	; (2178 <z_time_slice+0x68>)
    2126:	6812      	ldr	r2, [r2, #0]
    2128:	b16a      	cbz	r2, 2146 <z_time_slice+0x36>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    212a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_thread_timeout_active(thread);
    212c:	2a7f      	cmp	r2, #127	; 0x7f
    212e:	d80a      	bhi.n	2146 <z_time_slice+0x36>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2130:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2134:	4a11      	ldr	r2, [pc, #68]	; (217c <z_time_slice+0x6c>)
    2136:	6812      	ldr	r2, [r2, #0]
    2138:	4291      	cmp	r1, r2
    213a:	db04      	blt.n	2146 <z_time_slice+0x36>
		&& !z_is_idle_thread_object(thread)
    213c:	4a10      	ldr	r2, [pc, #64]	; (2180 <z_time_slice+0x70>)
    213e:	4293      	cmp	r3, r2
    2140:	d001      	beq.n	2146 <z_time_slice+0x36>
	return node->next != NULL;
    2142:	699a      	ldr	r2, [r3, #24]
		&& !z_is_thread_timeout_active(thread);
    2144:	b132      	cbz	r2, 2154 <z_time_slice+0x44>
		_current_cpu->slice_ticks = 0;
    2146:	4b0a      	ldr	r3, [pc, #40]	; (2170 <z_time_slice+0x60>)
    2148:	2200      	movs	r2, #0
    214a:	611a      	str	r2, [r3, #16]
}
    214c:	bd08      	pop	{r3, pc}
		z_reset_time_slice();
    214e:	f7ff fe67 	bl	1e20 <z_reset_time_slice>
		return;
    2152:	e7fb      	b.n	214c <z_time_slice+0x3c>
		if (ticks >= _current_cpu->slice_ticks) {
    2154:	4a06      	ldr	r2, [pc, #24]	; (2170 <z_time_slice+0x60>)
    2156:	6912      	ldr	r2, [r2, #16]
    2158:	4282      	cmp	r2, r0
    215a:	dd03      	ble.n	2164 <z_time_slice+0x54>
			_current_cpu->slice_ticks -= ticks;
    215c:	1a10      	subs	r0, r2, r0
    215e:	4b04      	ldr	r3, [pc, #16]	; (2170 <z_time_slice+0x60>)
    2160:	6118      	str	r0, [r3, #16]
    2162:	e7f3      	b.n	214c <z_time_slice+0x3c>
			z_move_thread_to_end_of_prio_q(_current);
    2164:	4618      	mov	r0, r3
    2166:	f7ff ff7f 	bl	2068 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    216a:	f7ff fe59 	bl	1e20 <z_reset_time_slice>
    216e:	e7ed      	b.n	214c <z_time_slice+0x3c>
    2170:	20000670 	.word	0x20000670
    2174:	200006a0 	.word	0x200006a0
    2178:	200006a8 	.word	0x200006a8
    217c:	200006a4 	.word	0x200006a4
    2180:	20000588 	.word	0x20000588

00002184 <z_impl_k_thread_suspend>:
{
    2184:	b538      	push	{r3, r4, r5, lr}
    2186:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2188:	3018      	adds	r0, #24
    218a:	f001 fc72 	bl	3a72 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    218e:	2300      	movs	r3, #0
	__asm__ volatile(
    2190:	f04f 0220 	mov.w	r2, #32
    2194:	f3ef 8511 	mrs	r5, BASEPRI
    2198:	f382 8811 	msr	BASEPRI, r2
    219c:	f3bf 8f6f 	isb	sy
    21a0:	e010      	b.n	21c4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    21a2:	7b63      	ldrb	r3, [r4, #13]
    21a4:	f043 0310 	orr.w	r3, r3, #16
    21a8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    21aa:	4b15      	ldr	r3, [pc, #84]	; (2200 <z_impl_k_thread_suspend+0x7c>)
    21ac:	6898      	ldr	r0, [r3, #8]
    21ae:	42a0      	cmp	r0, r4
    21b0:	bf14      	ite	ne
    21b2:	2000      	movne	r0, #0
    21b4:	2001      	moveq	r0, #1
    21b6:	f7ff fead 	bl	1f14 <update_cache>
	__asm__ volatile(
    21ba:	f385 8811 	msr	BASEPRI, r5
    21be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    21c2:	2301      	movs	r3, #1
    21c4:	b963      	cbnz	r3, 21e0 <z_impl_k_thread_suspend+0x5c>
		if (z_is_thread_queued(thread)) {
    21c6:	f994 300d 	ldrsb.w	r3, [r4, #13]
    21ca:	2b00      	cmp	r3, #0
    21cc:	dae9      	bge.n	21a2 <z_impl_k_thread_suspend+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    21ce:	4621      	mov	r1, r4
    21d0:	480c      	ldr	r0, [pc, #48]	; (2204 <z_impl_k_thread_suspend+0x80>)
    21d2:	f7ff fe87 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    21d6:	7b63      	ldrb	r3, [r4, #13]
    21d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21dc:	7363      	strb	r3, [r4, #13]
}
    21de:	e7e0      	b.n	21a2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    21e0:	4b07      	ldr	r3, [pc, #28]	; (2200 <z_impl_k_thread_suspend+0x7c>)
    21e2:	689b      	ldr	r3, [r3, #8]
    21e4:	42a3      	cmp	r3, r4
    21e6:	d000      	beq.n	21ea <z_impl_k_thread_suspend+0x66>
}
    21e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    21ea:	f04f 0320 	mov.w	r3, #32
    21ee:	f3ef 8011 	mrs	r0, BASEPRI
    21f2:	f383 8811 	msr	BASEPRI, r3
    21f6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    21fa:	f001 fb1a 	bl	3832 <z_reschedule_irqlock>
    21fe:	e7f3      	b.n	21e8 <z_impl_k_thread_suspend+0x64>
    2200:	20000670 	.word	0x20000670
    2204:	20000698 	.word	0x20000698

00002208 <z_thread_single_abort>:
{
    2208:	b570      	push	{r4, r5, r6, lr}
    220a:	4605      	mov	r5, r0
	if (thread->fn_abort != NULL) {
    220c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    220e:	b103      	cbz	r3, 2212 <z_thread_single_abort+0xa>
		thread->fn_abort();
    2210:	4798      	blx	r3
    2212:	f105 0018 	add.w	r0, r5, #24
    2216:	f001 fc2c 	bl	3a72 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    221a:	2300      	movs	r3, #0
    221c:	f04f 0220 	mov.w	r2, #32
    2220:	f3ef 8611 	mrs	r6, BASEPRI
    2224:	f382 8811 	msr	BASEPRI, r2
    2228:	f3bf 8f6f 	isb	sy
    222c:	e01f      	b.n	226e <z_thread_single_abort+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    222e:	2201      	movs	r2, #1
    2230:	e027      	b.n	2282 <z_thread_single_abort+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq,
    2232:	4629      	mov	r1, r5
    2234:	482a      	ldr	r0, [pc, #168]	; (22e0 <z_thread_single_abort+0xd8>)
    2236:	f7ff fe55 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    223a:	7b6b      	ldrb	r3, [r5, #13]
    223c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2240:	736b      	strb	r3, [r5, #13]
}
    2242:	e024      	b.n	228e <z_thread_single_abort+0x86>
			if (z_is_thread_pending(thread)) {
    2244:	f013 0f02 	tst.w	r3, #2
    2248:	d029      	beq.n	229e <z_thread_single_abort+0x96>
				_priq_wait_remove(&pended_on(thread)->waitq,
    224a:	4628      	mov	r0, r5
    224c:	f001 fad2 	bl	37f4 <pended_on>
    2250:	4629      	mov	r1, r5
    2252:	f7ff fe47 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2256:	7b6b      	ldrb	r3, [r5, #13]
    2258:	f023 0302 	bic.w	r3, r3, #2
    225c:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
    225e:	2300      	movs	r3, #0
    2260:	60ab      	str	r3, [r5, #8]
    2262:	e01c      	b.n	229e <z_thread_single_abort+0x96>
	__asm__ volatile(
    2264:	f386 8811 	msr	BASEPRI, r6
    2268:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    226c:	2301      	movs	r3, #1
    226e:	461a      	mov	r2, r3
    2270:	2b00      	cmp	r3, #0
    2272:	d134      	bne.n	22de <z_thread_single_abort+0xd6>
	u8_t state = thread->base.thread_state;
    2274:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2276:	f013 0f1f 	tst.w	r3, #31
    227a:	d102      	bne.n	2282 <z_thread_single_abort+0x7a>
    227c:	69a9      	ldr	r1, [r5, #24]
    227e:	2900      	cmp	r1, #0
    2280:	d0d5      	beq.n	222e <z_thread_single_abort+0x26>
		if (z_is_thread_ready(thread)) {
    2282:	f012 0f01 	tst.w	r2, #1
    2286:	d0dd      	beq.n	2244 <z_thread_single_abort+0x3c>
			if (z_is_thread_queued(thread)) {
    2288:	f013 0f80 	tst.w	r3, #128	; 0x80
    228c:	d1d1      	bne.n	2232 <z_thread_single_abort+0x2a>
			update_cache(thread == _current);
    228e:	4b15      	ldr	r3, [pc, #84]	; (22e4 <z_thread_single_abort+0xdc>)
    2290:	6898      	ldr	r0, [r3, #8]
    2292:	42a8      	cmp	r0, r5
    2294:	bf14      	ite	ne
    2296:	2000      	movne	r0, #0
    2298:	2001      	moveq	r0, #1
    229a:	f7ff fe3b 	bl	1f14 <update_cache>
		thread->base.thread_state |= mask;
    229e:	7b6b      	ldrb	r3, [r5, #13]
    22a0:	f043 0308 	orr.w	r3, r3, #8
    22a4:	736b      	strb	r3, [r5, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    22a6:	f105 0328 	add.w	r3, r5, #40	; 0x28
	return list->head == list;
    22aa:	6aac      	ldr	r4, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    22ac:	42a3      	cmp	r3, r4
    22ae:	d0d9      	beq.n	2264 <z_thread_single_abort+0x5c>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    22b0:	2c00      	cmp	r4, #0
    22b2:	d0d7      	beq.n	2264 <z_thread_single_abort+0x5c>
    22b4:	f104 0018 	add.w	r0, r4, #24
    22b8:	f001 fbdb 	bl	3a72 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    22bc:	4620      	mov	r0, r4
    22be:	f001 fa99 	bl	37f4 <pended_on>
    22c2:	4621      	mov	r1, r4
    22c4:	f7ff fe0e 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    22c8:	7b63      	ldrb	r3, [r4, #13]
    22ca:	f023 0302 	bic.w	r3, r3, #2
    22ce:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
    22d0:	2300      	movs	r3, #0
    22d2:	60a3      	str	r3, [r4, #8]
    22d4:	6723      	str	r3, [r4, #112]	; 0x70
			ready_thread(waiter);
    22d6:	4620      	mov	r0, r4
    22d8:	f7ff fe6c 	bl	1fb4 <ready_thread>
    22dc:	e7e3      	b.n	22a6 <z_thread_single_abort+0x9e>
}
    22de:	bd70      	pop	{r4, r5, r6, pc}
    22e0:	20000698 	.word	0x20000698
    22e4:	20000670 	.word	0x20000670

000022e8 <unready_thread>:
{
    22e8:	b510      	push	{r4, lr}
    22ea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    22ec:	f990 300d 	ldrsb.w	r3, [r0, #13]
    22f0:	2b00      	cmp	r3, #0
    22f2:	db08      	blt.n	2306 <unready_thread+0x1e>
	update_cache(thread == _current);
    22f4:	4b08      	ldr	r3, [pc, #32]	; (2318 <unready_thread+0x30>)
    22f6:	6898      	ldr	r0, [r3, #8]
    22f8:	42a0      	cmp	r0, r4
    22fa:	bf14      	ite	ne
    22fc:	2000      	movne	r0, #0
    22fe:	2001      	moveq	r0, #1
    2300:	f7ff fe08 	bl	1f14 <update_cache>
}
    2304:	bd10      	pop	{r4, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2306:	4601      	mov	r1, r0
    2308:	4804      	ldr	r0, [pc, #16]	; (231c <unready_thread+0x34>)
    230a:	f7ff fdeb 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    230e:	7b63      	ldrb	r3, [r4, #13]
    2310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2314:	7363      	strb	r3, [r4, #13]
}
    2316:	e7ed      	b.n	22f4 <unready_thread+0xc>
    2318:	20000670 	.word	0x20000670
    231c:	20000698 	.word	0x20000698

00002320 <z_pend_curr>:
{
    2320:	b510      	push	{r4, lr}
    2322:	460c      	mov	r4, r1
    2324:	4611      	mov	r1, r2
	pending_current = _current;
    2326:	4b06      	ldr	r3, [pc, #24]	; (2340 <z_pend_curr+0x20>)
    2328:	6898      	ldr	r0, [r3, #8]
    232a:	4b06      	ldr	r3, [pc, #24]	; (2344 <z_pend_curr+0x24>)
    232c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    232e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2332:	f001 fb1a 	bl	396a <pend>
	ret = arch_swap(key);
    2336:	4620      	mov	r0, r4
    2338:	f7fe faf8 	bl	92c <arch_swap>
}
    233c:	bd10      	pop	{r4, pc}
    233e:	bf00      	nop
    2340:	20000670 	.word	0x20000670
    2344:	200006a0 	.word	0x200006a0

00002348 <z_set_prio>:
{
    2348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    234c:	4604      	mov	r4, r0
    234e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    2350:	2300      	movs	r3, #0
	__asm__ volatile(
    2352:	f04f 0220 	mov.w	r2, #32
    2356:	f3ef 8611 	mrs	r6, BASEPRI
    235a:	f382 8811 	msr	BASEPRI, r2
    235e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    2362:	4698      	mov	r8, r3
    2364:	e008      	b.n	2378 <z_set_prio+0x30>
		if (need_sched) {
    2366:	f012 0801 	ands.w	r8, r2, #1
    236a:	d111      	bne.n	2390 <z_set_prio+0x48>
			thread->base.prio = prio;
    236c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    236e:	f386 8811 	msr	BASEPRI, r6
    2372:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    2376:	2301      	movs	r3, #1
    2378:	461a      	mov	r2, r3
    237a:	2b00      	cmp	r3, #0
    237c:	d136      	bne.n	23ec <z_set_prio+0xa4>
	u8_t state = thread->base.thread_state;
    237e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2380:	f013 0f1f 	tst.w	r3, #31
    2384:	d1ef      	bne.n	2366 <z_set_prio+0x1e>
	return node->next != NULL;
    2386:	69a3      	ldr	r3, [r4, #24]
    2388:	2b00      	cmp	r3, #0
    238a:	d1ec      	bne.n	2366 <z_set_prio+0x1e>
    238c:	2201      	movs	r2, #1
    238e:	e7ea      	b.n	2366 <z_set_prio+0x1e>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2390:	4d18      	ldr	r5, [pc, #96]	; (23f4 <z_set_prio+0xac>)
    2392:	f105 0928 	add.w	r9, r5, #40	; 0x28
    2396:	4621      	mov	r1, r4
    2398:	4648      	mov	r0, r9
    239a:	f7ff fda3 	bl	1ee4 <z_priq_dumb_remove>
				thread->base.prio = prio;
    239e:	73a7      	strb	r7, [r4, #14]
	return list->head == list;
    23a0:	6aad      	ldr	r5, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    23a2:	454d      	cmp	r5, r9
    23a4:	d020      	beq.n	23e8 <z_set_prio+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23a6:	b165      	cbz	r5, 23c2 <z_set_prio+0x7a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    23a8:	4629      	mov	r1, r5
    23aa:	4620      	mov	r0, r4
    23ac:	f001 fa24 	bl	37f8 <z_is_t1_higher_prio_than_t2>
    23b0:	b998      	cbnz	r0, 23da <z_set_prio+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    23b2:	b135      	cbz	r5, 23c2 <z_set_prio+0x7a>
	return (node == list->tail) ? NULL : node->next;
    23b4:	4b0f      	ldr	r3, [pc, #60]	; (23f4 <z_set_prio+0xac>)
    23b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    23b8:	429d      	cmp	r5, r3
    23ba:	d002      	beq.n	23c2 <z_set_prio+0x7a>
    23bc:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23be:	2d00      	cmp	r5, #0
    23c0:	d1f1      	bne.n	23a6 <z_set_prio+0x5e>
	node->next = list;
    23c2:	4b0c      	ldr	r3, [pc, #48]	; (23f4 <z_set_prio+0xac>)
    23c4:	f103 0228 	add.w	r2, r3, #40	; 0x28
    23c8:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    23ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23cc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    23ce:	6014      	str	r4, [r2, #0]
	list->tail = node;
    23d0:	62dc      	str	r4, [r3, #44]	; 0x2c
			update_cache(1);
    23d2:	2001      	movs	r0, #1
    23d4:	f7ff fd9e 	bl	1f14 <update_cache>
    23d8:	e7c9      	b.n	236e <z_set_prio+0x26>
	node->prev = successor->prev;
    23da:	686b      	ldr	r3, [r5, #4]
    23dc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    23de:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
    23e0:	686b      	ldr	r3, [r5, #4]
    23e2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    23e4:	606c      	str	r4, [r5, #4]
}
    23e6:	e7f4      	b.n	23d2 <z_set_prio+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23e8:	2500      	movs	r5, #0
    23ea:	e7dc      	b.n	23a6 <z_set_prio+0x5e>
}
    23ec:	4640      	mov	r0, r8
    23ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23f2:	bf00      	nop
    23f4:	20000670 	.word	0x20000670

000023f8 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
    23f8:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <z_sched_init+0x18>)
    23fc:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2400:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
    2402:	62da      	str	r2, [r3, #44]	; 0x2c
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2404:	2100      	movs	r1, #0
    2406:	4608      	mov	r0, r1
    2408:	f7ff fd20 	bl	1e4c <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    240c:	bd08      	pop	{r3, pc}
    240e:	bf00      	nop
    2410:	20000670 	.word	0x20000670

00002414 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
    2416:	4b2b      	ldr	r3, [pc, #172]	; (24c4 <z_impl_k_yield+0xb0>)
    2418:	689a      	ldr	r2, [r3, #8]
    241a:	4b2b      	ldr	r3, [pc, #172]	; (24c8 <z_impl_k_yield+0xb4>)
    241c:	429a      	cmp	r2, r3
    241e:	d046      	beq.n	24ae <z_impl_k_yield+0x9a>
		LOCKED(&sched_spinlock) {
    2420:	2300      	movs	r3, #0
	__asm__ volatile(
    2422:	f04f 0220 	mov.w	r2, #32
    2426:	f3ef 8611 	mrs	r6, BASEPRI
    242a:	f382 8811 	msr	BASEPRI, r2
    242e:	f3bf 8f6f 	isb	sy
    2432:	e01e      	b.n	2472 <z_impl_k_yield+0x5e>
	node->prev = successor->prev;
    2434:	6863      	ldr	r3, [r4, #4]
    2436:	606b      	str	r3, [r5, #4]
	node->next = successor;
    2438:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    243a:	6863      	ldr	r3, [r4, #4]
    243c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    243e:	6065      	str	r5, [r4, #4]
}
    2440:	e009      	b.n	2456 <z_impl_k_yield+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2442:	2400      	movs	r4, #0
    2444:	e021      	b.n	248a <z_impl_k_yield+0x76>
	node->next = list;
    2446:	4b1f      	ldr	r3, [pc, #124]	; (24c4 <z_impl_k_yield+0xb0>)
    2448:	f103 0228 	add.w	r2, r3, #40	; 0x28
    244c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2450:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    2452:	6015      	str	r5, [r2, #0]
	list->tail = node;
    2454:	62dd      	str	r5, [r3, #44]	; 0x2c
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
			z_mark_thread_as_queued(_current);
    2456:	4b1b      	ldr	r3, [pc, #108]	; (24c4 <z_impl_k_yield+0xb0>)
    2458:	689a      	ldr	r2, [r3, #8]
	thread->base.thread_state |= states;
    245a:	7b53      	ldrb	r3, [r2, #13]
    245c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2460:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    2462:	2001      	movs	r0, #1
    2464:	f7ff fd56 	bl	1f14 <update_cache>
	__asm__ volatile(
    2468:	f386 8811 	msr	BASEPRI, r6
    246c:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
    2470:	2301      	movs	r3, #1
    2472:	b9e3      	cbnz	r3, 24ae <z_impl_k_yield+0x9a>
				_priq_run_remove(&_kernel.ready_q.runq,
    2474:	4c13      	ldr	r4, [pc, #76]	; (24c4 <z_impl_k_yield+0xb0>)
    2476:	f104 0728 	add.w	r7, r4, #40	; 0x28
    247a:	68a1      	ldr	r1, [r4, #8]
    247c:	4638      	mov	r0, r7
    247e:	f7ff fd31 	bl	1ee4 <z_priq_dumb_remove>
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2482:	68a5      	ldr	r5, [r4, #8]
	return list->head == list;
    2484:	6aa4      	ldr	r4, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2486:	42bc      	cmp	r4, r7
    2488:	d0db      	beq.n	2442 <z_impl_k_yield+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    248a:	2c00      	cmp	r4, #0
    248c:	d0db      	beq.n	2446 <z_impl_k_yield+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    248e:	4621      	mov	r1, r4
    2490:	4628      	mov	r0, r5
    2492:	f001 f9b1 	bl	37f8 <z_is_t1_higher_prio_than_t2>
    2496:	2800      	cmp	r0, #0
    2498:	d1cc      	bne.n	2434 <z_impl_k_yield+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    249a:	2c00      	cmp	r4, #0
    249c:	d0d3      	beq.n	2446 <z_impl_k_yield+0x32>
	return (node == list->tail) ? NULL : node->next;
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <z_impl_k_yield+0xb0>)
    24a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24a2:	429c      	cmp	r4, r3
    24a4:	d0cf      	beq.n	2446 <z_impl_k_yield+0x32>
    24a6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    24a8:	2c00      	cmp	r4, #0
    24aa:	d1ee      	bne.n	248a <z_impl_k_yield+0x76>
    24ac:	e7cb      	b.n	2446 <z_impl_k_yield+0x32>
	__asm__ volatile(
    24ae:	f04f 0320 	mov.w	r3, #32
    24b2:	f3ef 8011 	mrs	r0, BASEPRI
    24b6:	f383 8811 	msr	BASEPRI, r3
    24ba:	f3bf 8f6f 	isb	sy
    24be:	f7fe fa35 	bl	92c <arch_swap>
		}
	}
	z_swap_unlocked();
}
    24c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24c4:	20000670 	.word	0x20000670
    24c8:	20000588 	.word	0x20000588

000024cc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
    24cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!arch_is_in_isr(), "");

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    24d0:	4604      	mov	r4, r0
    24d2:	b348      	cbz	r0, 2528 <z_tick_sleep+0x5c>
	}

	k_timeout_t timeout;

#ifndef CONFIG_LEGACY_TIMEOUT_API
	timeout = Z_TIMEOUT_TICKS(ticks);
    24d4:	4606      	mov	r6, r0
    24d6:	17c7      	asrs	r7, r0, #31
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    24d8:	f001 fb28 	bl	3b2c <z_tick_get_32>
    24dc:	4404      	add	r4, r0
    24de:	f04f 0320 	mov.w	r3, #32
    24e2:	f3ef 8811 	mrs	r8, BASEPRI
    24e6:	f383 8811 	msr	BASEPRI, r3
    24ea:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    24ee:	4d10      	ldr	r5, [pc, #64]	; (2530 <z_tick_sleep+0x64>)
    24f0:	68a8      	ldr	r0, [r5, #8]
    24f2:	4b10      	ldr	r3, [pc, #64]	; (2534 <z_tick_sleep+0x68>)
    24f4:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    24f6:	f001 f9f8 	bl	38ea <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    24fa:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    24fc:	4632      	mov	r2, r6
    24fe:	463b      	mov	r3, r7
    2500:	490d      	ldr	r1, [pc, #52]	; (2538 <z_tick_sleep+0x6c>)
    2502:	3018      	adds	r0, #24
    2504:	f000 f912 	bl	272c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2508:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    250a:	7b53      	ldrb	r3, [r2, #13]
    250c:	f043 0310 	orr.w	r3, r3, #16
    2510:	7353      	strb	r3, [r2, #13]
    2512:	4640      	mov	r0, r8
    2514:	f7fe fa0a 	bl	92c <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2518:	f001 fb08 	bl	3b2c <z_tick_get_32>
    251c:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    251e:	2800      	cmp	r0, #0
    2520:	dc00      	bgt.n	2524 <z_tick_sleep+0x58>
		return ticks;
	}
#endif

	return 0;
    2522:	2000      	movs	r0, #0
}
    2524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    2528:	f7ff ff74 	bl	2414 <z_impl_k_yield>
		return 0;
    252c:	4620      	mov	r0, r4
    252e:	e7f9      	b.n	2524 <z_tick_sleep+0x58>
    2530:	20000670 	.word	0x20000670
    2534:	200006a0 	.word	0x200006a0
    2538:	00003889 	.word	0x00003889

0000253c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    253c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    253e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2542:	bf08      	it	eq
    2544:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    2548:	d01a      	beq.n	2580 <z_impl_k_sleep+0x44>
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
    254a:	f7ff ffbf 	bl	24cc <z_tick_sleep>
	return k_ticks_to_ms_floor64(ticks);
    254e:	4604      	mov	r4, r0
    2550:	17c5      	asrs	r5, r0, #31
		} else {
			return (t * to_hz + off) / from_hz;
    2552:	0169      	lsls	r1, r5, #5
    2554:	0143      	lsls	r3, r0, #5
    2556:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    255a:	1a18      	subs	r0, r3, r0
    255c:	eb62 0305 	sbc.w	r3, r2, r5
    2560:	009a      	lsls	r2, r3, #2
    2562:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    2566:	0081      	lsls	r1, r0, #2
    2568:	4613      	mov	r3, r2
    256a:	1908      	adds	r0, r1, r4
    256c:	eb45 0303 	adc.w	r3, r5, r3
    2570:	00da      	lsls	r2, r3, #3
    2572:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    2576:	00c1      	lsls	r1, r0, #3
    2578:	0bc8      	lsrs	r0, r1, #15
    257a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    257e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    2580:	4b03      	ldr	r3, [pc, #12]	; (2590 <z_impl_k_sleep+0x54>)
    2582:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2584:	f7ff fdfe 	bl	2184 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    2588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    258c:	e7f7      	b.n	257e <z_impl_k_sleep+0x42>
    258e:	bf00      	nop
    2590:	20000670 	.word	0x20000670

00002594 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2594:	4b01      	ldr	r3, [pc, #4]	; (259c <z_impl_k_current_get+0x8>)
    2596:	6898      	ldr	r0, [r3, #8]
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	20000670 	.word	0x20000670

000025a0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    25a0:	b538      	push	{r3, r4, r5, lr}
    25a2:	4614      	mov	r4, r2
    25a4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    25a6:	ea54 0305 	orrs.w	r3, r4, r5
    25aa:	d102      	bne.n	25b2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    25ac:	f001 fa43 	bl	3a36 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    25b0:	bd38      	pop	{r3, r4, r5, pc}
    25b2:	462b      	mov	r3, r5
    25b4:	4902      	ldr	r1, [pc, #8]	; (25c0 <schedule_new_thread+0x20>)
    25b6:	3018      	adds	r0, #24
    25b8:	f000 f8b8 	bl	272c <z_add_timeout>
    25bc:	e7f8      	b.n	25b0 <schedule_new_thread+0x10>
    25be:	bf00      	nop
    25c0:	00003889 	.word	0x00003889

000025c4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    25c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    25c8:	b087      	sub	sp, #28
    25ca:	4604      	mov	r4, r0
    25cc:	460d      	mov	r5, r1
    25ce:	4616      	mov	r6, r2
    25d0:	461f      	mov	r7, r3
    25d2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    25d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	sys_dlist_init(&w->waitq);
    25da:	f100 0328 	add.w	r3, r0, #40	; 0x28
	list->head = (sys_dnode_t *)list;
    25de:	6283      	str	r3, [r0, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
    25e0:	62c3      	str	r3, [r0, #44]	; 0x2c
	stack_size = Z_STACK_PTR_ALIGN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    25e2:	464b      	mov	r3, r9
    25e4:	2204      	movs	r2, #4
    25e6:	4641      	mov	r1, r8
    25e8:	f001 fa29 	bl	3a3e <z_init_thread_base>

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    25ec:	f8cd 9010 	str.w	r9, [sp, #16]
    25f0:	f8cd 800c 	str.w	r8, [sp, #12]
    25f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    25f6:	9302      	str	r3, [sp, #8]
    25f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    25fa:	9301      	str	r3, [sp, #4]
    25fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    25fe:	9300      	str	r3, [sp, #0]
    2600:	463b      	mov	r3, r7
    2602:	4632      	mov	r2, r6
    2604:	4629      	mov	r1, r5
    2606:	4620      	mov	r0, r4
    2608:	f7fe fa04 	bl	a14 <arch_new_thread>
			  prio, options);
	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    260c:	2300      	movs	r3, #0
    260e:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->fn_abort = NULL;
    2610:	65a3      	str	r3, [r4, #88]	; 0x58
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <z_setup_new_thread+0x64>)
    2614:	689b      	ldr	r3, [r3, #8]
    2616:	b123      	cbz	r3, 2622 <z_setup_new_thread+0x5e>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    261a:	66a3      	str	r3, [r4, #104]	; 0x68
	sys_trace_thread_create(new_thread);
}
    261c:	b007      	add	sp, #28
    261e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		new_thread->resource_pool = NULL;
    2622:	66a3      	str	r3, [r4, #104]	; 0x68
		return;
    2624:	e7fa      	b.n	261c <z_setup_new_thread+0x58>
    2626:	bf00      	nop
    2628:	20000670 	.word	0x20000670

0000262c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    262c:	b5f0      	push	{r4, r5, r6, r7, lr}
    262e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2630:	4c1f      	ldr	r4, [pc, #124]	; (26b0 <z_init_static_threads+0x84>)
    2632:	4b20      	ldr	r3, [pc, #128]	; (26b4 <z_init_static_threads+0x88>)
    2634:	429c      	cmp	r4, r3
    2636:	d215      	bcs.n	2664 <z_init_static_threads+0x38>
		z_setup_new_thread(
    2638:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    263a:	9305      	str	r3, [sp, #20]
    263c:	6a23      	ldr	r3, [r4, #32]
    263e:	9304      	str	r3, [sp, #16]
    2640:	69e3      	ldr	r3, [r4, #28]
    2642:	9303      	str	r3, [sp, #12]
    2644:	69a3      	ldr	r3, [r4, #24]
    2646:	9302      	str	r3, [sp, #8]
    2648:	6963      	ldr	r3, [r4, #20]
    264a:	9301      	str	r3, [sp, #4]
    264c:	6923      	ldr	r3, [r4, #16]
    264e:	9300      	str	r3, [sp, #0]
    2650:	68e3      	ldr	r3, [r4, #12]
    2652:	68a2      	ldr	r2, [r4, #8]
    2654:	6861      	ldr	r1, [r4, #4]
    2656:	6820      	ldr	r0, [r4, #0]
    2658:	f7ff ffb4 	bl	25c4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    265c:	6823      	ldr	r3, [r4, #0]
    265e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    2660:	3430      	adds	r4, #48	; 0x30
    2662:	e7e6      	b.n	2632 <z_init_static_threads+0x6>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2664:	f7ff fc26 	bl	1eb4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2668:	4c11      	ldr	r4, [pc, #68]	; (26b0 <z_init_static_threads+0x84>)
    266a:	e015      	b.n	2698 <z_init_static_threads+0x6c>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    266c:	6827      	ldr	r7, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    266e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 * @return The converted time value
 */
static TIME_CONSTEXPR inline u32_t k_ms_to_ticks_ceil32(u32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    2672:	2500      	movs	r5, #0
			return (u32_t)((t * to_hz + off) / from_hz);
    2674:	0c59      	lsrs	r1, r3, #17
    2676:	03d8      	lsls	r0, r3, #15
    2678:	f240 36e7 	movw	r6, #999	; 0x3e7
    267c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2680:	2300      	movs	r3, #0
    2682:	1980      	adds	r0, r0, r6
    2684:	eb45 0101 	adc.w	r1, r5, r1
    2688:	f7fd fd28 	bl	dc <__aeabi_uldivmod>
    268c:	4602      	mov	r2, r0
			schedule_new_thread(thread_data->init_thread,
    268e:	462b      	mov	r3, r5
    2690:	4638      	mov	r0, r7
    2692:	f7ff ff85 	bl	25a0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    2696:	3430      	adds	r4, #48	; 0x30
    2698:	4b06      	ldr	r3, [pc, #24]	; (26b4 <z_init_static_threads+0x88>)
    269a:	429c      	cmp	r4, r3
    269c:	d204      	bcs.n	26a8 <z_init_static_threads+0x7c>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    269e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    26a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    26a4:	d0f7      	beq.n	2696 <z_init_static_threads+0x6a>
    26a6:	e7e1      	b.n	266c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    26a8:	f7ff fc5e 	bl	1f68 <k_sched_unlock>
}
    26ac:	b007      	add	sp, #28
    26ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b0:	2000005c 	.word	0x2000005c
    26b4:	2000005c 	.word	0x2000005c

000026b8 <first>:
	return list->head == list;
    26b8:	4b03      	ldr	r3, [pc, #12]	; (26c8 <first+0x10>)
    26ba:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26bc:	4298      	cmp	r0, r3
    26be:	d000      	beq.n	26c2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    26c0:	4770      	bx	lr
    26c2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    26c4:	e7fc      	b.n	26c0 <first+0x8>
    26c6:	bf00      	nop
    26c8:	20000014 	.word	0x20000014

000026cc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    26cc:	b130      	cbz	r0, 26dc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    26ce:	4a04      	ldr	r2, [pc, #16]	; (26e0 <next+0x14>)
    26d0:	6852      	ldr	r2, [r2, #4]
    26d2:	4290      	cmp	r0, r2
    26d4:	d001      	beq.n	26da <next+0xe>
    26d6:	6800      	ldr	r0, [r0, #0]
    26d8:	4770      	bx	lr
    26da:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    26dc:	4770      	bx	lr
    26de:	bf00      	nop
    26e0:	20000014 	.word	0x20000014

000026e4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
    26e4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    26e6:	4b04      	ldr	r3, [pc, #16]	; (26f8 <elapsed+0x14>)
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	b10b      	cbz	r3, 26f0 <elapsed+0xc>
    26ec:	2000      	movs	r0, #0
}
    26ee:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    26f0:	f7fe f8a0 	bl	834 <z_clock_elapsed>
    26f4:	e7fb      	b.n	26ee <elapsed+0xa>
    26f6:	bf00      	nop
    26f8:	200006ac 	.word	0x200006ac

000026fc <next_timeout>:

static s32_t next_timeout(void)
{
    26fc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    26fe:	f7ff ffdb 	bl	26b8 <first>
    2702:	4604      	mov	r4, r0
	s32_t ticks_elapsed = elapsed();
    2704:	f7ff ffee 	bl	26e4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2708:	b154      	cbz	r4, 2720 <next_timeout+0x24>
    270a:	68a3      	ldr	r3, [r4, #8]
    270c:	1a18      	subs	r0, r3, r0
    270e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2712:	4b05      	ldr	r3, [pc, #20]	; (2728 <next_timeout+0x2c>)
    2714:	691b      	ldr	r3, [r3, #16]
    2716:	b113      	cbz	r3, 271e <next_timeout+0x22>
    2718:	4283      	cmp	r3, r0
    271a:	da00      	bge.n	271e <next_timeout+0x22>
		ret = _current_cpu->slice_ticks;
    271c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    271e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2720:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2724:	e7f5      	b.n	2712 <next_timeout+0x16>
    2726:	bf00      	nop
    2728:	20000670 	.word	0x20000670

0000272c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    272c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2730:	4604      	mov	r4, r0
    2732:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2738:	bf08      	it	eq
    273a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    273e:	d066      	beq.n	280e <z_add_timeout+0xe2>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    2740:	f112 0801 	adds.w	r8, r2, #1
    2744:	f143 0900 	adc.w	r9, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2748:	f06f 0301 	mvn.w	r3, #1
    274c:	ebb3 0608 	subs.w	r6, r3, r8
    2750:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    2754:	eb6a 0709 	sbc.w	r7, sl, r9
    2758:	2e00      	cmp	r6, #0
    275a:	f177 0300 	sbcs.w	r3, r7, #0
    275e:	da10      	bge.n	2782 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2760:	60e5      	str	r5, [r4, #12]
	ticks = MAX(1, ticks);
    2762:	4646      	mov	r6, r8
    2764:	f1b8 0f01 	cmp.w	r8, #1
    2768:	f179 0300 	sbcs.w	r3, r9, #0
    276c:	db1c      	blt.n	27a8 <z_add_timeout+0x7c>

	LOCKED(&timeout_lock) {
    276e:	2300      	movs	r3, #0
    2770:	f04f 0220 	mov.w	r2, #32
    2774:	f3ef 8511 	mrs	r5, BASEPRI
    2778:	f382 8811 	msr	BASEPRI, r2
    277c:	f3bf 8f6f 	isb	sy
    2780:	e026      	b.n	27d0 <z_add_timeout+0xa4>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    2782:	f7ff ffaf 	bl	26e4 <elapsed>
    2786:	4b23      	ldr	r3, [pc, #140]	; (2814 <z_add_timeout+0xe8>)
    2788:	e9d3 2300 	ldrd	r2, r3, [r3]
    278c:	1812      	adds	r2, r2, r0
    278e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    2792:	eb18 0202 	adds.w	r2, r8, r2
    2796:	eb49 0103 	adc.w	r1, r9, r3
    279a:	f06f 0301 	mvn.w	r3, #1
    279e:	ebb3 0802 	subs.w	r8, r3, r2
    27a2:	eb6a 0901 	sbc.w	r9, sl, r1
    27a6:	e7db      	b.n	2760 <z_add_timeout+0x34>
	ticks = MAX(1, ticks);
    27a8:	2601      	movs	r6, #1
    27aa:	e7e0      	b.n	276e <z_add_timeout+0x42>
		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    27ac:	1ad3      	subs	r3, r2, r3
    27ae:	6083      	str	r3, [r0, #8]
	node->prev = successor->prev;
    27b0:	6843      	ldr	r3, [r0, #4]
    27b2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    27b4:	6020      	str	r0, [r4, #0]
	successor->prev->next = node;
    27b6:	6843      	ldr	r3, [r0, #4]
    27b8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    27ba:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    27bc:	b1d0      	cbz	r0, 27f4 <z_add_timeout+0xc8>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    27be:	f7ff ff7b 	bl	26b8 <first>
    27c2:	4284      	cmp	r4, r0
    27c4:	d01d      	beq.n	2802 <z_add_timeout+0xd6>
	__asm__ volatile(
    27c6:	f385 8811 	msr	BASEPRI, r5
    27ca:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    27ce:	2301      	movs	r3, #1
    27d0:	b9eb      	cbnz	r3, 280e <z_add_timeout+0xe2>
		to->dticks = ticks + elapsed();
    27d2:	f7ff ff87 	bl	26e4 <elapsed>
    27d6:	4430      	add	r0, r6
    27d8:	60a0      	str	r0, [r4, #8]
		for (t = first(); t != NULL; t = next(t)) {
    27da:	f7ff ff6d 	bl	26b8 <first>
    27de:	2800      	cmp	r0, #0
    27e0:	d0ec      	beq.n	27bc <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
    27e2:	6882      	ldr	r2, [r0, #8]
    27e4:	68a3      	ldr	r3, [r4, #8]
    27e6:	429a      	cmp	r2, r3
    27e8:	dce0      	bgt.n	27ac <z_add_timeout+0x80>
			to->dticks -= t->dticks;
    27ea:	1a9b      	subs	r3, r3, r2
    27ec:	60a3      	str	r3, [r4, #8]
		for (t = first(); t != NULL; t = next(t)) {
    27ee:	f7ff ff6d 	bl	26cc <next>
    27f2:	e7f4      	b.n	27de <z_add_timeout+0xb2>
	node->next = list;
    27f4:	4b08      	ldr	r3, [pc, #32]	; (2818 <z_add_timeout+0xec>)
    27f6:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    27f8:	685a      	ldr	r2, [r3, #4]
    27fa:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    27fc:	6014      	str	r4, [r2, #0]
	list->tail = node;
    27fe:	605c      	str	r4, [r3, #4]
}
    2800:	e7dd      	b.n	27be <z_add_timeout+0x92>
			z_clock_set_timeout(next_timeout(), false);
    2802:	f7ff ff7b 	bl	26fc <next_timeout>
    2806:	2100      	movs	r1, #0
    2808:	f7fd ffe6 	bl	7d8 <z_clock_set_timeout>
    280c:	e7db      	b.n	27c6 <z_add_timeout+0x9a>
		}
	}
}
    280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2812:	bf00      	nop
    2814:	20000088 	.word	0x20000088
    2818:	20000014 	.word	0x20000014

0000281c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    281c:	b570      	push	{r4, r5, r6, lr}
    281e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2820:	f7ff fc76 	bl	2110 <z_time_slice>
	__asm__ volatile(
    2824:	f04f 0320 	mov.w	r3, #32
    2828:	f3ef 8511 	mrs	r5, BASEPRI
    282c:	f383 8811 	msr	BASEPRI, r3
    2830:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2834:	4b23      	ldr	r3, [pc, #140]	; (28c4 <z_clock_announce+0xa8>)
    2836:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2838:	f7ff ff3e 	bl	26b8 <first>
    283c:	4604      	mov	r4, r0
    283e:	b320      	cbz	r0, 288a <z_clock_announce+0x6e>
    2840:	6882      	ldr	r2, [r0, #8]
    2842:	4b20      	ldr	r3, [pc, #128]	; (28c4 <z_clock_announce+0xa8>)
    2844:	681b      	ldr	r3, [r3, #0]
    2846:	429a      	cmp	r2, r3
    2848:	dc1f      	bgt.n	288a <z_clock_announce+0x6e>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    284a:	4e1f      	ldr	r6, [pc, #124]	; (28c8 <z_clock_announce+0xac>)
    284c:	e9d6 0100 	ldrd	r0, r1, [r6]
    2850:	1880      	adds	r0, r0, r2
    2852:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
    2856:	e9c6 0100 	strd	r0, r1, [r6]
		announce_remaining -= dt;
    285a:	1a9b      	subs	r3, r3, r2
    285c:	4a19      	ldr	r2, [pc, #100]	; (28c4 <z_clock_announce+0xa8>)
    285e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    2860:	2300      	movs	r3, #0
    2862:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2864:	4620      	mov	r0, r4
    2866:	f001 f8f2 	bl	3a4e <remove_timeout>
	__asm__ volatile(
    286a:	f385 8811 	msr	BASEPRI, r5
    286e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    2872:	68e3      	ldr	r3, [r4, #12]
    2874:	4620      	mov	r0, r4
    2876:	4798      	blx	r3
	__asm__ volatile(
    2878:	f04f 0320 	mov.w	r3, #32
    287c:	f3ef 8511 	mrs	r5, BASEPRI
    2880:	f383 8811 	msr	BASEPRI, r3
    2884:	f3bf 8f6f 	isb	sy
    2888:	e7d6      	b.n	2838 <z_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    288a:	b124      	cbz	r4, 2896 <z_clock_announce+0x7a>
		first()->dticks -= announce_remaining;
    288c:	68a3      	ldr	r3, [r4, #8]
    288e:	4a0d      	ldr	r2, [pc, #52]	; (28c4 <z_clock_announce+0xa8>)
    2890:	6812      	ldr	r2, [r2, #0]
    2892:	1a9b      	subs	r3, r3, r2
    2894:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    2896:	480c      	ldr	r0, [pc, #48]	; (28c8 <z_clock_announce+0xac>)
    2898:	490a      	ldr	r1, [pc, #40]	; (28c4 <z_clock_announce+0xa8>)
    289a:	680c      	ldr	r4, [r1, #0]
    289c:	e9d0 2300 	ldrd	r2, r3, [r0]
    28a0:	1912      	adds	r2, r2, r4
    28a2:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    28a6:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    28aa:	2400      	movs	r4, #0
    28ac:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    28ae:	f7ff ff25 	bl	26fc <next_timeout>
    28b2:	4621      	mov	r1, r4
    28b4:	f7fd ff90 	bl	7d8 <z_clock_set_timeout>
	__asm__ volatile(
    28b8:	f385 8811 	msr	BASEPRI, r5
    28bc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    28c0:	bd70      	pop	{r4, r5, r6, pc}
    28c2:	bf00      	nop
    28c4:	200006ac 	.word	0x200006ac
    28c8:	20000088 	.word	0x20000088

000028cc <z_tick_get>:

s64_t z_tick_get(void)
{
    28cc:	b510      	push	{r4, lr}
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
    28ce:	2100      	movs	r1, #0
	__asm__ volatile(
    28d0:	f04f 0320 	mov.w	r3, #32
    28d4:	f3ef 8411 	mrs	r4, BASEPRI
    28d8:	f383 8811 	msr	BASEPRI, r3
    28dc:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;
    28e0:	2200      	movs	r2, #0
    28e2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    28e4:	b969      	cbnz	r1, 2902 <z_tick_get+0x36>
		t = curr_tick + z_clock_elapsed();
    28e6:	f7fd ffa5 	bl	834 <z_clock_elapsed>
    28ea:	4b07      	ldr	r3, [pc, #28]	; (2908 <z_tick_get+0x3c>)
    28ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    28f0:	1812      	adds	r2, r2, r0
    28f2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    28f6:	f384 8811 	msr	BASEPRI, r4
    28fa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    28fe:	2101      	movs	r1, #1
    2900:	e7f0      	b.n	28e4 <z_tick_get+0x18>
	}
	return t;
}
    2902:	4610      	mov	r0, r2
    2904:	4619      	mov	r1, r3
    2906:	bd10      	pop	{r4, pc}
    2908:	20000088 	.word	0x20000088

0000290c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    290c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    290e:	4c06      	ldr	r4, [pc, #24]	; (2928 <statics_init+0x1c>)
    2910:	4b06      	ldr	r3, [pc, #24]	; (292c <statics_init+0x20>)
    2912:	429c      	cmp	r4, r3
    2914:	d206      	bcs.n	2924 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2916:	68a2      	ldr	r2, [r4, #8]
    2918:	6861      	ldr	r1, [r4, #4]
    291a:	4620      	mov	r0, r4
    291c:	f001 f90a 	bl	3b34 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2920:	3414      	adds	r4, #20
    2922:	e7f5      	b.n	2910 <statics_init+0x4>
	}
	return 0;
}
    2924:	2000      	movs	r0, #0
    2926:	bd10      	pop	{r4, pc}
    2928:	2000005c 	.word	0x2000005c
    292c:	2000005c 	.word	0x2000005c

00002930 <arch_printk_char_out>:
}
    2930:	2000      	movs	r0, #0
    2932:	4770      	bx	lr

00002934 <print_err>:
{
    2934:	b538      	push	{r3, r4, r5, lr}
    2936:	4604      	mov	r4, r0
    2938:	460d      	mov	r5, r1
	out('E', ctx);
    293a:	2045      	movs	r0, #69	; 0x45
    293c:	47a0      	blx	r4
	out('R', ctx);
    293e:	4629      	mov	r1, r5
    2940:	2052      	movs	r0, #82	; 0x52
    2942:	47a0      	blx	r4
	out('R', ctx);
    2944:	4629      	mov	r1, r5
    2946:	2052      	movs	r0, #82	; 0x52
    2948:	47a0      	blx	r4
}
    294a:	bd38      	pop	{r3, r4, r5, pc}

0000294c <_printk_hex_ulong>:
{
    294c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2950:	b083      	sub	sp, #12
    2952:	4681      	mov	r9, r0
    2954:	468a      	mov	sl, r1
    2956:	4690      	mov	r8, r2
    2958:	461d      	mov	r5, r3
    295a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    295e:	9301      	str	r3, [sp, #4]
	int digits = 0;
    2960:	2600      	movs	r6, #0
	int remaining = 16; /* 16 digits max */
    2962:	f04f 0b10 	mov.w	fp, #16
	int found_largest_digit = 0;
    2966:	4637      	mov	r7, r6
	int shift = sizeof(num) * 8;
    2968:	2440      	movs	r4, #64	; 0x40
	while (shift >= 4) {
    296a:	e007      	b.n	297c <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    296c:	2809      	cmp	r0, #9
    296e:	d92a      	bls.n	29c6 <_printk_hex_ulong+0x7a>
    2970:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2972:	4651      	mov	r1, sl
    2974:	4418      	add	r0, r3
    2976:	47c8      	blx	r9
			digits++;
    2978:	3601      	adds	r6, #1
			found_largest_digit = 1;
    297a:	2701      	movs	r7, #1
	while (shift >= 4) {
    297c:	2c03      	cmp	r4, #3
    297e:	dd33      	ble.n	29e8 <_printk_hex_ulong+0x9c>
		shift -= 4;
    2980:	3c04      	subs	r4, #4
		nibble = (num >> shift) & 0xf;
    2982:	f1c4 0220 	rsb	r2, r4, #32
    2986:	f1a4 0320 	sub.w	r3, r4, #32
    298a:	fa28 f004 	lsr.w	r0, r8, r4
    298e:	fa05 f202 	lsl.w	r2, r5, r2
    2992:	4310      	orrs	r0, r2
    2994:	fa25 f303 	lsr.w	r3, r5, r3
    2998:	4318      	orrs	r0, r3
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    299a:	f010 000f 	ands.w	r0, r0, #15
    299e:	d1e5      	bne.n	296c <_printk_hex_ulong+0x20>
    29a0:	2f00      	cmp	r7, #0
    29a2:	d1e3      	bne.n	296c <_printk_hex_ulong+0x20>
    29a4:	2c00      	cmp	r4, #0
    29a6:	d0e1      	beq.n	296c <_printk_hex_ulong+0x20>
		if (remaining-- <= min_width) {
    29a8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    29ac:	9300      	str	r3, [sp, #0]
    29ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    29b0:	459b      	cmp	fp, r3
    29b2:	dc16      	bgt.n	29e2 <_printk_hex_ulong+0x96>
			if (padding == PAD_ZERO_BEFORE) {
    29b4:	9b01      	ldr	r3, [sp, #4]
    29b6:	2b01      	cmp	r3, #1
    29b8:	d007      	beq.n	29ca <_printk_hex_ulong+0x7e>
			} else if (padding == PAD_SPACE_BEFORE) {
    29ba:	9b01      	ldr	r3, [sp, #4]
    29bc:	2b02      	cmp	r3, #2
    29be:	d00a      	beq.n	29d6 <_printk_hex_ulong+0x8a>
		if (remaining-- <= min_width) {
    29c0:	f8dd b000 	ldr.w	fp, [sp]
    29c4:	e7da      	b.n	297c <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    29c6:	2330      	movs	r3, #48	; 0x30
    29c8:	e7d3      	b.n	2972 <_printk_hex_ulong+0x26>
				out('0', ctx);
    29ca:	4651      	mov	r1, sl
    29cc:	2030      	movs	r0, #48	; 0x30
    29ce:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    29d0:	f8dd b000 	ldr.w	fp, [sp]
    29d4:	e7d2      	b.n	297c <_printk_hex_ulong+0x30>
				out(' ', ctx);
    29d6:	4651      	mov	r1, sl
    29d8:	2020      	movs	r0, #32
    29da:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    29dc:	f8dd b000 	ldr.w	fp, [sp]
    29e0:	e7cc      	b.n	297c <_printk_hex_ulong+0x30>
    29e2:	f8dd b000 	ldr.w	fp, [sp]
    29e6:	e7c9      	b.n	297c <_printk_hex_ulong+0x30>
	if (padding == PAD_SPACE_AFTER) {
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	2b03      	cmp	r3, #3
    29ec:	d002      	beq.n	29f4 <_printk_hex_ulong+0xa8>
}
    29ee:	b003      	add	sp, #12
    29f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    29f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    29f6:	ebc6 0643 	rsb	r6, r6, r3, lsl #1
		while (remaining-- > 0) {
    29fa:	e003      	b.n	2a04 <_printk_hex_ulong+0xb8>
			out(' ', ctx);
    29fc:	4651      	mov	r1, sl
    29fe:	2020      	movs	r0, #32
    2a00:	47c8      	blx	r9
		while (remaining-- > 0) {
    2a02:	4626      	mov	r6, r4
    2a04:	1e74      	subs	r4, r6, #1
    2a06:	2e00      	cmp	r6, #0
    2a08:	dcf8      	bgt.n	29fc <_printk_hex_ulong+0xb0>
    2a0a:	e7f0      	b.n	29ee <_printk_hex_ulong+0xa2>

00002a0c <z_vprintk>:
{
    2a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a10:	b087      	sub	sp, #28
    2a12:	4607      	mov	r7, r0
    2a14:	460e      	mov	r6, r1
    2a16:	4614      	mov	r4, r2
    2a18:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
    2a1a:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2a1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2a22:	46c2      	mov	sl, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2a24:	4645      	mov	r5, r8
	while (*fmt) {
    2a26:	e002      	b.n	2a2e <z_vprintk+0x22>
				out((int)*fmt, ctx);
    2a28:	4631      	mov	r1, r6
    2a2a:	47b8      	blx	r7
		++fmt;
    2a2c:	3401      	adds	r4, #1
	while (*fmt) {
    2a2e:	7820      	ldrb	r0, [r4, #0]
    2a30:	2800      	cmp	r0, #0
    2a32:	f000 8187 	beq.w	2d44 <z_vprintk+0x338>
		if (!might_format) {
    2a36:	b945      	cbnz	r5, 2a4a <z_vprintk+0x3e>
			if (*fmt != '%') {
    2a38:	2825      	cmp	r0, #37	; 0x25
    2a3a:	d1f5      	bne.n	2a28 <z_vprintk+0x1c>
				length_mod = 0;
    2a3c:	f04f 0800 	mov.w	r8, #0
				min_width = -1;
    2a40:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2a44:	46c2      	mov	sl, r8
				might_format = 1;
    2a46:	2501      	movs	r5, #1
    2a48:	e7f0      	b.n	2a2c <z_vprintk+0x20>
			switch (*fmt) {
    2a4a:	4602      	mov	r2, r0
    2a4c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2a50:	2b55      	cmp	r3, #85	; 0x55
    2a52:	f200 8169 	bhi.w	2d28 <z_vprintk+0x31c>
    2a56:	e8df f013 	tbh	[pc, r3, lsl #1]
    2a5a:	0162      	.short	0x0162
    2a5c:	01670167 	.word	0x01670167
    2a60:	01670167 	.word	0x01670167
    2a64:	01670167 	.word	0x01670167
    2a68:	016f0167 	.word	0x016f0167
    2a6c:	01670167 	.word	0x01670167
    2a70:	005d0056 	.word	0x005d0056
    2a74:	005d005d 	.word	0x005d005d
    2a78:	005d005d 	.word	0x005d005d
    2a7c:	005d005d 	.word	0x005d005d
    2a80:	005d005d 	.word	0x005d005d
    2a84:	01670167 	.word	0x01670167
    2a88:	01670167 	.word	0x01670167
    2a8c:	01670167 	.word	0x01670167
    2a90:	01670167 	.word	0x01670167
    2a94:	01670167 	.word	0x01670167
    2a98:	01670167 	.word	0x01670167
    2a9c:	01670167 	.word	0x01670167
    2aa0:	01670167 	.word	0x01670167
    2aa4:	01670167 	.word	0x01670167
    2aa8:	01670167 	.word	0x01670167
    2aac:	01670167 	.word	0x01670167
    2ab0:	01670167 	.word	0x01670167
    2ab4:	01670167 	.word	0x01670167
    2ab8:	01670167 	.word	0x01670167
    2abc:	01670167 	.word	0x01670167
    2ac0:	0167010c 	.word	0x0167010c
    2ac4:	01670167 	.word	0x01670167
    2ac8:	01670167 	.word	0x01670167
    2acc:	01670167 	.word	0x01670167
    2ad0:	01670167 	.word	0x01670167
    2ad4:	015a0167 	.word	0x015a0167
    2ad8:	0167008a 	.word	0x0167008a
    2adc:	01670167 	.word	0x01670167
    2ae0:	008a0070 	.word	0x008a0070
    2ae4:	01670167 	.word	0x01670167
    2ae8:	01670070 	.word	0x01670070
    2aec:	01670167 	.word	0x01670167
    2af0:	01670102 	.word	0x01670102
    2af4:	013a0167 	.word	0x013a0167
    2af8:	00cf0167 	.word	0x00cf0167
    2afc:	01670167 	.word	0x01670167
    2b00:	0167010c 	.word	0x0167010c
    2b04:	0070      	.short	0x0070
				if (min_width < 0 && padding == PAD_NONE) {
    2b06:	f1b9 0f00 	cmp.w	r9, #0
    2b0a:	da03      	bge.n	2b14 <z_vprintk+0x108>
    2b0c:	f1ba 0f00 	cmp.w	sl, #0
    2b10:	f000 8115 	beq.w	2d3e <z_vprintk+0x332>
				if (min_width < 0) {
    2b14:	f1b9 0f00 	cmp.w	r9, #0
    2b18:	db0c      	blt.n	2b34 <z_vprintk+0x128>
					min_width = 10 * min_width + *fmt - '0';
    2b1a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    2b1e:	eb02 0949 	add.w	r9, r2, r9, lsl #1
    2b22:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
				if (padding == PAD_NONE) {
    2b26:	f1ba 0f00 	cmp.w	sl, #0
    2b2a:	f47f af7f 	bne.w	2a2c <z_vprintk+0x20>
					padding = PAD_SPACE_BEFORE;
    2b2e:	f04f 0a02 	mov.w	sl, #2
				goto still_might_format;
    2b32:	e77b      	b.n	2a2c <z_vprintk+0x20>
					min_width = *fmt - '0';
    2b34:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
    2b38:	e7f5      	b.n	2b26 <z_vprintk+0x11a>
				if (*fmt == 'h' && length_mod == 'h') {
    2b3a:	2868      	cmp	r0, #104	; 0x68
    2b3c:	d00c      	beq.n	2b58 <z_vprintk+0x14c>
				} else if (*fmt == 'l' && length_mod == 'l') {
    2b3e:	286c      	cmp	r0, #108	; 0x6c
    2b40:	d010      	beq.n	2b64 <z_vprintk+0x158>
				} else if (length_mod == 0) {
    2b42:	f1b8 0f00 	cmp.w	r8, #0
    2b46:	d00b      	beq.n	2b60 <z_vprintk+0x154>
					out((int)'%', ctx);
    2b48:	4631      	mov	r1, r6
    2b4a:	2025      	movs	r0, #37	; 0x25
    2b4c:	47b8      	blx	r7
					out((int)*fmt, ctx);
    2b4e:	4631      	mov	r1, r6
    2b50:	7820      	ldrb	r0, [r4, #0]
    2b52:	47b8      	blx	r7
			might_format = 0;
    2b54:	2500      	movs	r5, #0
					break;
    2b56:	e769      	b.n	2a2c <z_vprintk+0x20>
				if (*fmt == 'h' && length_mod == 'h') {
    2b58:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    2b5c:	d1ef      	bne.n	2b3e <z_vprintk+0x132>
					length_mod = 'H';
    2b5e:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
    2b60:	4680      	mov	r8, r0
    2b62:	e763      	b.n	2a2c <z_vprintk+0x20>
				} else if (*fmt == 'l' && length_mod == 'l') {
    2b64:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2b68:	d1eb      	bne.n	2b42 <z_vprintk+0x136>
					length_mod = 'L';
    2b6a:	204c      	movs	r0, #76	; 0x4c
    2b6c:	e7f8      	b.n	2b60 <z_vprintk+0x154>
				if (length_mod == 'z') {
    2b6e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    2b72:	d00a      	beq.n	2b8a <z_vprintk+0x17e>
				} else if (length_mod == 'l') {
    2b74:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2b78:	d017      	beq.n	2baa <z_vprintk+0x19e>
				} else if (length_mod == 'L') {
    2b7a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    2b7e:	d019      	beq.n	2bb4 <z_vprintk+0x1a8>
					d = va_arg(ap, int);
    2b80:	9b05      	ldr	r3, [sp, #20]
    2b82:	1d1a      	adds	r2, r3, #4
    2b84:	9205      	str	r2, [sp, #20]
    2b86:	681d      	ldr	r5, [r3, #0]
    2b88:	e003      	b.n	2b92 <z_vprintk+0x186>
					d = va_arg(ap, ssize_t);
    2b8a:	9b05      	ldr	r3, [sp, #20]
    2b8c:	1d1a      	adds	r2, r3, #4
    2b8e:	9205      	str	r2, [sp, #20]
    2b90:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2b92:	2d00      	cmp	r5, #0
    2b94:	db29      	blt.n	2bea <z_vprintk+0x1de>
				_printk_dec_ulong(out, ctx, d, padding,
    2b96:	f8cd 9000 	str.w	r9, [sp]
    2b9a:	4653      	mov	r3, sl
    2b9c:	462a      	mov	r2, r5
    2b9e:	4631      	mov	r1, r6
    2ba0:	4638      	mov	r0, r7
    2ba2:	f7fd fc59 	bl	458 <_printk_dec_ulong>
			might_format = 0;
    2ba6:	2500      	movs	r5, #0
				break;
    2ba8:	e740      	b.n	2a2c <z_vprintk+0x20>
					d = va_arg(ap, long);
    2baa:	9b05      	ldr	r3, [sp, #20]
    2bac:	1d1a      	adds	r2, r3, #4
    2bae:	9205      	str	r2, [sp, #20]
    2bb0:	681d      	ldr	r5, [r3, #0]
    2bb2:	e7ee      	b.n	2b92 <z_vprintk+0x186>
					long long lld = va_arg(ap, long long);
    2bb4:	9b05      	ldr	r3, [sp, #20]
    2bb6:	3307      	adds	r3, #7
    2bb8:	f023 0307 	bic.w	r3, r3, #7
    2bbc:	f103 0208 	add.w	r2, r3, #8
    2bc0:	9205      	str	r2, [sp, #20]
    2bc2:	681d      	ldr	r5, [r3, #0]
    2bc4:	685b      	ldr	r3, [r3, #4]
					if (lld > __LONG_MAX__ ||
    2bc6:	f115 4200 	adds.w	r2, r5, #2147483648	; 0x80000000
    2bca:	9202      	str	r2, [sp, #8]
    2bcc:	f143 0300 	adc.w	r3, r3, #0
    2bd0:	9303      	str	r3, [sp, #12]
    2bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2bd6:	2b01      	cmp	r3, #1
    2bd8:	bf08      	it	eq
    2bda:	2a00      	cmpeq	r2, #0
    2bdc:	d3d9      	bcc.n	2b92 <z_vprintk+0x186>
						print_err(out, ctx);
    2bde:	4631      	mov	r1, r6
    2be0:	4638      	mov	r0, r7
    2be2:	f7ff fea7 	bl	2934 <print_err>
			might_format = 0;
    2be6:	2500      	movs	r5, #0
						break;
    2be8:	e720      	b.n	2a2c <z_vprintk+0x20>
					out((int)'-', ctx);
    2bea:	4631      	mov	r1, r6
    2bec:	202d      	movs	r0, #45	; 0x2d
    2bee:	47b8      	blx	r7
					d = -d;
    2bf0:	426d      	negs	r5, r5
					min_width--;
    2bf2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2bf6:	e7ce      	b.n	2b96 <z_vprintk+0x18a>
				if (length_mod == 'z') {
    2bf8:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    2bfc:	d00a      	beq.n	2c14 <z_vprintk+0x208>
				} else if (length_mod == 'l') {
    2bfe:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2c02:	d014      	beq.n	2c2e <z_vprintk+0x222>
				} else if (length_mod == 'L') {
    2c04:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    2c08:	d016      	beq.n	2c38 <z_vprintk+0x22c>
					u = va_arg(ap, unsigned int);
    2c0a:	9b05      	ldr	r3, [sp, #20]
    2c0c:	1d1a      	adds	r2, r3, #4
    2c0e:	9205      	str	r2, [sp, #20]
    2c10:	681a      	ldr	r2, [r3, #0]
    2c12:	e003      	b.n	2c1c <z_vprintk+0x210>
					u = va_arg(ap, size_t);
    2c14:	9b05      	ldr	r3, [sp, #20]
    2c16:	1d1a      	adds	r2, r3, #4
    2c18:	9205      	str	r2, [sp, #20]
    2c1a:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2c1c:	f8cd 9000 	str.w	r9, [sp]
    2c20:	4653      	mov	r3, sl
    2c22:	4631      	mov	r1, r6
    2c24:	4638      	mov	r0, r7
    2c26:	f7fd fc17 	bl	458 <_printk_dec_ulong>
			might_format = 0;
    2c2a:	2500      	movs	r5, #0
				break;
    2c2c:	e6fe      	b.n	2a2c <z_vprintk+0x20>
					u = va_arg(ap, unsigned long);
    2c2e:	9b05      	ldr	r3, [sp, #20]
    2c30:	1d1a      	adds	r2, r3, #4
    2c32:	9205      	str	r2, [sp, #20]
    2c34:	681a      	ldr	r2, [r3, #0]
    2c36:	e7f1      	b.n	2c1c <z_vprintk+0x210>
					unsigned long long llu =
    2c38:	9b05      	ldr	r3, [sp, #20]
    2c3a:	3307      	adds	r3, #7
    2c3c:	f023 0307 	bic.w	r3, r3, #7
    2c40:	f103 0208 	add.w	r2, r3, #8
    2c44:	9205      	str	r2, [sp, #20]
    2c46:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    2c4a:	2b01      	cmp	r3, #1
    2c4c:	bf08      	it	eq
    2c4e:	2a00      	cmpeq	r2, #0
    2c50:	d3e4      	bcc.n	2c1c <z_vprintk+0x210>
						print_err(out, ctx);
    2c52:	4631      	mov	r1, r6
    2c54:	4638      	mov	r0, r7
    2c56:	f7ff fe6d 	bl	2934 <print_err>
			might_format = 0;
    2c5a:	2500      	movs	r5, #0
						break;
    2c5c:	e6e6      	b.n	2a2c <z_vprintk+0x20>
				out('0', ctx);
    2c5e:	4631      	mov	r1, r6
    2c60:	2030      	movs	r0, #48	; 0x30
    2c62:	47b8      	blx	r7
				out('x', ctx);
    2c64:	4631      	mov	r1, r6
    2c66:	2078      	movs	r0, #120	; 0x78
    2c68:	47b8      	blx	r7
					min_width = 8;
    2c6a:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    2c6e:	f04f 0a01 	mov.w	sl, #1
				if (*fmt == 'p') {
    2c72:	7823      	ldrb	r3, [r4, #0]
    2c74:	2b70      	cmp	r3, #112	; 0x70
    2c76:	d00b      	beq.n	2c90 <z_vprintk+0x284>
				} else if (length_mod == 'l') {
    2c78:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2c7c:	d017      	beq.n	2cae <z_vprintk+0x2a2>
				} else if (length_mod == 'L') {
    2c7e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    2c82:	d01a      	beq.n	2cba <z_vprintk+0x2ae>
					x = va_arg(ap, unsigned int);
    2c84:	9b05      	ldr	r3, [sp, #20]
    2c86:	1d1a      	adds	r2, r3, #4
    2c88:	9205      	str	r2, [sp, #20]
    2c8a:	681a      	ldr	r2, [r3, #0]
    2c8c:	2300      	movs	r3, #0
    2c8e:	e004      	b.n	2c9a <z_vprintk+0x28e>
					x = (uintptr_t)va_arg(ap, void *);
    2c90:	9b05      	ldr	r3, [sp, #20]
    2c92:	1d1a      	adds	r2, r3, #4
    2c94:	9205      	str	r2, [sp, #20]
    2c96:	681a      	ldr	r2, [r3, #0]
    2c98:	2300      	movs	r3, #0
				_printk_hex_ulong(out, ctx, x, padding,
    2c9a:	f8cd 9004 	str.w	r9, [sp, #4]
    2c9e:	f8cd a000 	str.w	sl, [sp]
    2ca2:	4631      	mov	r1, r6
    2ca4:	4638      	mov	r0, r7
    2ca6:	f7ff fe51 	bl	294c <_printk_hex_ulong>
			might_format = 0;
    2caa:	2500      	movs	r5, #0
				break;
    2cac:	e6be      	b.n	2a2c <z_vprintk+0x20>
					x = va_arg(ap, unsigned long);
    2cae:	9b05      	ldr	r3, [sp, #20]
    2cb0:	1d1a      	adds	r2, r3, #4
    2cb2:	9205      	str	r2, [sp, #20]
    2cb4:	681a      	ldr	r2, [r3, #0]
    2cb6:	2300      	movs	r3, #0
    2cb8:	e7ef      	b.n	2c9a <z_vprintk+0x28e>
					x = va_arg(ap, unsigned long long);
    2cba:	9b05      	ldr	r3, [sp, #20]
    2cbc:	3307      	adds	r3, #7
    2cbe:	f023 0307 	bic.w	r3, r3, #7
    2cc2:	f103 0208 	add.w	r2, r3, #8
    2cc6:	9205      	str	r2, [sp, #20]
    2cc8:	681a      	ldr	r2, [r3, #0]
    2cca:	685b      	ldr	r3, [r3, #4]
    2ccc:	e7e5      	b.n	2c9a <z_vprintk+0x28e>
				char *s = va_arg(ap, char *);
    2cce:	9b05      	ldr	r3, [sp, #20]
    2cd0:	1d1a      	adds	r2, r3, #4
    2cd2:	9205      	str	r2, [sp, #20]
    2cd4:	f8d3 b000 	ldr.w	fp, [r3]
    2cd8:	465d      	mov	r5, fp
				while (*s) {
    2cda:	e002      	b.n	2ce2 <z_vprintk+0x2d6>
					out((int)(*s++), ctx);
    2cdc:	3501      	adds	r5, #1
    2cde:	4631      	mov	r1, r6
    2ce0:	47b8      	blx	r7
				while (*s) {
    2ce2:	7828      	ldrb	r0, [r5, #0]
    2ce4:	2800      	cmp	r0, #0
    2ce6:	d1f9      	bne.n	2cdc <z_vprintk+0x2d0>
				if (padding == PAD_SPACE_AFTER) {
    2ce8:	f1ba 0f03 	cmp.w	sl, #3
    2cec:	d001      	beq.n	2cf2 <z_vprintk+0x2e6>
			might_format = 0;
    2cee:	2500      	movs	r5, #0
    2cf0:	e69c      	b.n	2a2c <z_vprintk+0x20>
					int remaining = min_width - (s - start);
    2cf2:	eba5 030b 	sub.w	r3, r5, fp
    2cf6:	eba9 0303 	sub.w	r3, r9, r3
					while (remaining-- > 0) {
    2cfa:	e003      	b.n	2d04 <z_vprintk+0x2f8>
						out(' ', ctx);
    2cfc:	4631      	mov	r1, r6
    2cfe:	2020      	movs	r0, #32
    2d00:	47b8      	blx	r7
					while (remaining-- > 0) {
    2d02:	462b      	mov	r3, r5
    2d04:	1e5d      	subs	r5, r3, #1
    2d06:	2b00      	cmp	r3, #0
    2d08:	dcf8      	bgt.n	2cfc <z_vprintk+0x2f0>
			might_format = 0;
    2d0a:	2500      	movs	r5, #0
    2d0c:	e68e      	b.n	2a2c <z_vprintk+0x20>
				int c = va_arg(ap, int);
    2d0e:	9b05      	ldr	r3, [sp, #20]
    2d10:	1d1a      	adds	r2, r3, #4
    2d12:	9205      	str	r2, [sp, #20]
				out(c, ctx);
    2d14:	4631      	mov	r1, r6
    2d16:	6818      	ldr	r0, [r3, #0]
    2d18:	47b8      	blx	r7
			might_format = 0;
    2d1a:	2500      	movs	r5, #0
				break;
    2d1c:	e686      	b.n	2a2c <z_vprintk+0x20>
				out((int)'%', ctx);
    2d1e:	4631      	mov	r1, r6
    2d20:	2025      	movs	r0, #37	; 0x25
    2d22:	47b8      	blx	r7
			might_format = 0;
    2d24:	2500      	movs	r5, #0
				break;
    2d26:	e681      	b.n	2a2c <z_vprintk+0x20>
				out((int)'%', ctx);
    2d28:	4631      	mov	r1, r6
    2d2a:	2025      	movs	r0, #37	; 0x25
    2d2c:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2d2e:	4631      	mov	r1, r6
    2d30:	7820      	ldrb	r0, [r4, #0]
    2d32:	47b8      	blx	r7
			might_format = 0;
    2d34:	2500      	movs	r5, #0
				break;
    2d36:	e679      	b.n	2a2c <z_vprintk+0x20>
			switch (*fmt) {
    2d38:	f04f 0a03 	mov.w	sl, #3
    2d3c:	e676      	b.n	2a2c <z_vprintk+0x20>
					padding = PAD_ZERO_BEFORE;
    2d3e:	f04f 0a01 	mov.w	sl, #1
    2d42:	e673      	b.n	2a2c <z_vprintk+0x20>
}
    2d44:	b007      	add	sp, #28
    2d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002d4a <printk>:
{
    2d4a:	b40f      	push	{r0, r1, r2, r3}
    2d4c:	b500      	push	{lr}
    2d4e:	b083      	sub	sp, #12
    2d50:	a904      	add	r1, sp, #16
    2d52:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2d56:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    2d58:	f7fd fbd8 	bl	50c <vprintk>
}
    2d5c:	b003      	add	sp, #12
    2d5e:	f85d eb04 	ldr.w	lr, [sp], #4
    2d62:	b004      	add	sp, #16
    2d64:	4770      	bx	lr

00002d66 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2d66:	b508      	push	{r3, lr}
    2d68:	4604      	mov	r4, r0
    2d6a:	4608      	mov	r0, r1
    2d6c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2d6e:	461a      	mov	r2, r3
    2d70:	47a0      	blx	r4
	return z_impl_k_current_get();
    2d72:	f7ff fc0f 	bl	2594 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    2d76:	f7fe f80f 	bl	d98 <z_impl_k_thread_abort>

00002d7a <bucket_idx>:
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    2d7a:	fab1 f181 	clz	r1, r1
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2d7e:	6880      	ldr	r0, [r0, #8]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    2d80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    2d84:	bf34      	ite	cc
    2d86:	4608      	movcc	r0, r1
    2d88:	1c48      	addcs	r0, r1, #1
}
    2d8a:	f1c0 001f 	rsb	r0, r0, #31
    2d8e:	4770      	bx	lr

00002d90 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    2d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d92:	4604      	mov	r4, r0
    2d94:	460d      	mov	r5, r1
	void *cmem = &h->buf[c];
    2d96:	6803      	ldr	r3, [r0, #0]
    2d98:	00ce      	lsls	r6, r1, #3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2d9a:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    2d9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2da0:	d325      	bcc.n	2dee <free_list_add+0x5e>
		return ((u32_t *)cmem)[f];
    2da2:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    2da6:	68e1      	ldr	r1, [r4, #12]
	int b = bucket_idx(h, size(h, c));
    2da8:	4019      	ands	r1, r3
    2daa:	4620      	mov	r0, r4
    2dac:	f7ff ffe5 	bl	2d7a <bucket_idx>

	if (h->buckets[b].list_size++ == 0) {
    2db0:	6863      	ldr	r3, [r4, #4]
    2db2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2db6:	685a      	ldr	r2, [r3, #4]
    2db8:	1c51      	adds	r1, r2, #1
    2dba:	6059      	str	r1, [r3, #4]
    2dbc:	b9f2      	cbnz	r2, 2dfc <free_list_add+0x6c>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    2dbe:	2301      	movs	r3, #1
    2dc0:	fa03 f200 	lsl.w	r2, r3, r0
    2dc4:	6963      	ldr	r3, [r4, #20]
    2dc6:	4313      	orrs	r3, r2
    2dc8:	6163      	str	r3, [r4, #20]
		h->buckets[b].next = c;
    2dca:	6863      	ldr	r3, [r4, #4]
    2dcc:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
	void *cmem = &h->buf[c];
    2dd0:	6823      	ldr	r3, [r4, #0]
    2dd2:	4433      	add	r3, r6
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2dd4:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    2dd6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2dda:	d30b      	bcc.n	2df4 <free_list_add+0x64>
		((u32_t *)cmem)[f] = (u32_t) val;
    2ddc:	609d      	str	r5, [r3, #8]
	void *cmem = &h->buf[c];
    2dde:	6823      	ldr	r3, [r4, #0]
    2de0:	441e      	add	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2de2:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    2de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2de8:	d306      	bcc.n	2df8 <free_list_add+0x68>
		((u32_t *)cmem)[f] = (u32_t) val;
    2dea:	60f5      	str	r5, [r6, #12]
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    2dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((u16_t *)cmem)[f];
    2dee:	f833 3031 	ldrh.w	r3, [r3, r1, lsl #3]
    2df2:	e7d8      	b.n	2da6 <free_list_add+0x16>
		((u16_t *)cmem)[f] = (u16_t) val;
    2df4:	809d      	strh	r5, [r3, #4]
    2df6:	e7f2      	b.n	2dde <free_list_add+0x4e>
    2df8:	80f5      	strh	r5, [r6, #6]
    2dfa:	e7f7      	b.n	2dec <free_list_add+0x5c>
		chunkid_t second = h->buckets[b].next;
    2dfc:	6863      	ldr	r3, [r4, #4]
    2dfe:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
	void *cmem = &h->buf[c];
    2e02:	6823      	ldr	r3, [r4, #0]
    2e04:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
    2e08:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e0c:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    2e0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2e12:	d31c      	bcc.n	2e4e <free_list_add+0xbe>
		return ((u32_t *)cmem)[f];
    2e14:	688f      	ldr	r7, [r1, #8]
	void *cmem = &h->buf[c];
    2e16:	4433      	add	r3, r6
	if (big_heap(h)) {
    2e18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2e1c:	d319      	bcc.n	2e52 <free_list_add+0xc2>
		((u32_t *)cmem)[f] = (u32_t) val;
    2e1e:	609f      	str	r7, [r3, #8]
	void *cmem = &h->buf[c];
    2e20:	6821      	ldr	r1, [r4, #0]
    2e22:	440e      	add	r6, r1
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e24:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    2e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2e2a:	d314      	bcc.n	2e56 <free_list_add+0xc6>
		((u32_t *)cmem)[f] = (u32_t) val;
    2e2c:	60f0      	str	r0, [r6, #12]
	void *cmem = &h->buf[c];
    2e2e:	6822      	ldr	r2, [r4, #0]
    2e30:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e34:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    2e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2e3a:	d30e      	bcc.n	2e5a <free_list_add+0xca>
		((u32_t *)cmem)[f] = (u32_t) val;
    2e3c:	60d5      	str	r5, [r2, #12]
	void *cmem = &h->buf[c];
    2e3e:	6823      	ldr	r3, [r4, #0]
    2e40:	4463      	add	r3, ip
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e42:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    2e44:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2e48:	d309      	bcc.n	2e5e <free_list_add+0xce>
		((u32_t *)cmem)[f] = (u32_t) val;
    2e4a:	609d      	str	r5, [r3, #8]
    2e4c:	e7ce      	b.n	2dec <free_list_add+0x5c>
		return ((u16_t *)cmem)[f];
    2e4e:	888f      	ldrh	r7, [r1, #4]
    2e50:	e7e1      	b.n	2e16 <free_list_add+0x86>
		((u16_t *)cmem)[f] = (u16_t) val;
    2e52:	809f      	strh	r7, [r3, #4]
    2e54:	e7e4      	b.n	2e20 <free_list_add+0x90>
    2e56:	80f0      	strh	r0, [r6, #6]
    2e58:	e7e9      	b.n	2e2e <free_list_add+0x9e>
    2e5a:	80d5      	strh	r5, [r2, #6]
    2e5c:	e7ef      	b.n	2e3e <free_list_add+0xae>
    2e5e:	809d      	strh	r5, [r3, #4]
}
    2e60:	e7c4      	b.n	2dec <free_list_add+0x5c>

00002e62 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e66:	4606      	mov	r6, r0
#if __SIZEOF_SIZE_T__ > 4
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    2e68:	1dcf      	adds	r7, r1, #7
    2e6a:	f027 0707 	bic.w	r7, r7, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    2e6e:	eb01 0802 	add.w	r8, r1, r2
    2e72:	f028 0807 	bic.w	r8, r8, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    2e76:	eba8 0807 	sub.w	r8, r8, r7
    2e7a:	ea4f 08d8 	mov.w	r8, r8, lsr #3

	CHECK(end > addr);

	struct z_heap *h = (struct z_heap *)addr;

	heap->heap = (struct z_heap *)addr;
    2e7e:	6007      	str	r7, [r0, #0]
	h->buf = (u64_t *)addr;
    2e80:	603f      	str	r7, [r7, #0]
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    2e82:	f107 0318 	add.w	r3, r7, #24
    2e86:	607b      	str	r3, [r7, #4]
	h->len = buf_sz;
    2e88:	f8c7 8008 	str.w	r8, [r7, #8]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    2e8c:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
    2e90:	d31f      	bcc.n	2ed2 <sys_heap_init+0x70>
    2e92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    2e96:	60fb      	str	r3, [r7, #12]
	h->avail_buckets = 0;
    2e98:	2400      	movs	r4, #0
    2e9a:	617c      	str	r4, [r7, #20]

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    2e9c:	4641      	mov	r1, r8
    2e9e:	4638      	mov	r0, r7
    2ea0:	f7ff ff6b 	bl	2d7a <bucket_idx>
    2ea4:	1c43      	adds	r3, r0, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    2ea6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    2eaa:	3303      	adds	r3, #3
    2eac:	613b      	str	r3, [r7, #16]

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    2eae:	6835      	ldr	r5, [r6, #0]
    2eb0:	68a9      	ldr	r1, [r5, #8]
    2eb2:	4628      	mov	r0, r5
    2eb4:	f7ff ff61 	bl	2d7a <bucket_idx>
    2eb8:	42a0      	cmp	r0, r4
    2eba:	db0d      	blt.n	2ed8 <sys_heap_init+0x76>
		heap->heap->buckets[i].list_size = 0;
    2ebc:	686b      	ldr	r3, [r5, #4]
    2ebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2ec2:	2200      	movs	r2, #0
    2ec4:	605a      	str	r2, [r3, #4]
		heap->heap->buckets[i].next = 0;
    2ec6:	6833      	ldr	r3, [r6, #0]
    2ec8:	685b      	ldr	r3, [r3, #4]
    2eca:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    2ece:	3401      	adds	r4, #1
    2ed0:	e7ed      	b.n	2eae <sys_heap_init+0x4c>
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    2ed2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2ed6:	e7de      	b.n	2e96 <sys_heap_init+0x34>
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    2ed8:	693a      	ldr	r2, [r7, #16]
    2eda:	eba8 0302 	sub.w	r3, r8, r2
	void *cmem = &h->buf[c];
    2ede:	6839      	ldr	r1, [r7, #0]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2ee0:	68b8      	ldr	r0, [r7, #8]
	if (big_heap(h)) {
    2ee2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    2ee6:	d307      	bcc.n	2ef8 <sys_heap_init+0x96>
		((u32_t *)cmem)[f] = (u32_t) val;
    2ee8:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
	free_list_add(h, h->chunk0);
    2eec:	6939      	ldr	r1, [r7, #16]
    2eee:	4638      	mov	r0, r7
    2ef0:	f7ff ff4e 	bl	2d90 <free_list_add>
}
    2ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		((u16_t *)cmem)[f] = (u16_t) val;
    2ef8:	f821 3032 	strh.w	r3, [r1, r2, lsl #3]
    2efc:	e7f6      	b.n	2eec <sys_heap_init+0x8a>

00002efe <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    2efe:	4770      	bx	lr

00002f00 <wait>:
{
    2f00:	b508      	push	{r3, lr}
	if (k_is_in_isr()) {
    2f02:	f000 fd8e 	bl	3a22 <k_is_in_isr>
    2f06:	b100      	cbz	r0, 2f0a <wait+0xa>
}
    2f08:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
    2f0a:	2042      	movs	r0, #66	; 0x42
    2f0c:	2100      	movs	r1, #0
    2f0e:	f7ff fb15 	bl	253c <z_impl_k_sleep>
    2f12:	e7f9      	b.n	2f08 <wait+0x8>

00002f14 <clock_event_check_and_clean>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2f14:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    2f18:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2f1a:	b13a      	cbz	r2, 2f2c <clock_event_check_and_clean+0x18>
    return p_reg->INTENSET & mask;
    2f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f20:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2f24:	4211      	tst	r1, r2
    2f26:	d00c      	beq.n	2f42 <clock_event_check_and_clean+0x2e>
    2f28:	2201      	movs	r2, #1
    2f2a:	e000      	b.n	2f2e <clock_event_check_and_clean+0x1a>
    2f2c:	2200      	movs	r2, #0
	if (ret) {
    2f2e:	4610      	mov	r0, r2
    2f30:	b14a      	cbz	r2, 2f46 <clock_event_check_and_clean+0x32>
{
    2f32:	b082      	sub	sp, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f34:	2200      	movs	r2, #0
    2f36:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2f3c:	9b01      	ldr	r3, [sp, #4]
}
    2f3e:	b002      	add	sp, #8
    2f40:	4770      	bx	lr
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2f42:	2200      	movs	r2, #0
    2f44:	e7f3      	b.n	2f2e <clock_event_check_and_clean+0x1a>
}
    2f46:	4770      	bx	lr

00002f48 <clock_irqs_disable>:
    p_reg->INTENCLR = mask;
    2f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f4c:	2203      	movs	r2, #3
    2f4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    2f52:	4770      	bx	lr

00002f54 <clock_irqs_enable>:
    p_reg->INTENSET = mask;
    2f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f58:	2203      	movs	r2, #3
    2f5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2f5e:	4770      	bx	lr

00002f60 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->driver_data;
    2f60:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
    2f62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    2f66:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2f6a:	4770      	bx	lr

00002f6c <get_sub_config>:
	const struct nrf_clock_control_config *config =
    2f6c:	6840      	ldr	r0, [r0, #4]
}
    2f6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2f72:	4770      	bx	lr

00002f74 <get_status>:
{
    2f74:	b508      	push	{r3, lr}
	data = get_sub_data(dev, type);
    2f76:	b2c9      	uxtb	r1, r1
    2f78:	f7ff fff2 	bl	2f60 <get_sub_data>
	if (data->started) {
    2f7c:	7a43      	ldrb	r3, [r0, #9]
    2f7e:	b91b      	cbnz	r3, 2f88 <get_status+0x14>
	if (data->ref > 0) {
    2f80:	7a03      	ldrb	r3, [r0, #8]
    2f82:	b91b      	cbnz	r3, 2f8c <get_status+0x18>
	return CLOCK_CONTROL_STATUS_OFF;
    2f84:	2001      	movs	r0, #1
}
    2f86:	bd08      	pop	{r3, pc}
		return CLOCK_CONTROL_STATUS_ON;
    2f88:	2002      	movs	r0, #2
    2f8a:	e7fc      	b.n	2f86 <get_status+0x12>
		return CLOCK_CONTROL_STATUS_STARTING;
    2f8c:	2000      	movs	r0, #0
    2f8e:	e7fa      	b.n	2f86 <get_status+0x12>

00002f90 <clock_stop>:
{
    2f90:	b570      	push	{r4, r5, r6, lr}
    2f92:	4606      	mov	r6, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    2f94:	b2cc      	uxtb	r4, r1
	config = get_sub_config(dev, type);
    2f96:	4621      	mov	r1, r4
    2f98:	f7ff ffe8 	bl	2f6c <get_sub_config>
    2f9c:	4605      	mov	r5, r0
	data = get_sub_data(dev, type);
    2f9e:	4621      	mov	r1, r4
    2fa0:	4630      	mov	r0, r6
    2fa2:	f7ff ffdd 	bl	2f60 <get_sub_data>
	__asm__ volatile(
    2fa6:	f04f 0320 	mov.w	r3, #32
    2faa:	f3ef 8211 	mrs	r2, BASEPRI
    2fae:	f383 8811 	msr	BASEPRI, r3
    2fb2:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    2fb6:	7a03      	ldrb	r3, [r0, #8]
    2fb8:	b18b      	cbz	r3, 2fde <clock_stop+0x4e>
	data->ref--;
    2fba:	3b01      	subs	r3, #1
    2fbc:	b2db      	uxtb	r3, r3
    2fbe:	7203      	strb	r3, [r0, #8]
	if (data->ref == 0) {
    2fc0:	b983      	cbnz	r3, 2fe4 <clock_stop+0x54>
	list->head = NULL;
    2fc2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    2fc4:	6043      	str	r3, [r0, #4]
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    2fc6:	78e9      	ldrb	r1, [r5, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fc8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2fcc:	2401      	movs	r4, #1
    2fce:	600c      	str	r4, [r1, #0]
		data->started = false;
    2fd0:	7243      	strb	r3, [r0, #9]
	int err = 0;
    2fd2:	4618      	mov	r0, r3
	__asm__ volatile(
    2fd4:	f382 8811 	msr	BASEPRI, r2
    2fd8:	f3bf 8f6f 	isb	sy
}
    2fdc:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    2fde:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2fe2:	e7f7      	b.n	2fd4 <clock_stop+0x44>
	int err = 0;
    2fe4:	2000      	movs	r0, #0
    2fe6:	e7f5      	b.n	2fd4 <clock_stop+0x44>

00002fe8 <is_in_list>:
	return list->head;
    2fe8:	6803      	ldr	r3, [r0, #0]
		if (item == node) {
    2fea:	428b      	cmp	r3, r1
    2fec:	d005      	beq.n	2ffa <is_in_list+0x12>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2fee:	b133      	cbz	r3, 2ffe <is_in_list+0x16>
	return node->next;
    2ff0:	681b      	ldr	r3, [r3, #0]
	} while (item);
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d1f9      	bne.n	2fea <is_in_list+0x2>
	return false;
    2ff6:	2000      	movs	r0, #0
    2ff8:	4770      	bx	lr
			return true;
    2ffa:	2001      	movs	r0, #1
    2ffc:	4770      	bx	lr
	return false;
    2ffe:	2000      	movs	r0, #0
}
    3000:	4770      	bx	lr

00003002 <list_append>:
	__asm__ volatile(
    3002:	f04f 0320 	mov.w	r3, #32
    3006:	f3ef 8211 	mrs	r2, BASEPRI
    300a:	f383 8811 	msr	BASEPRI, r3
    300e:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3012:	2300      	movs	r3, #0
    3014:	600b      	str	r3, [r1, #0]
	return list->tail;
    3016:	6843      	ldr	r3, [r0, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3018:	b133      	cbz	r3, 3028 <list_append+0x26>
	parent->next = child;
    301a:	6019      	str	r1, [r3, #0]
	list->tail = node;
    301c:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
    301e:	f382 8811 	msr	BASEPRI, r2
    3022:	f3bf 8f6f 	isb	sy
}
    3026:	4770      	bx	lr
    3028:	6041      	str	r1, [r0, #4]
	list->head = node;
    302a:	6001      	str	r1, [r0, #0]
}
    302c:	e7f7      	b.n	301e <list_append+0x1c>

0000302e <list_get>:
{
    302e:	4603      	mov	r3, r0
	__asm__ volatile(
    3030:	f04f 0120 	mov.w	r1, #32
    3034:	f3ef 8211 	mrs	r2, BASEPRI
    3038:	f381 8811 	msr	BASEPRI, r1
    303c:	f3bf 8f6f 	isb	sy
	return list->head;
    3040:	6800      	ldr	r0, [r0, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3042:	b168      	cbz	r0, 3060 <list_get+0x32>
    3044:	b410      	push	{r4}
	return node->next;
    3046:	6801      	ldr	r1, [r0, #0]
	list->head = node;
    3048:	6019      	str	r1, [r3, #0]
	return list->tail;
    304a:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    304c:	42a0      	cmp	r0, r4
    304e:	d005      	beq.n	305c <list_get+0x2e>
	__asm__ volatile(
    3050:	f382 8811 	msr	BASEPRI, r2
    3054:	f3bf 8f6f 	isb	sy
}
    3058:	bc10      	pop	{r4}
    305a:	4770      	bx	lr
	list->tail = node;
    305c:	6059      	str	r1, [r3, #4]
}
    305e:	e7f7      	b.n	3050 <list_get+0x22>
    3060:	f382 8811 	msr	BASEPRI, r2
    3064:	f3bf 8f6f 	isb	sy
    3068:	4770      	bx	lr

0000306a <clkstarted_handle>:
{
    306a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    306c:	4607      	mov	r7, r0
    306e:	460e      	mov	r6, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    3070:	f7ff ff76 	bl	2f60 <get_sub_data>
    3074:	4605      	mov	r5, r0
	sub_data->started = true;
    3076:	2301      	movs	r3, #1
    3078:	7243      	strb	r3, [r0, #9]
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    307a:	4628      	mov	r0, r5
    307c:	f7ff ffd7 	bl	302e <list_get>
    3080:	4603      	mov	r3, r0
    3082:	b128      	cbz	r0, 3090 <clkstarted_handle+0x26>
		async_data->cb(dev, (clock_control_subsys_t)type,
    3084:	685c      	ldr	r4, [r3, #4]
    3086:	689a      	ldr	r2, [r3, #8]
    3088:	4631      	mov	r1, r6
    308a:	4638      	mov	r0, r7
    308c:	47a0      	blx	r4
    308e:	e7f4      	b.n	307a <clkstarted_handle+0x10>
}
    3090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003092 <clock_start>:
{
    3092:	b508      	push	{r3, lr}
	return clock_async_start(dev, sub_system, NULL);
    3094:	2200      	movs	r2, #0
    3096:	f7fd faa7 	bl	5e8 <clock_async_start>
}
    309a:	bd08      	pop	{r3, pc}

0000309c <clk_init>:
{
    309c:	b538      	push	{r3, r4, r5, lr}
    309e:	4605      	mov	r5, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    30a0:	2200      	movs	r2, #0
    30a2:	2101      	movs	r1, #1
    30a4:	4610      	mov	r0, r2
    30a6:	f7fd fc9f 	bl	9e8 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    30aa:	2000      	movs	r0, #0
    30ac:	f7fd fc8c 	bl	9c8 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    30b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30b4:	2201      	movs	r2, #1
    30b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	clock_irqs_enable();
    30ba:	f7ff ff4b 	bl	2f54 <clock_irqs_enable>
	for (enum clock_control_nrf_type i = 0;
    30be:	2400      	movs	r4, #0
    30c0:	e008      	b.n	30d4 <clk_init+0x38>
		sys_slist_init(&(get_sub_data(dev, i)->list));
    30c2:	4621      	mov	r1, r4
    30c4:	4628      	mov	r0, r5
    30c6:	f7ff ff4b 	bl	2f60 <get_sub_data>
	list->head = NULL;
    30ca:	2300      	movs	r3, #0
    30cc:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    30ce:	6043      	str	r3, [r0, #4]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    30d0:	3401      	adds	r4, #1
    30d2:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    30d4:	2c01      	cmp	r4, #1
    30d6:	d9f4      	bls.n	30c2 <clk_init+0x26>
}
    30d8:	2000      	movs	r0, #0
    30da:	bd38      	pop	{r3, r4, r5, pc}

000030dc <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    30dc:	4770      	bx	lr

000030de <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    30de:	4770      	bx	lr

000030e0 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    30e0:	1a40      	subs	r0, r0, r1
}
    30e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30e6:	4770      	bx	lr

000030e8 <handle_next_tick_case>:
{
    30e8:	b510      	push	{r4, lr}
    30ea:	4604      	mov	r4, r0
	set_comparator(t + 2);
    30ec:	3002      	adds	r0, #2
    30ee:	f7fd fad7 	bl	6a0 <set_comparator>
	while (t != counter()) {
    30f2:	f7fd fb07 	bl	704 <counter>
    30f6:	42a0      	cmp	r0, r4
    30f8:	d006      	beq.n	3108 <handle_next_tick_case+0x20>
		t = counter();
    30fa:	f7fd fb03 	bl	704 <counter>
    30fe:	4604      	mov	r4, r0
		set_comparator(t + 2);
    3100:	3002      	adds	r0, #2
    3102:	f7fd facd 	bl	6a0 <set_comparator>
    3106:	e7f4      	b.n	30f2 <handle_next_tick_case+0xa>
}
    3108:	bd10      	pop	{r4, pc}

0000310a <set_absolute_ticks>:
{
    310a:	b538      	push	{r3, r4, r5, lr}
    310c:	4604      	mov	r4, r0
	u32_t t = counter();
    310e:	f7fd faf9 	bl	704 <counter>
    3112:	4605      	mov	r5, r0
	diff = counter_sub(abs_val, t);
    3114:	4601      	mov	r1, r0
    3116:	4620      	mov	r0, r4
    3118:	f7ff ffe2 	bl	30e0 <counter_sub>
	if (diff == 1) {
    311c:	2801      	cmp	r0, #1
    311e:	d00d      	beq.n	313c <set_absolute_ticks+0x32>
	set_comparator(abs_val);
    3120:	4620      	mov	r0, r4
    3122:	f7fd fabd 	bl	6a0 <set_comparator>
	t = counter();
    3126:	f7fd faed 	bl	704 <counter>
    312a:	4605      	mov	r5, r0
	diff = counter_sub(abs_val - 2, t);
    312c:	4601      	mov	r1, r0
    312e:	1ea0      	subs	r0, r4, #2
    3130:	f7ff ffd6 	bl	30e0 <counter_sub>
	if (diff > MAX_TICKS) {
    3134:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3138:	d204      	bcs.n	3144 <set_absolute_ticks+0x3a>
}
    313a:	bd38      	pop	{r3, r4, r5, pc}
		handle_next_tick_case(t);
    313c:	4628      	mov	r0, r5
    313e:	f7ff ffd3 	bl	30e8 <handle_next_tick_case>
		return;
    3142:	e7fa      	b.n	313a <set_absolute_ticks+0x30>
		handle_next_tick_case(t);
    3144:	4628      	mov	r0, r5
    3146:	f7ff ffcf 	bl	30e8 <handle_next_tick_case>
    314a:	e7f6      	b.n	313a <set_absolute_ticks+0x30>

0000314c <set_protected_absolute_ticks>:
{
    314c:	b510      	push	{r4, lr}
    314e:	4604      	mov	r4, r0
	int_disable();
    3150:	f7fd fac8 	bl	6e4 <int_disable>
	prevent_false_prev_evt();
    3154:	f7fd faee 	bl	734 <prevent_false_prev_evt>
	set_absolute_ticks(ticks);
    3158:	4620      	mov	r0, r4
    315a:	f7ff ffd6 	bl	310a <set_absolute_ticks>
	int_enable();
    315e:	f7fd fac9 	bl	6f4 <int_enable>
}
    3162:	bd10      	pop	{r4, pc}

00003164 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    3164:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    3166:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    3168:	4293      	cmp	r3, r2
    316a:	d804      	bhi.n	3176 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    316c:	6880      	ldr	r0, [r0, #8]
    316e:	1a80      	subs	r0, r0, r2
    3170:	4403      	add	r3, r0
    3172:	1e58      	subs	r0, r3, #1
    3174:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    3176:	1a9b      	subs	r3, r3, r2
    3178:	1e58      	subs	r0, r3, #1
}
    317a:	4770      	bx	lr

0000317c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    317c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3180:	4604      	mov	r4, r0
    3182:	4688      	mov	r8, r1
    3184:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    3186:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    3188:	6887      	ldr	r7, [r0, #8]
    318a:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
    318e:	4591      	cmp	r9, r2
    3190:	d907      	bls.n	31a2 <_WriteNoCheck+0x26>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    3192:	6840      	ldr	r0, [r0, #4]
    3194:	4428      	add	r0, r5
    3196:	f000 f8f6 	bl	3386 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    319a:	4435      	add	r5, r6
    319c:	60e5      	str	r5, [r4, #12]
}
    319e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    31a2:	6840      	ldr	r0, [r0, #4]
    31a4:	464a      	mov	r2, r9
    31a6:	4428      	add	r0, r5
    31a8:	f000 f8ed 	bl	3386 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    31ac:	1bed      	subs	r5, r5, r7
    31ae:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    31b0:	462a      	mov	r2, r5
    31b2:	eb08 0109 	add.w	r1, r8, r9
    31b6:	6860      	ldr	r0, [r4, #4]
    31b8:	f000 f8e5 	bl	3386 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    31bc:	60e5      	str	r5, [r4, #12]
}
    31be:	e7ee      	b.n	319e <_WriteNoCheck+0x22>

000031c0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    31c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    31c4:	4606      	mov	r6, r0
    31c6:	4688      	mov	r8, r1
    31c8:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    31ca:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    31cc:	f04f 0900 	mov.w	r9, #0
    31d0:	e018      	b.n	3204 <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
    31d2:	1b64      	subs	r4, r4, r5
    31d4:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    31d6:	68b3      	ldr	r3, [r6, #8]
    31d8:	1b5c      	subs	r4, r3, r5
    31da:	4294      	cmp	r4, r2
    31dc:	bf28      	it	cs
    31de:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    31e0:	42bc      	cmp	r4, r7
    31e2:	bf28      	it	cs
    31e4:	463c      	movcs	r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    31e6:	6870      	ldr	r0, [r6, #4]
    31e8:	4622      	mov	r2, r4
    31ea:	4641      	mov	r1, r8
    31ec:	4428      	add	r0, r5
    31ee:	f000 f8ca 	bl	3386 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    31f2:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    31f4:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    31f6:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    31f8:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    31fa:	68b3      	ldr	r3, [r6, #8]
    31fc:	42ab      	cmp	r3, r5
    31fe:	d009      	beq.n	3214 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
    3200:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    3202:	b14f      	cbz	r7, 3218 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    3204:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    3206:	42a5      	cmp	r5, r4
    3208:	d3e3      	bcc.n	31d2 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    320a:	68b2      	ldr	r2, [r6, #8]
    320c:	1b64      	subs	r4, r4, r5
    320e:	4414      	add	r4, r2
    3210:	1e62      	subs	r2, r4, #1
    3212:	e7e0      	b.n	31d6 <_WriteBlocking+0x16>
      WrOff = 0u;
    3214:	2500      	movs	r5, #0
    3216:	e7f3      	b.n	3200 <_WriteBlocking+0x40>
}
    3218:	4648      	mov	r0, r9
    321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000321e <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    321e:	b508      	push	{r3, lr}
  _DoInit();
    3220:	f7fd fb1e 	bl	860 <_DoInit>
}
    3224:	bd08      	pop	{r3, pc}

00003226 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    3226:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    3228:	f7ff fff9 	bl	321e <SEGGER_RTT_Init>

	return 0;
}
    322c:	2000      	movs	r0, #0
    322e:	bd08      	pop	{r3, pc}

00003230 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
    3230:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    3232:	2100      	movs	r1, #0
    3234:	2001      	movs	r0, #1
    3236:	f000 f801 	bl	323c <z_arm_fatal_error>
}
    323a:	bd08      	pop	{r3, pc}

0000323c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    323c:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    323e:	f000 fa8a 	bl	3756 <z_fatal_error>
}
    3242:	bd08      	pop	{r3, pc}

00003244 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3244:	b508      	push	{r3, lr}
    3246:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    3248:	6800      	ldr	r0, [r0, #0]
    324a:	f7ff fff7 	bl	323c <z_arm_fatal_error>
}
    324e:	bd08      	pop	{r3, pc}

00003250 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3250:	b508      	push	{r3, lr}
	handler();
    3252:	f7fd fc2d 	bl	ab0 <z_SysNmiOnReset>
	z_arm_int_exit();
    3256:	f7fd fd77 	bl	d48 <z_arm_exc_exit>
}
    325a:	bd08      	pop	{r3, pc}

0000325c <memory_fault_recoverable>:
}
    325c:	2000      	movs	r0, #0
    325e:	4770      	bx	lr

00003260 <fault_handle>:
{
    3260:	b508      	push	{r3, lr}
	*recoverable = false;
    3262:	2300      	movs	r3, #0
    3264:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    3266:	1ecb      	subs	r3, r1, #3
    3268:	2b03      	cmp	r3, #3
    326a:	d812      	bhi.n	3292 <fault_handle+0x32>
    326c:	e8df f003 	tbb	[pc, r3]
    3270:	0e0a0602 	.word	0x0e0a0602
		reason = hard_fault(esf, recoverable);
    3274:	4611      	mov	r1, r2
    3276:	f7fd fce3 	bl	c40 <hard_fault>
}
    327a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    327c:	2100      	movs	r1, #0
    327e:	f7fd fc7f 	bl	b80 <mem_manage_fault>
		break;
    3282:	e7fa      	b.n	327a <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    3284:	2100      	movs	r1, #0
    3286:	f7fd fc9f 	bl	bc8 <bus_fault>
		break;
    328a:	e7f6      	b.n	327a <fault_handle+0x1a>
		reason = usage_fault(esf);
    328c:	f7fd fcc6 	bl	c1c <usage_fault>
		break;
    3290:	e7f3      	b.n	327a <fault_handle+0x1a>
	*recoverable = false;
    3292:	2000      	movs	r0, #0
	return reason;
    3294:	e7f1      	b.n	327a <fault_handle+0x1a>

00003296 <mpu_partition_is_valid>:
		((part->size & (part->size - 1)) == 0U)
    3296:	6843      	ldr	r3, [r0, #4]
    3298:	1e5a      	subs	r2, r3, #1
		&&
    329a:	4213      	tst	r3, r2
    329c:	d106      	bne.n	32ac <mpu_partition_is_valid+0x16>
		&&
    329e:	2b1f      	cmp	r3, #31
    32a0:	d906      	bls.n	32b0 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1)) == 0U);
    32a2:	6803      	ldr	r3, [r0, #0]
		&&
    32a4:	421a      	tst	r2, r3
    32a6:	d005      	beq.n	32b4 <mpu_partition_is_valid+0x1e>
    32a8:	2000      	movs	r0, #0
    32aa:	4770      	bx	lr
    32ac:	2000      	movs	r0, #0
    32ae:	4770      	bx	lr
    32b0:	2000      	movs	r0, #0
    32b2:	4770      	bx	lr
    32b4:	2001      	movs	r0, #1
}
    32b6:	4770      	bx	lr

000032b8 <region_allocate_and_init>:
{
    32b8:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1)) {
    32ba:	2807      	cmp	r0, #7
    32bc:	d804      	bhi.n	32c8 <region_allocate_and_init+0x10>
    32be:	4604      	mov	r4, r0
	region_init(index, region_conf);
    32c0:	f7fd fdae 	bl	e20 <region_init>
}
    32c4:	4620      	mov	r0, r4
    32c6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    32c8:	f06f 0415 	mvn.w	r4, #21
    32cc:	e7fa      	b.n	32c4 <region_allocate_and_init+0xc>

000032ce <mpu_configure_region>:
{
    32ce:	b500      	push	{lr}
    32d0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    32d2:	680b      	ldr	r3, [r1, #0]
    32d4:	9301      	str	r3, [sp, #4]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    32d6:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    32d8:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    32da:	2b20      	cmp	r3, #32
    32dc:	d912      	bls.n	3304 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    32de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    32e2:	d811      	bhi.n	3308 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    32e4:	3b01      	subs	r3, #1
    32e6:	fab3 f383 	clz	r3, r3
    32ea:	f1c3 031f 	rsb	r3, r3, #31
    32ee:	005b      	lsls	r3, r3, #1
    32f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    32f4:	4313      	orrs	r3, r2
    32f6:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    32f8:	a901      	add	r1, sp, #4
    32fa:	f7ff ffdd 	bl	32b8 <region_allocate_and_init>
}
    32fe:	b005      	add	sp, #20
    3300:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    3304:	2308      	movs	r3, #8
    3306:	e7f5      	b.n	32f4 <mpu_configure_region+0x26>
		return REGION_4G;
    3308:	233e      	movs	r3, #62	; 0x3e
    330a:	e7f3      	b.n	32f4 <mpu_configure_region+0x26>

0000330c <mpu_configure_regions>:
{
    330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3310:	4680      	mov	r8, r0
    3312:	460f      	mov	r7, r1
    3314:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    3316:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
    3318:	2500      	movs	r5, #0
    331a:	e009      	b.n	3330 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, regions[i]);
    331c:	4631      	mov	r1, r6
    331e:	b2e0      	uxtb	r0, r4
    3320:	f7ff ffd5 	bl	32ce <mpu_configure_region>
    3324:	4604      	mov	r4, r0
		if (reg_index == -EINVAL) {
    3326:	f110 0f16 	cmn.w	r0, #22
    332a:	d012      	beq.n	3352 <mpu_configure_regions+0x46>
		reg_index++;
    332c:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    332e:	3501      	adds	r5, #1
    3330:	42bd      	cmp	r5, r7
    3332:	da0e      	bge.n	3352 <mpu_configure_regions+0x46>
		if (regions[i]->size == 0U) {
    3334:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
    3338:	6873      	ldr	r3, [r6, #4]
    333a:	2b00      	cmp	r3, #0
    333c:	d0f7      	beq.n	332e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    333e:	f1b9 0f00 	cmp.w	r9, #0
    3342:	d0eb      	beq.n	331c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(regions[i]))) {
    3344:	4630      	mov	r0, r6
    3346:	f7ff ffa6 	bl	3296 <mpu_partition_is_valid>
		if (do_sanity_check &&
    334a:	2800      	cmp	r0, #0
    334c:	d1e6      	bne.n	331c <mpu_configure_regions+0x10>
			return -EINVAL;
    334e:	f06f 0415 	mvn.w	r4, #21
}
    3352:	4620      	mov	r0, r4
    3354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003358 <arm_core_mpu_configure_static_mpu_regions>:
{
    3358:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    335a:	f7fd fd71 	bl	e40 <mpu_configure_static_mpu_regions>
}
    335e:	bd08      	pop	{r3, pc}

00003360 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    3360:	4602      	mov	r2, r0
    3362:	780b      	ldrb	r3, [r1, #0]
    3364:	b11b      	cbz	r3, 336e <strcpy+0xe>
		*d = *s;
    3366:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    336a:	3101      	adds	r1, #1
    336c:	e7f9      	b.n	3362 <strcpy+0x2>
	}

	*d = '\0';
    336e:	7013      	strb	r3, [r2, #0]

	return dest;
}
    3370:	4770      	bx	lr

00003372 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3372:	7803      	ldrb	r3, [r0, #0]
    3374:	780a      	ldrb	r2, [r1, #0]
    3376:	4293      	cmp	r3, r2
    3378:	d103      	bne.n	3382 <strcmp+0x10>
    337a:	b113      	cbz	r3, 3382 <strcmp+0x10>
		s1++;
    337c:	3001      	adds	r0, #1
		s2++;
    337e:	3101      	adds	r1, #1
    3380:	e7f7      	b.n	3372 <strcmp>
	}

	return *s1 - *s2;
}
    3382:	1a98      	subs	r0, r3, r2
    3384:	4770      	bx	lr

00003386 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3386:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3388:	ea80 0301 	eor.w	r3, r0, r1
    338c:	f013 0f03 	tst.w	r3, #3
    3390:	d001      	beq.n	3396 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    3392:	4603      	mov	r3, r0
    3394:	e017      	b.n	33c6 <memcpy+0x40>
    3396:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    3398:	f013 0f03 	tst.w	r3, #3
    339c:	d00b      	beq.n	33b6 <memcpy+0x30>
			if (n == 0) {
    339e:	b1a2      	cbz	r2, 33ca <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    33a0:	f811 4b01 	ldrb.w	r4, [r1], #1
    33a4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    33a8:	3a01      	subs	r2, #1
    33aa:	e7f5      	b.n	3398 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    33ac:	f851 4b04 	ldr.w	r4, [r1], #4
    33b0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    33b4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    33b6:	2a03      	cmp	r2, #3
    33b8:	d8f8      	bhi.n	33ac <memcpy+0x26>
    33ba:	e004      	b.n	33c6 <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    33bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    33c0:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    33c4:	3a01      	subs	r2, #1
	while (n > 0) {
    33c6:	2a00      	cmp	r2, #0
    33c8:	d1f8      	bne.n	33bc <memcpy+0x36>
	}

	return d;
}
    33ca:	bc10      	pop	{r4}
    33cc:	4770      	bx	lr

000033ce <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    33ce:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    33d0:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    33d2:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    33d4:	f013 0f03 	tst.w	r3, #3
    33d8:	d004      	beq.n	33e4 <memset+0x16>
		if (n == 0) {
    33da:	b19a      	cbz	r2, 3404 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    33dc:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    33e0:	3a01      	subs	r2, #1
    33e2:	e7f7      	b.n	33d4 <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    33e4:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    33e6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    33ea:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    33ee:	2a03      	cmp	r2, #3
    33f0:	d906      	bls.n	3400 <memset+0x32>
		*(d_word++) = c_word;
    33f2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    33f6:	3a04      	subs	r2, #4
    33f8:	e7f9      	b.n	33ee <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    33fa:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    33fe:	3a01      	subs	r2, #1
	while (n > 0) {
    3400:	2a00      	cmp	r2, #0
    3402:	d1fa      	bne.n	33fa <memset+0x2c>
	}

	return buf;
}
    3404:	bc10      	pop	{r4}
    3406:	4770      	bx	lr

00003408 <_stdout_hook_default>:
}
    3408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    340c:	4770      	bx	lr

0000340e <z_platform_init>:

void z_platform_init(void)
{
    340e:	b508      	push	{r3, lr}
	SystemInit();
    3410:	f7fe f9d0 	bl	17b4 <SystemInit>
}
    3414:	bd08      	pop	{r3, pc}

00003416 <gpiote_pin_int_cfg>:
{
    3416:	b570      	push	{r4, r5, r6, lr}
    3418:	460c      	mov	r4, r1
	return port->driver_data;
    341a:	68c6      	ldr	r6, [r0, #12]
	return port->config_info;
    341c:	6843      	ldr	r3, [r0, #4]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    341e:	7a1b      	ldrb	r3, [r3, #8]
    3420:	f001 051f 	and.w	r5, r1, #31
    3424:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_channel_free(abs_pin);
    3428:	4628      	mov	r0, r5
    342a:	f7fd fdbd 	bl	fa8 <gpiote_channel_free>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    342e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3432:	f505 71e0 	add.w	r1, r5, #448	; 0x1c0
    3436:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    343a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    343e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    3442:	68f3      	ldr	r3, [r6, #12]
    3444:	40e3      	lsrs	r3, r4
    3446:	f013 0f01 	tst.w	r3, #1
    344a:	d034      	beq.n	34b6 <gpiote_pin_int_cfg+0xa0>
    344c:	6933      	ldr	r3, [r6, #16]
    344e:	40e3      	lsrs	r3, r4
    3450:	f013 0f01 	tst.w	r3, #1
    3454:	d031      	beq.n	34ba <gpiote_pin_int_cfg+0xa4>
		if (data->trig_edge & BIT(pin)) {
    3456:	69b3      	ldr	r3, [r6, #24]
    3458:	40e3      	lsrs	r3, r4
    345a:	f013 0f01 	tst.w	r3, #1
    345e:	d013      	beq.n	3488 <gpiote_pin_int_cfg+0x72>
			if (data->double_edge & BIT(pin)) {
    3460:	69f3      	ldr	r3, [r6, #28]
    3462:	40e3      	lsrs	r3, r4
    3464:	f013 0f01 	tst.w	r3, #1
    3468:	d107      	bne.n	347a <gpiote_pin_int_cfg+0x64>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    346a:	6973      	ldr	r3, [r6, #20]
    346c:	fa23 f404 	lsr.w	r4, r3, r4
    3470:	f014 0f01 	tst.w	r4, #1
    3474:	d006      	beq.n	3484 <gpiote_pin_int_cfg+0x6e>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    3476:	2101      	movs	r1, #1
    3478:	e000      	b.n	347c <gpiote_pin_int_cfg+0x66>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    347a:	2103      	movs	r1, #3
			res = gpiote_channel_alloc(abs_pin, pol);
    347c:	4628      	mov	r0, r5
    347e:	f7fd fd47 	bl	f10 <gpiote_channel_alloc>
    3482:	e019      	b.n	34b8 <gpiote_pin_int_cfg+0xa2>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    3484:	2102      	movs	r1, #2
    3486:	e7f9      	b.n	347c <gpiote_pin_int_cfg+0x66>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3488:	6971      	ldr	r1, [r6, #20]
    348a:	fa21 f404 	lsr.w	r4, r1, r4
    348e:	f014 0f01 	tst.w	r4, #1
    3492:	d10e      	bne.n	34b2 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    3494:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    349a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    349e:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    34a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    34a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    34aa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
	int res = 0;
    34ae:	2000      	movs	r0, #0
}
    34b0:	e002      	b.n	34b8 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    34b2:	2102      	movs	r1, #2
    34b4:	e7ef      	b.n	3496 <gpiote_pin_int_cfg+0x80>
	int res = 0;
    34b6:	2000      	movs	r0, #0
}
    34b8:	bd70      	pop	{r4, r5, r6, pc}
	int res = 0;
    34ba:	2000      	movs	r0, #0
	return res;
    34bc:	e7fc      	b.n	34b8 <gpiote_pin_int_cfg+0xa2>

000034be <gpio_nrfx_port_get_raw>:
	return port->config_info;
    34be:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    34c2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    34c6:	600b      	str	r3, [r1, #0]
}
    34c8:	2000      	movs	r0, #0
    34ca:	4770      	bx	lr

000034cc <gpio_nrfx_port_set_masked_raw>:
	return port->config_info;
    34cc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34ce:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    34d0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    34d4:	4042      	eors	r2, r0
    34d6:	400a      	ands	r2, r1
    34d8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    34da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    34de:	2000      	movs	r0, #0
    34e0:	4770      	bx	lr

000034e2 <gpio_nrfx_port_set_bits_raw>:
	return port->config_info;
    34e2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34e4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    34e6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    34ea:	2000      	movs	r0, #0
    34ec:	4770      	bx	lr

000034ee <gpio_nrfx_port_clear_bits_raw>:
	return port->config_info;
    34ee:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34f0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    34f2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    34f6:	2000      	movs	r0, #0
    34f8:	4770      	bx	lr

000034fa <gpio_nrfx_port_toggle_bits>:
	return port->config_info;
    34fa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34fc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    34fe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    3502:	404b      	eors	r3, r1
    p_reg->OUT = value;
    3504:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    3508:	2000      	movs	r0, #0
    350a:	4770      	bx	lr

0000350c <gpio_nrfx_pin_interrupt_configure>:
{
    350c:	b570      	push	{r4, r5, r6, lr}
	return port->driver_data;
    350e:	68c4      	ldr	r4, [r0, #12]
	return port->config_info;
    3510:	6845      	ldr	r5, [r0, #4]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3512:	7a2e      	ldrb	r6, [r5, #8]
    3514:	f001 051f 	and.w	r5, r1, #31
    3518:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
    351c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3520:	d02d      	beq.n	357e <gpio_nrfx_pin_interrupt_configure+0x72>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3522:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3526:	d036      	beq.n	3596 <gpio_nrfx_pin_interrupt_configure+0x8a>
    3528:	68e5      	ldr	r5, [r4, #12]
    352a:	2601      	movs	r6, #1
    352c:	408e      	lsls	r6, r1
    352e:	4335      	orrs	r5, r6
    3530:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3532:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3536:	d034      	beq.n	35a2 <gpio_nrfx_pin_interrupt_configure+0x96>
    3538:	6925      	ldr	r5, [r4, #16]
    353a:	2601      	movs	r6, #1
    353c:	408e      	lsls	r6, r1
    353e:	4335      	orrs	r5, r6
    3540:	6125      	str	r5, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3542:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3546:	d032      	beq.n	35ae <gpio_nrfx_pin_interrupt_configure+0xa2>
    3548:	69a2      	ldr	r2, [r4, #24]
    354a:	2501      	movs	r5, #1
    354c:	408d      	lsls	r5, r1
    354e:	ea22 0205 	bic.w	r2, r2, r5
    3552:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3554:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3558:	d02e      	beq.n	35b8 <gpio_nrfx_pin_interrupt_configure+0xac>
    355a:	69e2      	ldr	r2, [r4, #28]
    355c:	2501      	movs	r5, #1
    355e:	408d      	lsls	r5, r1
    3560:	ea22 0205 	bic.w	r2, r2, r5
    3564:	61e2      	str	r2, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    356a:	d02a      	beq.n	35c2 <gpio_nrfx_pin_interrupt_configure+0xb6>
    356c:	6963      	ldr	r3, [r4, #20]
    356e:	2201      	movs	r2, #1
    3570:	408a      	lsls	r2, r1
    3572:	ea23 0302 	bic.w	r3, r3, r2
    3576:	6163      	str	r3, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
    3578:	f7ff ff4d 	bl	3416 <gpiote_pin_int_cfg>
}
    357c:	bd70      	pop	{r4, r5, r6, pc}
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    357e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3582:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3586:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    358a:	f015 0f01 	tst.w	r5, #1
    358e:	d0c8      	beq.n	3522 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    3590:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3594:	e7f2      	b.n	357c <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3596:	68e5      	ldr	r5, [r4, #12]
    3598:	2601      	movs	r6, #1
    359a:	408e      	lsls	r6, r1
    359c:	ea25 0506 	bic.w	r5, r5, r6
    35a0:	e7c6      	b.n	3530 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    35a2:	6925      	ldr	r5, [r4, #16]
    35a4:	2601      	movs	r6, #1
    35a6:	408e      	lsls	r6, r1
    35a8:	ea25 0506 	bic.w	r5, r5, r6
    35ac:	e7c8      	b.n	3540 <gpio_nrfx_pin_interrupt_configure+0x34>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    35ae:	69a2      	ldr	r2, [r4, #24]
    35b0:	2501      	movs	r5, #1
    35b2:	408d      	lsls	r5, r1
    35b4:	432a      	orrs	r2, r5
    35b6:	e7cc      	b.n	3552 <gpio_nrfx_pin_interrupt_configure+0x46>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    35b8:	69e2      	ldr	r2, [r4, #28]
    35ba:	2501      	movs	r5, #1
    35bc:	408d      	lsls	r5, r1
    35be:	432a      	orrs	r2, r5
    35c0:	e7d0      	b.n	3564 <gpio_nrfx_pin_interrupt_configure+0x58>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    35c2:	6963      	ldr	r3, [r4, #20]
    35c4:	2201      	movs	r2, #1
    35c6:	408a      	lsls	r2, r1
    35c8:	4313      	orrs	r3, r2
    35ca:	e7d4      	b.n	3576 <gpio_nrfx_pin_interrupt_configure+0x6a>

000035cc <gpio_nrfx_manage_callback>:
{
    35cc:	b470      	push	{r4, r5, r6}
	return port->driver_data;
    35ce:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    35d0:	1d05      	adds	r5, r0, #4
	return list->head;
    35d2:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    35d4:	b1db      	cbz	r3, 360e <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    35d6:	460e      	mov	r6, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    35d8:	2400      	movs	r4, #0
    35da:	e00a      	b.n	35f2 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    35dc:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    35de:	6043      	str	r3, [r0, #4]
	return list->tail;
    35e0:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    35e2:	42a1      	cmp	r1, r4
    35e4:	d10f      	bne.n	3606 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    35e6:	606b      	str	r3, [r5, #4]
}
    35e8:	e00d      	b.n	3606 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    35ea:	606c      	str	r4, [r5, #4]
}
    35ec:	e00b      	b.n	3606 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    35ee:	461c      	mov	r4, r3
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	b15b      	cbz	r3, 360c <gpio_nrfx_manage_callback+0x40>
    35f4:	429e      	cmp	r6, r3
    35f6:	d1fa      	bne.n	35ee <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    35f8:	2c00      	cmp	r4, #0
    35fa:	d0ef      	beq.n	35dc <gpio_nrfx_manage_callback+0x10>
	return node->next;
    35fc:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    35fe:	6023      	str	r3, [r4, #0]
	return list->tail;
    3600:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    3602:	4299      	cmp	r1, r3
    3604:	d0f1      	beq.n	35ea <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    3606:	2300      	movs	r3, #0
    3608:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    360a:	e000      	b.n	360e <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    360c:	b152      	cbz	r2, 3624 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    360e:	b162      	cbz	r2, 362a <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    3610:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    3612:	600b      	str	r3, [r1, #0]
	list->head = node;
    3614:	6041      	str	r1, [r0, #4]
	return list->tail;
    3616:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    3618:	b10b      	cbz	r3, 361e <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    361a:	2000      	movs	r0, #0
    361c:	e006      	b.n	362c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    361e:	6069      	str	r1, [r5, #4]
    3620:	2000      	movs	r0, #0
}
    3622:	e003      	b.n	362c <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    3624:	f06f 0015 	mvn.w	r0, #21
    3628:	e000      	b.n	362c <gpio_nrfx_manage_callback+0x60>
	return 0;
    362a:	2000      	movs	r0, #0
}
    362c:	bc70      	pop	{r4, r5, r6}
    362e:	4770      	bx	lr

00003630 <gpio_nrfx_pin_manage_callback>:
{
    3630:	b510      	push	{r4, lr}
	return port->driver_data;
    3632:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    3634:	b13a      	cbz	r2, 3646 <gpio_nrfx_pin_manage_callback+0x16>
    3636:	6923      	ldr	r3, [r4, #16]
    3638:	2201      	movs	r2, #1
    363a:	408a      	lsls	r2, r1
    363c:	4313      	orrs	r3, r2
    363e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    3640:	f7ff fee9 	bl	3416 <gpiote_pin_int_cfg>
}
    3644:	bd10      	pop	{r4, pc}
	WRITE_BIT(data->int_en, pin, enable);
    3646:	6923      	ldr	r3, [r4, #16]
    3648:	2201      	movs	r2, #1
    364a:	408a      	lsls	r2, r1
    364c:	ea23 0302 	bic.w	r3, r3, r2
    3650:	e7f5      	b.n	363e <gpio_nrfx_pin_manage_callback+0xe>

00003652 <gpio_nrfx_pin_enable_callback>:
{
    3652:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, pin, true);
    3654:	2201      	movs	r2, #1
    3656:	f7ff ffeb 	bl	3630 <gpio_nrfx_pin_manage_callback>
}
    365a:	bd08      	pop	{r3, pc}

0000365c <gpio_nrfx_pin_disable_callback>:
{
    365c:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, pin, false);
    365e:	2200      	movs	r2, #0
    3660:	f7ff ffe6 	bl	3630 <gpio_nrfx_pin_manage_callback>
}
    3664:	bd08      	pop	{r3, pc}

00003666 <cfg_level_pins>:
{
    3666:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    3668:	68c6      	ldr	r6, [r0, #12]
	return port->config_info;
    366a:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
    366c:	6932      	ldr	r2, [r6, #16]
    366e:	68f3      	ldr	r3, [r6, #12]
    3670:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    3672:	69b2      	ldr	r2, [r6, #24]
    3674:	69f1      	ldr	r1, [r6, #28]
    3676:	430a      	orrs	r2, r1
    3678:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    367c:	2201      	movs	r2, #1
	u32_t pin = 0U;
    367e:	2000      	movs	r0, #0
	while (level_pins) {
    3680:	e011      	b.n	36a6 <cfg_level_pins+0x40>
		return NRF_GPIO_PIN_SENSE_HIGH;
    3682:	f04f 0c02 	mov.w	ip, #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3686:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    368a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    368e:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
    3692:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3696:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    369a:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
			level_pins &= ~bit;
    369e:	ea23 0302 	bic.w	r3, r3, r2
		++pin;
    36a2:	3001      	adds	r0, #1
		bit <<= 1;
    36a4:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    36a6:	b173      	cbz	r3, 36c6 <cfg_level_pins+0x60>
		if (level_pins & bit) {
    36a8:	421a      	tst	r2, r3
    36aa:	d0fa      	beq.n	36a2 <cfg_level_pins+0x3c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    36ac:	7a3c      	ldrb	r4, [r7, #8]
    36ae:	f000 011f 	and.w	r1, r0, #31
    36b2:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    36b6:	6974      	ldr	r4, [r6, #20]
    36b8:	40c4      	lsrs	r4, r0
    36ba:	f014 0f01 	tst.w	r4, #1
    36be:	d1e0      	bne.n	3682 <cfg_level_pins+0x1c>
	return NRF_GPIO_PIN_SENSE_LOW;
    36c0:	f04f 0c03 	mov.w	ip, #3
    36c4:	e7df      	b.n	3686 <cfg_level_pins+0x20>
}
    36c6:	bcf0      	pop	{r4, r5, r6, r7}
    36c8:	4770      	bx	lr

000036ca <check_level_trigger_pins>:
{
    36ca:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    36cc:	68c2      	ldr	r2, [r0, #12]
	return port->config_info;
    36ce:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
    36d0:	6913      	ldr	r3, [r2, #16]
    36d2:	68d1      	ldr	r1, [r2, #12]
    36d4:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
    36d6:	6991      	ldr	r1, [r2, #24]
    36d8:	69d0      	ldr	r0, [r2, #28]
    36da:	4301      	orrs	r1, r0
    36dc:	ea23 0301 	bic.w	r3, r3, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    36e0:	6879      	ldr	r1, [r7, #4]
    return p_reg->IN;
    36e2:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    36e6:	6950      	ldr	r0, [r2, #20]
    36e8:	4048      	eors	r0, r1
	u32_t out = pin_states & level_pins;
    36ea:	ea23 0000 	bic.w	r0, r3, r0
	u32_t bit = 1U << pin;
    36ee:	2201      	movs	r2, #1
	u32_t pin = 0U;
    36f0:	2400      	movs	r4, #0
	while (level_pins) {
    36f2:	e001      	b.n	36f8 <check_level_trigger_pins+0x2e>
		++pin;
    36f4:	3401      	adds	r4, #1
		bit <<= 1;
    36f6:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    36f8:	b19b      	cbz	r3, 3722 <check_level_trigger_pins+0x58>
		if (level_pins & bit) {
    36fa:	4213      	tst	r3, r2
    36fc:	d0fa      	beq.n	36f4 <check_level_trigger_pins+0x2a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    36fe:	7a3d      	ldrb	r5, [r7, #8]
    3700:	f004 011f 	and.w	r1, r4, #31
    3704:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3708:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    370c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    3710:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
    3714:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3718:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
			level_pins &= ~bit;
    371c:	ea23 0302 	bic.w	r3, r3, r2
    3720:	e7e8      	b.n	36f4 <check_level_trigger_pins+0x2a>
}
    3722:	bcf0      	pop	{r4, r5, r6, r7}
    3724:	4770      	bx	lr

00003726 <uart_nrfx_config_get>:
{
    3726:	460b      	mov	r3, r1
	return dev->driver_data;
    3728:	68c2      	ldr	r2, [r0, #12]
	*cfg = get_dev_data(dev)->uart_config;
    372a:	e892 0003 	ldmia.w	r2, {r0, r1}
    372e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3732:	2000      	movs	r0, #0
    3734:	4770      	bx	lr

00003736 <nrfx_busy_wait>:
{
	((nrfx_irq_handler_t)irq_handler)();
}

void nrfx_busy_wait(u32_t usec_to_wait)
{
    3736:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    3738:	f000 f979 	bl	3a2e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    373c:	bd08      	pop	{r3, pc}

0000373e <arch_system_halt>:
	__asm__ volatile(
    373e:	f04f 0220 	mov.w	r2, #32
    3742:	f3ef 8311 	mrs	r3, BASEPRI
    3746:	f382 8811 	msr	BASEPRI, r2
    374a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    374e:	e7fe      	b.n	374e <arch_system_halt+0x10>

00003750 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3750:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    3752:	f7ff fff4 	bl	373e <arch_system_halt>

00003756 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3758:	4605      	mov	r5, r0
    375a:	460e      	mov	r6, r1
    375c:	f04f 0320 	mov.w	r3, #32
    3760:	f3ef 8711 	mrs	r7, BASEPRI
    3764:	f383 8811 	msr	BASEPRI, r3
    3768:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    376c:	f7fe ff12 	bl	2594 <z_impl_k_current_get>
    3770:	4604      	mov	r4, r0
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3772:	4631      	mov	r1, r6
    3774:	4628      	mov	r0, r5
    3776:	f7ff ffeb 	bl	3750 <k_sys_fatal_error_handler>
	__asm__ volatile(
    377a:	f387 8811 	msr	BASEPRI, r7
    377e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3782:	4620      	mov	r0, r4
    3784:	f7fd fb08 	bl	d98 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000378a <sys_power_save_idle>:

static void sys_power_save_idle(void)
{
    378a:	b510      	push	{r4, lr}
	s32_t ticks = z_get_next_timeout_expiry();
    378c:	f000 f98f 	bl	3aae <z_get_next_timeout_expiry>
    3790:	4604      	mov	r4, r0
	 * periods less than that.  This seems... silly, given that it
	 * saves no power and does not improve latency.  But it's an
	 * API we need to honor...
	 */
#ifdef CONFIG_SYS_CLOCK_EXISTS
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3792:	2802      	cmp	r0, #2
    3794:	dd08      	ble.n	37a8 <sys_power_save_idle+0x1e>
    3796:	2101      	movs	r1, #1
    3798:	f000 f99f 	bl	3ada <z_set_timeout_expiry>
#endif

	set_kernel_idle_time_in_ticks(ticks);
    379c:	4620      	mov	r0, r4
    379e:	f7fe f95b 	bl	1a58 <set_kernel_idle_time_in_ticks>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    37a2:	f7fd f977 	bl	a94 <arch_cpu_idle>
		k_cpu_idle();
	}
#else
	k_cpu_idle();
#endif
}
    37a6:	bd10      	pop	{r4, pc}
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    37a8:	2001      	movs	r0, #1
    37aa:	e7f4      	b.n	3796 <sys_power_save_idle+0xc>

000037ac <z_sys_power_save_idle_exit>:
#endif

void z_sys_power_save_idle_exit(s32_t ticks)
{
    37ac:	b508      	push	{r3, lr}
	if (sys_pm_idle_exit_notify) {
		_sys_resume();
	}
#endif

	z_clock_idle_exit();
    37ae:	f7ff fc96 	bl	30de <z_clock_idle_exit>
}
    37b2:	bd08      	pop	{r3, pc}

000037b4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    37b4:	b508      	push	{r3, lr}
	__asm__ volatile(
    37b6:	f04f 0220 	mov.w	r2, #32
    37ba:	f3ef 8311 	mrs	r3, BASEPRI
    37be:	f382 8811 	msr	BASEPRI, r2
    37c2:	f3bf 8f6f 	isb	sy
#if SMP_FALLBACK
		k_busy_wait(100);
		k_yield();
#else
		(void)arch_irq_lock();
		sys_power_save_idle();
    37c6:	f7ff ffe0 	bl	378a <sys_power_save_idle>
	while (true) {
    37ca:	e7f4      	b.n	37b6 <idle+0x2>

000037cc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    37cc:	4288      	cmp	r0, r1
    37ce:	da00      	bge.n	37d2 <new_prio_for_inheritance+0x6>
    37d0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    37d2:	2900      	cmp	r1, #0
    37d4:	db01      	blt.n	37da <new_prio_for_inheritance+0xe>
    37d6:	4608      	mov	r0, r1
    37d8:	4770      	bx	lr
    37da:	2000      	movs	r0, #0
}
    37dc:	4770      	bx	lr

000037de <adjust_owner_prio>:
{
    37de:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    37e0:	6880      	ldr	r0, [r0, #8]
    37e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    37e6:	428b      	cmp	r3, r1
    37e8:	d101      	bne.n	37ee <adjust_owner_prio+0x10>
	return false;
    37ea:	2000      	movs	r0, #0
}
    37ec:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    37ee:	f7fe fdab 	bl	2348 <z_set_prio>
    37f2:	e7fb      	b.n	37ec <adjust_owner_prio+0xe>

000037f4 <pended_on>:
}
    37f4:	6880      	ldr	r0, [r0, #8]
    37f6:	4770      	bx	lr

000037f8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    37f8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    37fc:	f991 300e 	ldrsb.w	r3, [r1, #14]
    3800:	429a      	cmp	r2, r3
    3802:	db01      	blt.n	3808 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    3804:	2000      	movs	r0, #0
    3806:	4770      	bx	lr
		return true;
    3808:	2001      	movs	r0, #1
}
    380a:	4770      	bx	lr

0000380c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    380c:	4608      	mov	r0, r1
    380e:	b959      	cbnz	r1, 3828 <z_reschedule+0x1c>
{
    3810:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3812:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3816:	b913      	cbnz	r3, 381e <z_reschedule+0x12>
    3818:	f7fd f888 	bl	92c <arch_swap>
	return ret;
    381c:	e003      	b.n	3826 <z_reschedule+0x1a>
	__asm__ volatile(
    381e:	f381 8811 	msr	BASEPRI, r1
    3822:	f3bf 8f6f 	isb	sy
}
    3826:	bd08      	pop	{r3, pc}
    3828:	f381 8811 	msr	BASEPRI, r1
    382c:	f3bf 8f6f 	isb	sy
    3830:	4770      	bx	lr

00003832 <z_reschedule_irqlock>:
{
    3832:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3834:	4603      	mov	r3, r0
    3836:	b928      	cbnz	r0, 3844 <z_reschedule_irqlock+0x12>
    3838:	f3ef 8205 	mrs	r2, IPSR
    383c:	b912      	cbnz	r2, 3844 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    383e:	f7fd f875 	bl	92c <arch_swap>
	return ret;
    3842:	e003      	b.n	384c <z_reschedule_irqlock+0x1a>
    3844:	f383 8811 	msr	BASEPRI, r3
    3848:	f3bf 8f6f 	isb	sy
}
    384c:	bd08      	pop	{r3, pc}

0000384e <z_priq_dumb_best>:
{
    384e:	4603      	mov	r3, r0
	return list->head == list;
    3850:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3852:	4283      	cmp	r3, r0
    3854:	d000      	beq.n	3858 <z_priq_dumb_best+0xa>
}
    3856:	4770      	bx	lr
	struct k_thread *thread = NULL;
    3858:	2000      	movs	r0, #0
	return thread;
    385a:	e7fc      	b.n	3856 <z_priq_dumb_best+0x8>

0000385c <z_ready_thread>:
{
    385c:	b538      	push	{r3, r4, r5, lr}
    385e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    3860:	2300      	movs	r3, #0
	__asm__ volatile(
    3862:	f04f 0220 	mov.w	r2, #32
    3866:	f3ef 8411 	mrs	r4, BASEPRI
    386a:	f382 8811 	msr	BASEPRI, r2
    386e:	f3bf 8f6f 	isb	sy
    3872:	b943      	cbnz	r3, 3886 <z_ready_thread+0x2a>
		ready_thread(thread);
    3874:	4628      	mov	r0, r5
    3876:	f7fe fb9d 	bl	1fb4 <ready_thread>
	__asm__ volatile(
    387a:	f384 8811 	msr	BASEPRI, r4
    387e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3882:	2301      	movs	r3, #1
    3884:	e7f5      	b.n	3872 <z_ready_thread+0x16>
}
    3886:	bd38      	pop	{r3, r4, r5, pc}

00003888 <z_thread_timeout>:
{
    3888:	b570      	push	{r4, r5, r6, lr}
    388a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    388c:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    3890:	f850 3c10 	ldr.w	r3, [r0, #-16]
    3894:	b1fb      	cbz	r3, 38d6 <z_thread_timeout+0x4e>
	LOCKED(&sched_spinlock) {
    3896:	2300      	movs	r3, #0
	__asm__ volatile(
    3898:	f04f 0220 	mov.w	r2, #32
    389c:	f3ef 8611 	mrs	r6, BASEPRI
    38a0:	f382 8811 	msr	BASEPRI, r2
    38a4:	f3bf 8f6f 	isb	sy
    38a8:	e013      	b.n	38d2 <z_thread_timeout+0x4a>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    38aa:	4628      	mov	r0, r5
    38ac:	f7ff ffa2 	bl	37f4 <pended_on>
    38b0:	4629      	mov	r1, r5
    38b2:	f7fe fb17 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    38b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    38ba:	f023 0302 	bic.w	r3, r3, #2
    38be:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    38c2:	2300      	movs	r3, #0
    38c4:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    38c8:	f386 8811 	msr	BASEPRI, r6
    38cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    38d0:	2301      	movs	r3, #1
    38d2:	2b00      	cmp	r3, #0
    38d4:	d0e9      	beq.n	38aa <z_thread_timeout+0x22>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    38d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    38da:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    38de:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    38e2:	4628      	mov	r0, r5
    38e4:	f7ff ffba 	bl	385c <z_ready_thread>
}
    38e8:	bd70      	pop	{r4, r5, r6, pc}

000038ea <z_remove_thread_from_ready_q>:
{
    38ea:	b538      	push	{r3, r4, r5, lr}
    38ec:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    38ee:	2300      	movs	r3, #0
	__asm__ volatile(
    38f0:	f04f 0220 	mov.w	r2, #32
    38f4:	f3ef 8411 	mrs	r4, BASEPRI
    38f8:	f382 8811 	msr	BASEPRI, r2
    38fc:	f3bf 8f6f 	isb	sy
    3900:	b943      	cbnz	r3, 3914 <z_remove_thread_from_ready_q+0x2a>
		unready_thread(thread);
    3902:	4628      	mov	r0, r5
    3904:	f7fe fcf0 	bl	22e8 <unready_thread>
	__asm__ volatile(
    3908:	f384 8811 	msr	BASEPRI, r4
    390c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3910:	2301      	movs	r3, #1
    3912:	e7f5      	b.n	3900 <z_remove_thread_from_ready_q+0x16>
}
    3914:	bd38      	pop	{r3, r4, r5, pc}

00003916 <add_to_waitq_locked>:
{
    3916:	b570      	push	{r4, r5, r6, lr}
    3918:	4605      	mov	r5, r0
    391a:	460e      	mov	r6, r1
	unready_thread(thread);
    391c:	f7fe fce4 	bl	22e8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    3920:	7b6b      	ldrb	r3, [r5, #13]
    3922:	f043 0302 	orr.w	r3, r3, #2
    3926:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    3928:	b1ae      	cbz	r6, 3956 <add_to_waitq_locked+0x40>
		thread->base.pended_on = wait_q;
    392a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    392c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    392e:	42a6      	cmp	r6, r4
    3930:	d019      	beq.n	3966 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3932:	b15c      	cbz	r4, 394c <add_to_waitq_locked+0x36>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    3934:	4621      	mov	r1, r4
    3936:	4628      	mov	r0, r5
    3938:	f7ff ff5e 	bl	37f8 <z_is_t1_higher_prio_than_t2>
    393c:	b960      	cbnz	r0, 3958 <add_to_waitq_locked+0x42>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    393e:	b12c      	cbz	r4, 394c <add_to_waitq_locked+0x36>
	return (node == list->tail) ? NULL : node->next;
    3940:	6873      	ldr	r3, [r6, #4]
    3942:	429c      	cmp	r4, r3
    3944:	d002      	beq.n	394c <add_to_waitq_locked+0x36>
    3946:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3948:	2c00      	cmp	r4, #0
    394a:	d1f2      	bne.n	3932 <add_to_waitq_locked+0x1c>
	node->next = list;
    394c:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
    394e:	6873      	ldr	r3, [r6, #4]
    3950:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    3952:	601d      	str	r5, [r3, #0]
	list->tail = node;
    3954:	6075      	str	r5, [r6, #4]
}
    3956:	bd70      	pop	{r4, r5, r6, pc}
	node->prev = successor->prev;
    3958:	6863      	ldr	r3, [r4, #4]
    395a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    395c:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    395e:	6863      	ldr	r3, [r4, #4]
    3960:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3962:	6065      	str	r5, [r4, #4]
}
    3964:	e7f7      	b.n	3956 <add_to_waitq_locked+0x40>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3966:	2400      	movs	r4, #0
    3968:	e7e3      	b.n	3932 <add_to_waitq_locked+0x1c>

0000396a <pend>:
{
    396a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    396e:	4605      	mov	r5, r0
    3970:	460f      	mov	r7, r1
    3972:	4691      	mov	r9, r2
    3974:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    3976:	2400      	movs	r4, #0
	__asm__ volatile(
    3978:	f04f 0320 	mov.w	r3, #32
    397c:	f3ef 8611 	mrs	r6, BASEPRI
    3980:	f383 8811 	msr	BASEPRI, r3
    3984:	f3bf 8f6f 	isb	sy
    3988:	b94c      	cbnz	r4, 399e <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    398a:	4639      	mov	r1, r7
    398c:	4628      	mov	r0, r5
    398e:	f7ff ffc2 	bl	3916 <add_to_waitq_locked>
	__asm__ volatile(
    3992:	f386 8811 	msr	BASEPRI, r6
    3996:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    399a:	2401      	movs	r4, #1
    399c:	e7f4      	b.n	3988 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    399e:	464a      	mov	r2, r9
    39a0:	4643      	mov	r3, r8
    39a2:	4628      	mov	r0, r5
    39a4:	f7fe fa2c 	bl	1e00 <add_thread_timeout>
}
    39a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000039ac <z_unpend_first_thread>:
{
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    39b0:	2300      	movs	r3, #0
	__asm__ volatile(
    39b2:	f04f 0220 	mov.w	r2, #32
    39b6:	f3ef 8511 	mrs	r5, BASEPRI
    39ba:	f382 8811 	msr	BASEPRI, r2
    39be:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    39c2:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
    39c4:	b94b      	cbnz	r3, 39da <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
    39c6:	4630      	mov	r0, r6
    39c8:	f7ff ff41 	bl	384e <z_priq_dumb_best>
    39cc:	4604      	mov	r4, r0
	__asm__ volatile(
    39ce:	f385 8811 	msr	BASEPRI, r5
    39d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    39d6:	2301      	movs	r3, #1
    39d8:	e7f4      	b.n	39c4 <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    39da:	b1dc      	cbz	r4, 3a14 <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
    39dc:	2300      	movs	r3, #0
	__asm__ volatile(
    39de:	f04f 0220 	mov.w	r2, #32
    39e2:	f3ef 8511 	mrs	r5, BASEPRI
    39e6:	f382 8811 	msr	BASEPRI, r2
    39ea:	f3bf 8f6f 	isb	sy
    39ee:	b98b      	cbnz	r3, 3a14 <z_unpend_first_thread+0x68>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    39f0:	4620      	mov	r0, r4
    39f2:	f7ff feff 	bl	37f4 <pended_on>
    39f6:	4621      	mov	r1, r4
    39f8:	f7fe fa74 	bl	1ee4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    39fc:	7b63      	ldrb	r3, [r4, #13]
    39fe:	f023 0302 	bic.w	r3, r3, #2
    3a02:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    3a04:	2300      	movs	r3, #0
    3a06:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3a08:	f385 8811 	msr	BASEPRI, r5
    3a0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3a10:	2301      	movs	r3, #1
    3a12:	e7ec      	b.n	39ee <z_unpend_first_thread+0x42>
	if (thread != NULL) {
    3a14:	b11c      	cbz	r4, 3a1e <z_unpend_first_thread+0x72>
	return z_abort_timeout(&thread->base.timeout);
    3a16:	f104 0018 	add.w	r0, r4, #24
    3a1a:	f000 f82a 	bl	3a72 <z_abort_timeout>
}
    3a1e:	4620      	mov	r0, r4
    3a20:	bd70      	pop	{r4, r5, r6, pc}

00003a22 <k_is_in_isr>:
    3a22:	f3ef 8005 	mrs	r0, IPSR
}
    3a26:	3800      	subs	r0, #0
    3a28:	bf18      	it	ne
    3a2a:	2001      	movne	r0, #1
    3a2c:	4770      	bx	lr

00003a2e <z_impl_k_busy_wait>:
{
    3a2e:	b508      	push	{r3, lr}
	arch_busy_wait(usec_to_wait);
    3a30:	f7fd fa62 	bl	ef8 <arch_busy_wait>
}
    3a34:	bd08      	pop	{r3, pc}

00003a36 <z_impl_k_thread_start>:
{
    3a36:	b508      	push	{r3, lr}
	z_sched_start(thread);
    3a38:	f7fe faf8 	bl	202c <z_sched_start>
}
    3a3c:	bd08      	pop	{r3, pc}

00003a3e <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3a3e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;
    3a40:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    3a42:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    3a44:	2300      	movs	r3, #0
    3a46:	73c3      	strb	r3, [r0, #15]
	node->next = NULL;
    3a48:	6183      	str	r3, [r0, #24]
	node->prev = NULL;
    3a4a:	61c3      	str	r3, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    3a4c:	4770      	bx	lr

00003a4e <remove_timeout>:
{
    3a4e:	b510      	push	{r4, lr}
    3a50:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    3a52:	f7fe fe3b 	bl	26cc <next>
    3a56:	b118      	cbz	r0, 3a60 <remove_timeout+0x12>
		next(t)->dticks += t->dticks;
    3a58:	68a1      	ldr	r1, [r4, #8]
    3a5a:	6883      	ldr	r3, [r0, #8]
    3a5c:	440b      	add	r3, r1
    3a5e:	6083      	str	r3, [r0, #8]
	node->prev->next = node->next;
    3a60:	6862      	ldr	r2, [r4, #4]
    3a62:	6823      	ldr	r3, [r4, #0]
    3a64:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3a66:	6862      	ldr	r2, [r4, #4]
    3a68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3a6a:	2300      	movs	r3, #0
    3a6c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    3a6e:	6063      	str	r3, [r4, #4]
}
    3a70:	bd10      	pop	{r4, pc}

00003a72 <z_abort_timeout>:
{
    3a72:	b570      	push	{r4, r5, r6, lr}
    3a74:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    3a76:	2300      	movs	r3, #0
	__asm__ volatile(
    3a78:	f04f 0220 	mov.w	r2, #32
    3a7c:	f3ef 8611 	mrs	r6, BASEPRI
    3a80:	f382 8811 	msr	BASEPRI, r2
    3a84:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    3a88:	f06f 0015 	mvn.w	r0, #21
    3a8c:	e008      	b.n	3aa0 <z_abort_timeout+0x2e>
			remove_timeout(to);
    3a8e:	4620      	mov	r0, r4
    3a90:	f7ff ffdd 	bl	3a4e <remove_timeout>
			ret = 0;
    3a94:	4628      	mov	r0, r5
	__asm__ volatile(
    3a96:	f386 8811 	msr	BASEPRI, r6
    3a9a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3a9e:	2301      	movs	r3, #1
    3aa0:	461d      	mov	r5, r3
    3aa2:	b91b      	cbnz	r3, 3aac <z_abort_timeout+0x3a>
	return node->next != NULL;
    3aa4:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d1f1      	bne.n	3a8e <z_abort_timeout+0x1c>
    3aaa:	e7f4      	b.n	3a96 <z_abort_timeout+0x24>
}
    3aac:	bd70      	pop	{r4, r5, r6, pc}

00003aae <z_get_next_timeout_expiry>:
{
    3aae:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    3ab0:	2300      	movs	r3, #0
	__asm__ volatile(
    3ab2:	f04f 0220 	mov.w	r2, #32
    3ab6:	f3ef 8411 	mrs	r4, BASEPRI
    3aba:	f382 8811 	msr	BASEPRI, r2
    3abe:	f3bf 8f6f 	isb	sy
	s32_t ret = (s32_t) K_TICKS_FOREVER;
    3ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	LOCKED(&timeout_lock) {
    3ac6:	b93b      	cbnz	r3, 3ad8 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    3ac8:	f7fe fe18 	bl	26fc <next_timeout>
	__asm__ volatile(
    3acc:	f384 8811 	msr	BASEPRI, r4
    3ad0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3ad4:	2301      	movs	r3, #1
    3ad6:	e7f6      	b.n	3ac6 <z_get_next_timeout_expiry+0x18>
}
    3ad8:	bd10      	pop	{r4, pc}

00003ada <z_set_timeout_expiry>:
{
    3ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3adc:	4606      	mov	r6, r0
    3ade:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    3ae0:	2300      	movs	r3, #0
	__asm__ volatile(
    3ae2:	f04f 0220 	mov.w	r2, #32
    3ae6:	f3ef 8511 	mrs	r5, BASEPRI
    3aea:	f382 8811 	msr	BASEPRI, r2
    3aee:	f3bf 8f6f 	isb	sy
    3af2:	e00a      	b.n	3b0a <z_set_timeout_expiry+0x30>
		bool sooner = (next == K_TICKS_FOREVER) || (ticks < next);
    3af4:	2401      	movs	r4, #1
    3af6:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3afa:	2801      	cmp	r0, #1
    3afc:	dd00      	ble.n	3b00 <z_set_timeout_expiry+0x26>
    3afe:	b97c      	cbnz	r4, 3b20 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    3b00:	f385 8811 	msr	BASEPRI, r5
    3b04:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3b08:	2301      	movs	r3, #1
    3b0a:	461c      	mov	r4, r3
    3b0c:	b96b      	cbnz	r3, 3b2a <z_set_timeout_expiry+0x50>
		int next = next_timeout();
    3b0e:	f7fe fdf5 	bl	26fc <next_timeout>
		bool sooner = (next == K_TICKS_FOREVER) || (ticks < next);
    3b12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3b16:	d0ed      	beq.n	3af4 <z_set_timeout_expiry+0x1a>
    3b18:	42b0      	cmp	r0, r6
    3b1a:	ddec      	ble.n	3af6 <z_set_timeout_expiry+0x1c>
    3b1c:	2401      	movs	r4, #1
    3b1e:	e7ea      	b.n	3af6 <z_set_timeout_expiry+0x1c>
			z_clock_set_timeout(ticks, idle);
    3b20:	4639      	mov	r1, r7
    3b22:	4630      	mov	r0, r6
    3b24:	f7fc fe58 	bl	7d8 <z_clock_set_timeout>
    3b28:	e7ea      	b.n	3b00 <z_set_timeout_expiry+0x26>
}
    3b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003b2c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    3b2c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    3b2e:	f7fe fecd 	bl	28cc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    3b32:	bd08      	pop	{r3, pc}

00003b34 <k_heap_init>:
{
    3b34:	b510      	push	{r4, lr}
    3b36:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    3b3a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    3b3c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    3b3e:	f7ff f990 	bl	2e62 <sys_heap_init>
}
    3b42:	bd10      	pop	{r4, pc}

00003b44 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    3b44:	4770      	bx	lr
